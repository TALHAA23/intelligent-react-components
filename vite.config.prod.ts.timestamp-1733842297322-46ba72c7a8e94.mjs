// vite.config.prod.ts
import { defineConfig } from "file:///D:/intelligent-react-components/node_modules/.pnpm/vite@5.4.3_@types+node@22.5.4/node_modules/vite/dist/node/index.js";
import dts from "file:///D:/intelligent-react-components/node_modules/.pnpm/vite-plugin-dts@4.1.1_@types+node@22.5.4_rollup@4.21.2_typescript@5.5.4_vite@5.4.3_@types+node@22.5.4_/node_modules/vite-plugin-dts/dist/index.mjs";
import { resolve } from "path";
import tsconfigPaths from "file:///D:/intelligent-react-components/node_modules/.pnpm/vite-tsconfig-paths@5.0.1_typescript@5.5.4_vite@5.4.3_@types+node@22.5.4_/node_modules/vite-tsconfig-paths/dist/index.js";
import cssInjectedByJsPlugin from "file:///D:/intelligent-react-components/node_modules/.pnpm/vite-plugin-css-injected-by-js@3.5.2_vite@5.4.3_@types+node@22.5.4_/node_modules/vite-plugin-css-injected-by-js/dist/esm/index.js";
var __vite_injected_original_dirname = "D:\\intelligent-react-components";
var DIRNAME = __vite_injected_original_dirname;
var PATHS = {
  base: resolve(DIRNAME, "../../../"),
  src: "./src/index.ts",
  outputDir: "./dist",
  tsconfigPath: resolve(DIRNAME, "./tsconfig.json")
};
var vite_config_prod_default = defineConfig({
  base: PATHS.base,
  build: {
    lib: {
      entry: resolve(DIRNAME, PATHS.src),
      name: "irc",
      // Sets the name of the generated library.
      fileName: (format) => `index.${format}.js`,
      // Generates the output file name based on the format.
      formats: ["cjs", "es"]
      // Specifies the output formats (CommonJS and ES modules).
    },
    outDir: resolve(DIRNAME, PATHS.outputDir),
    sourcemap: true,
    emptyOutDir: true,
    rollupOptions: {
      external: ["react"]
    }
  },
  plugins: [
    dts({
      rollupTypes: true,
      root: DIRNAME,
      insertTypesEntry: true,
      compilerOptions: {
        baseUrl: DIRNAME,
        paths: {
          "@types/*": [resolve(DIRNAME, "./types/*")]
        }
      }
    }),
    tsconfigPaths({
      root: DIRNAME
    }),
    cssInjectedByJsPlugin()
    // libInjectCss(),
  ]
  // Uses the 'vite-plugin-dts' plugin for generating TypeScript declaration files (d.ts).
});
export {
  vite_config_prod_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcucHJvZC50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIkQ6XFxcXGludGVsbGlnZW50LXJlYWN0LWNvbXBvbmVudHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIkQ6XFxcXGludGVsbGlnZW50LXJlYWN0LWNvbXBvbmVudHNcXFxcdml0ZS5jb25maWcucHJvZC50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vRDovaW50ZWxsaWdlbnQtcmVhY3QtY29tcG9uZW50cy92aXRlLmNvbmZpZy5wcm9kLnRzXCI7aW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSBcInZpdGVcIjtcclxuaW1wb3J0IGR0cyBmcm9tIFwidml0ZS1wbHVnaW4tZHRzXCI7XHJcbmltcG9ydCB7IHJlc29sdmUgfSBmcm9tIFwicGF0aFwiO1xyXG5pbXBvcnQgdHNjb25maWdQYXRocyBmcm9tIFwidml0ZS10c2NvbmZpZy1wYXRoc1wiO1xyXG5pbXBvcnQgeyBsaWJJbmplY3RDc3MgfSBmcm9tIFwidml0ZS1wbHVnaW4tbGliLWluamVjdC1jc3NcIjtcclxuaW1wb3J0IGNzc0luamVjdGVkQnlKc1BsdWdpbiBmcm9tICd2aXRlLXBsdWdpbi1jc3MtaW5qZWN0ZWQtYnktanMnXHJcblxyXG5jb25zdCBESVJOQU1FID0gaW1wb3J0Lm1ldGEuZGlybmFtZTtcclxuY29uc3QgUEFUSFMgPSB7XHJcbiAgYmFzZTogcmVzb2x2ZShESVJOQU1FLCBcIi4uLy4uLy4uL1wiKSxcclxuICBzcmM6IFwiLi9zcmMvaW5kZXgudHNcIixcclxuICBvdXRwdXREaXI6IFwiLi9kaXN0XCIsXHJcbiAgdHNjb25maWdQYXRoOiByZXNvbHZlKERJUk5BTUUsIFwiLi90c2NvbmZpZy5qc29uXCIpLFxyXG59O1xyXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoe1xyXG4gIGJhc2U6IFBBVEhTLmJhc2UsXHJcbiAgYnVpbGQ6IHtcclxuICAgIGxpYjoge1xyXG4gICAgICBlbnRyeTogcmVzb2x2ZShESVJOQU1FLCBQQVRIUy5zcmMpLFxyXG4gICAgICBuYW1lOiBcImlyY1wiLCAvLyBTZXRzIHRoZSBuYW1lIG9mIHRoZSBnZW5lcmF0ZWQgbGlicmFyeS5cclxuICAgICAgZmlsZU5hbWU6IChmb3JtYXQpID0+IGBpbmRleC4ke2Zvcm1hdH0uanNgLCAvLyBHZW5lcmF0ZXMgdGhlIG91dHB1dCBmaWxlIG5hbWUgYmFzZWQgb24gdGhlIGZvcm1hdC5cclxuICAgICAgZm9ybWF0czogW1wiY2pzXCIsIFwiZXNcIl0sIC8vIFNwZWNpZmllcyB0aGUgb3V0cHV0IGZvcm1hdHMgKENvbW1vbkpTIGFuZCBFUyBtb2R1bGVzKS5cclxuICAgIH0sXHJcbiAgICBvdXREaXI6IHJlc29sdmUoRElSTkFNRSwgUEFUSFMub3V0cHV0RGlyKSxcclxuICAgIHNvdXJjZW1hcDogdHJ1ZSxcclxuICAgIGVtcHR5T3V0RGlyOiB0cnVlLFxyXG4gICAgcm9sbHVwT3B0aW9uczoge1xyXG4gICAgICBleHRlcm5hbDogW1wicmVhY3RcIl0sXHJcbiAgICB9LFxyXG4gIH0sXHJcbiAgcGx1Z2luczogW1xyXG4gICAgZHRzKHtcclxuICAgICAgcm9sbHVwVHlwZXM6IHRydWUsXHJcbiAgICAgIHJvb3Q6IERJUk5BTUUsXHJcbiAgICAgIGluc2VydFR5cGVzRW50cnk6IHRydWUsXHJcbiAgICAgIGNvbXBpbGVyT3B0aW9uczoge1xyXG4gICAgICAgIGJhc2VVcmw6IERJUk5BTUUsXHJcbiAgICAgICAgcGF0aHM6IHtcclxuICAgICAgICAgIFwiQHR5cGVzLypcIjogW3Jlc29sdmUoRElSTkFNRSwgXCIuL3R5cGVzLypcIildLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICB9KSxcclxuICAgIHRzY29uZmlnUGF0aHMoe1xyXG4gICAgICByb290OiBESVJOQU1FLFxyXG4gICAgfSksXHJcbiAgICBjc3NJbmplY3RlZEJ5SnNQbHVnaW4oKVxyXG4gICAgLy8gbGliSW5qZWN0Q3NzKCksXHJcbiAgXSwgLy8gVXNlcyB0aGUgJ3ZpdGUtcGx1Z2luLWR0cycgcGx1Z2luIGZvciBnZW5lcmF0aW5nIFR5cGVTY3JpcHQgZGVjbGFyYXRpb24gZmlsZXMgKGQudHMpLlxyXG59KTtcclxuXHJcbi8vICEgVmVyc2lvbiAyIC0gRE8gTk9UIERFTEVURVxyXG4vLyBpbXBvcnQgeyBkZWZpbmVDb25maWcgfSBmcm9tIFwidml0ZVwiO1xyXG4vLyBpbXBvcnQgZHRzIGZyb20gXCJ2aXRlLXBsdWdpbi1kdHNcIjtcclxuLy8gaW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gXCJwYXRoXCI7XHJcbi8vIGltcG9ydCB0c2NvbmZpZ1BhdGhzIGZyb20gXCJ2aXRlLXRzY29uZmlnLXBhdGhzXCI7XHJcbi8vIGltcG9ydCB7IGxpYkluamVjdENzcyB9IGZyb20gXCJ2aXRlLXBsdWdpbi1saWItaW5qZWN0LWNzc1wiO1xyXG5cclxuLy8gLy8gY29uc3QgRElSTkFNRSA9IGltcG9ydC5tZXRhLmRpcm5hbWU7XHJcbi8vIGNvbnN0IERJUk5BTUUgPSByZXNvbHZlKFxyXG4vLyAgIHByb2Nlc3MuY3dkKCksXHJcbi8vICAgXCIuL25vZGVfbW9kdWxlcy9pbnRlbGxpZ2VudC1yZWFjdC1jb21wb25lbnRzXCJcclxuLy8gKTtcclxuLy8gY29uc3QgUEFUSFMgPSB7XHJcbi8vICAgYmFzZTogRElSTkFNRSxcclxuLy8gICBzcmM6IHJlc29sdmUoRElSTkFNRSwgXCIuL3NyYy9pbmRleC50c1wiKSxcclxuLy8gICBvdXRwdXREaXI6IHJlc29sdmUoRElSTkFNRSwgXCIuL2Rpc3RcIiksXHJcbi8vICAgdHNjb25maWdQYXRoOiByZXNvbHZlKERJUk5BTUUsIFwiLi90c2NvbmZpZy5qc29uXCIpLFxyXG4vLyB9O1xyXG4vLyBjb25zb2xlLmxvZyhQQVRIUyk7XHJcblxyXG4vLyBleHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoe1xyXG4vLyAgIGJhc2U6IFBBVEhTLmJhc2UsXHJcbi8vICAgcHVibGljRGlyOiBcInB1YmxpY1wiLFxyXG4vLyAgIGJ1aWxkOiB7XHJcbi8vICAgICBsaWI6IHtcclxuLy8gICAgICAgZW50cnk6IFBBVEhTLnNyYyxcclxuLy8gICAgICAgbmFtZTogXCJpcmNcIiwgLy8gU2V0cyB0aGUgbmFtZSBvZiB0aGUgZ2VuZXJhdGVkIGxpYnJhcnkuXHJcbi8vICAgICAgIGZpbGVOYW1lOiAoZm9ybWF0KSA9PiBgaW5kZXguJHtmb3JtYXR9LmpzYCwgLy8gR2VuZXJhdGVzIHRoZSBvdXRwdXQgZmlsZSBuYW1lIGJhc2VkIG9uIHRoZSBmb3JtYXQuXHJcbi8vICAgICAgIGZvcm1hdHM6IFtcImNqc1wiLCBcImVzXCJdLCAvLyBTcGVjaWZpZXMgdGhlIG91dHB1dCBmb3JtYXRzIChDb21tb25KUyBhbmQgRVMgbW9kdWxlcykuXHJcbi8vICAgICB9LFxyXG4vLyAgICAgb3V0RGlyOiBQQVRIUy5vdXRwdXREaXIsXHJcbi8vICAgICBzb3VyY2VtYXA6IHRydWUsXHJcbi8vICAgICBlbXB0eU91dERpcjogdHJ1ZSxcclxuLy8gICAgIHJvbGx1cE9wdGlvbnM6IHtcclxuLy8gICAgICAgZXh0ZXJuYWw6IFtcInJlYWN0XCJdLFxyXG4vLyAgICAgfSxcclxuLy8gICB9LFxyXG4vLyAgIHBsdWdpbnM6IFtcclxuLy8gICAgIGR0cyh7XHJcbi8vICAgICAgIHJvbGx1cFR5cGVzOiB0cnVlLFxyXG4vLyAgICAgICByb290OiBQQVRIUy5iYXNlLFxyXG4vLyAgICAgICBpbnNlcnRUeXBlc0VudHJ5OiB0cnVlLFxyXG4vLyAgICAgICBjb21waWxlck9wdGlvbnM6IHtcclxuLy8gICAgICAgICBiYXNlVXJsOiBQQVRIUy5iYXNlLFxyXG4vLyAgICAgICAgIHBhdGhzOiB7XHJcbi8vICAgICAgICAgICBcIkB0eXBlcy8qXCI6IFtyZXNvbHZlKFBBVEhTLmJhc2UsIFwiLi90eXBlcy8qXCIpXSxcclxuLy8gICAgICAgICB9LFxyXG4vLyAgICAgICB9LFxyXG4vLyAgICAgfSksXHJcbi8vICAgICB0c2NvbmZpZ1BhdGhzKHtcclxuLy8gICAgICAgcm9vdDogUEFUSFMuYmFzZSxcclxuLy8gICAgIH0pLFxyXG4vLyAgICAgbGliSW5qZWN0Q3NzKCksXHJcbi8vICAgXSwgLy8gVXNlcyB0aGUgJ3ZpdGUtcGx1Z2luLWR0cycgcGx1Z2luIGZvciBnZW5lcmF0aW5nIFR5cGVTY3JpcHQgZGVjbGFyYXRpb24gZmlsZXMgKGQudHMpLlxyXG4vLyB9KTtcclxuLy8gISAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBNlIsU0FBUyxvQkFBb0I7QUFDMVQsT0FBTyxTQUFTO0FBQ2hCLFNBQVMsZUFBZTtBQUN4QixPQUFPLG1CQUFtQjtBQUUxQixPQUFPLDJCQUEyQjtBQUxsQyxJQUFNLG1DQUFtQztBQU96QyxJQUFNLFVBQVU7QUFDaEIsSUFBTSxRQUFRO0FBQUEsRUFDWixNQUFNLFFBQVEsU0FBUyxXQUFXO0FBQUEsRUFDbEMsS0FBSztBQUFBLEVBQ0wsV0FBVztBQUFBLEVBQ1gsY0FBYyxRQUFRLFNBQVMsaUJBQWlCO0FBQ2xEO0FBQ0EsSUFBTywyQkFBUSxhQUFhO0FBQUEsRUFDMUIsTUFBTSxNQUFNO0FBQUEsRUFDWixPQUFPO0FBQUEsSUFDTCxLQUFLO0FBQUEsTUFDSCxPQUFPLFFBQVEsU0FBUyxNQUFNLEdBQUc7QUFBQSxNQUNqQyxNQUFNO0FBQUE7QUFBQSxNQUNOLFVBQVUsQ0FBQyxXQUFXLFNBQVMsTUFBTTtBQUFBO0FBQUEsTUFDckMsU0FBUyxDQUFDLE9BQU8sSUFBSTtBQUFBO0FBQUEsSUFDdkI7QUFBQSxJQUNBLFFBQVEsUUFBUSxTQUFTLE1BQU0sU0FBUztBQUFBLElBQ3hDLFdBQVc7QUFBQSxJQUNYLGFBQWE7QUFBQSxJQUNiLGVBQWU7QUFBQSxNQUNiLFVBQVUsQ0FBQyxPQUFPO0FBQUEsSUFDcEI7QUFBQSxFQUNGO0FBQUEsRUFDQSxTQUFTO0FBQUEsSUFDUCxJQUFJO0FBQUEsTUFDRixhQUFhO0FBQUEsTUFDYixNQUFNO0FBQUEsTUFDTixrQkFBa0I7QUFBQSxNQUNsQixpQkFBaUI7QUFBQSxRQUNmLFNBQVM7QUFBQSxRQUNULE9BQU87QUFBQSxVQUNMLFlBQVksQ0FBQyxRQUFRLFNBQVMsV0FBVyxDQUFDO0FBQUEsUUFDNUM7QUFBQSxNQUNGO0FBQUEsSUFDRixDQUFDO0FBQUEsSUFDRCxjQUFjO0FBQUEsTUFDWixNQUFNO0FBQUEsSUFDUixDQUFDO0FBQUEsSUFDRCxzQkFBc0I7QUFBQTtBQUFBLEVBRXhCO0FBQUE7QUFDRixDQUFDOyIsCiAgIm5hbWVzIjogW10KfQo=
