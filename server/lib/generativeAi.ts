import { GoogleGenerativeAI, StartChatParams } from "@google/generative-ai";
import { Common } from "../types";
import loadConfig from "../utils/loadConfig.js";
import dotenv from "dotenv";
import instructionHandler from "./instructionSelector.js";
import CLI from "../utils/chalk.js";
dotenv.config();
const apiKey = process.env.GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey as string);

const geminiModels = {
  GEMINIFLASH: "gemini-1.5-flash",
  GEMINIFLASH8B: "gemini-1.5-flash-8b",
  GEMINIPRO: "gemini-1.5-pro",
  "GEMINIFLASH2.0": "gemini-2.0-flash",
  "GEMINI2.0FLASHTHINKINGEXP": "gemini-2.0-flash-thinking-exp-01-21",
};

type Models = {
  [key in "button" | "input" | "form"]?: {
    history?: StartChatParams["history"];
  };
};

// let latestConv: StartChatParams["history"] = [];

const models: Models = {
  button: {
    history: [
      {
        role: "user",
        parts: [
          {
            text: '```json\n{\n  "listener": "click",\n  "prompt": "A function that greets the user using two functions, one to greet using alert and the other using console. Also, count the number of times the user is greeted and alert the user with this information.",\n  "supportingProps": {\n    "variables": {}\n  }\n}\n```\n',
          },
        ],
      },
      {
        role: "model",
        parts: [
          {
            text: '```json\n{\n  "thoughts": "The prompt describes an event listener that greets the user using two separate functions. The greet count is tracked and displayed using globals. Helper functions are used to encapsulate the greetings and counting logic.",\n  "error": {},\n  "response": {\n    "eventListener": "function main(event, args) { \\n  if (!globals.greetCount) { \\n    globals.greetCount = 0; \\n  } \\n  globals.greetCount++; \\n  fnGreetAlert(); \\n  fnGreetConsole(); \\n  alert(\'You have been greeted \' + globals.greetCount + \' times\'); \\n}",\n    "globals": {\n      "greetCount": 0\n    },\n    "imports": [],\n    "helperFunctions": [\n      "function fnGreetAlert() { alert(\'Hello from alert!\'); }",\n      "function fnGreetConsole() { console.log(\'Hello from console!\'); }"\n    ]\n  },\n  "expect": "No additional elements or variables are required.  The functions will alert and log the message to the console."\n}\n```\n',
          },
        ],
      },
      {
        role: "user",
        parts: [
          {
            text: '```json\n{\n  "listener": "click",\n  "prompt": "A function that define two empty functions and call them in main, also track the number of time main is called",\n}\n```\n',
          },
        ],
      },
      {
        role: "model",
        parts: [
          {
            text: '```json\n{\n  "thoughts": "The prompt describes a function that defines two empty functions and calls them within the main function.  A counter is used to track the number of times the main function is called. Helper functions are used to encapsulate the empty functions and counting logic.",\n  "error": {},\n  "response": {\n    "eventListener": "function main(event, args) {\\n  if (!globals.mainCallCount) {\\n    globals.mainCallCount = 0;\\n  }\\n  globals.mainCallCount++;\\n  fnEmpty1();\\n  fnEmpty2();\\n  console.log(\'Main function called \' + globals.mainCallCount + \' times\');\\n}",\n    "globals": {\n      "mainCallCount": 0\n    },\n    "imports": [],\n    "helperFunctions": [\n      "function fnEmpty1() { /* Empty function */ }",\n      "function fnEmpty2() { /* Empty function */ }"\n    ]\n  },\n  "expect": "No additional elements or variables are required. The empty functions will be called, and the number of times the main function is called will be logged to the console."\n}\n```\n',
          },
        ],
      },
      {
        role: "user",
        parts: [
          {
            text: '```json\n{\n  "listener": "click",\n  "prompt": "A function that requests https://localhost:3000, takes data from it, and then performs the following processes on the data: 1) Extract data with invalid name fields. 2) Extract data with invalid age fields (age < 18). 3) Console each result. Create a function for each process.",\n  "supportingProps": {\n    "utils": {\n      "$apiEndpoint": "https://localhost:3000"\n    },\n    "variables": {}\n  }\n}\n```',
          },
        ],
      },
      {
        role: "model",
        parts: [
          {
            text: '```json\n{\n  "thoughts": "The prompt describes an asynchronous function that fetches data from a specified API endpoint, processes it using three helper functions to extract data with invalid names and ages, and then logs the results to the console. Error handling is included to manage potential network issues and data inconsistencies.",\n  "error": {},\n  "response": {\n    "eventListener": "async function main(event, args) {\\n  try {\\n    const response = await fetch(args.$apiEndpoint);\\n    if (!response.ok) {\\n      throw new Error(`HTTP error! status: ${response.status}`);\\n    }\\n    const data = await response.json();\\n    const invalidNames = fnExtractInvalidNames(data);\\n    const invalidAges = fnExtractInvalidAges(data);\\n    console.log(\'Data with invalid names:\', invalidNames);\\n    console.log(\'Data with invalid ages:\', invalidAges);\\n  } catch (error) {\\n    console.error(\'An error occurred:\', error);\\n  }\\n}",\n    "globals": {},\n    "imports": [],\n    "helperFunctions": [\n      "function fnExtractInvalidNames(data) {\\n  return data.filter(item => typeof item.name !== \'string\' || item.name.trim() === \'\');\\n}",\n      "function fnExtractInvalidAges(data) {\\n  return data.filter(item => typeof item.age !== \'number\' || item.age < 18);\\n}"\n    ]\n  },\n  "expect": "The API endpoint (args.$apiEndpoint) must return a JSON array where each object has \'name\' and \'age\' properties.  The \'name\' property should be a non-empty string, and the \'age\' property should be a number greater than or equal to 18 for valid data."\n}\n```\n',
          },
        ],
      },
      {
        role: "user",
        parts: [
          {
            text: "{\nlistener:click\nprompt: a function that create a calculater which have +-/*. Then call each with input 2, 2 and console the result in each\n}",
          },
        ],
      },
      {
        role: "model",
        parts: [
          {
            text: '```json\n{\n  "thoughts": "The prompt describes a function that creates a calculator with four basic operations (+, -, *, /) and calls each operation with the inputs 2 and 2, logging the results to the console. Helper functions are used to encapsulate each operation.",\n  "error": {},\n  "response": {\n    "eventListener": "function main(event, args) {\\n  console.log(\'Addition:\', fnAdd(2, 2));\\n  console.log(\'Subtraction:\', fnSubtract(2, 2));\\n  console.log(\'Multiplication:\', fnMultiply(2, 2));\\n  console.log(\'Division:\', fnDivide(2, 2));\\n}",\n    "globals": {},\n    "imports": [],\n    "helperFunctions": [\n      "function fnAdd(a, b) { return a + b; }",\n      "function fnSubtract(a, b) { return a - b; }",\n      "function fnMultiply(a, b) { return a * b; }",\n      "function fnDivide(a, b) { return b ===0 ? \'Division by zero error\' : a / b; }"\n    ]\n  },\n  "expect": "No additional elements or variables are required. The results of each calculation will be logged to the console."\n}\n```\n',
          },
        ],
      },
      {
        role: "user",
        parts: [
          {
            text: '```json\n{\n  "listener": "click",\n  "prompt": "a function that will create a form and show it as a dialog box. The form will have the following inputs; 1) username. 2)email 3) password. 4) A submit button. The form is basically a sign-in and sign-up combined form. beside these inputs the form will have a text like which will say: \'Alredy have an accound? Sign-in\' or \'Don\'t have an account? Sign-up\'. Clicking the text will change the behaviour of the form accordingly. A sign-in form will omit username field. You have to add a comprehesive css for the form to make it too looking. Now about functionality the form should validate; 1) valid email. 2) password must contain atleast one uppercase letter and 6 characters long. 3) username do not contain speical characters. After input validation, authenticate the user (register or log in) using email-password. If its Sign-up, use the resultant id to create a document in users collection (empty doc). if its sign-in user the resultant id to retrieve the user data from users collection and console it to user. While all this process happen you should add a toaster and show it in the bottom right corner of the screen and show the user which activity is currently happening. The form related error or success should be shown in the toaster as will as in the form at the top of all the inputs",\n  "supportingProps":{\n    "database":{\n      "name":"firebase Auth + firebase firestore",\n      "envGuide":"use NEXT_PUBLIC at the beginning and _P2 at the end of each"\n    }\n  }\n}\n```\n',
          },
        ],
      },
      {
        role: "model",
        parts: [
          {
            text: "```json\n{\n  \"thoughts\": \"This is a complex prompt requiring a multi-step form with authentication, data persistence, and dynamic UI updates. The solution utilizes helper functions defined in 'helperFunctions' for better organization.  Error handling, input validation, and user feedback mechanisms (toasters) are included.  Firebase Authentication and Firestore are used for user management and data persistence.\",\n  \"error\": {},\n  \"response\": {\n    \"eventListener\": \"async function main(event, args) {\\n  fnCreateForm();\\n  fnAddFormEventlisteners();\\n}\",\n    \"globals\": {\n      \"isSignUp\": false,\n      \"isFormCreated\": false\n    },\n    \"helperFunctions\": [\n  \"function fnInitializeApp() {\n    initializeApp({\n      apiKey: process.env.NEXT_PUBLIC_API_KEY_P2,\n      authDomain: process.env.NEXT_PUBLIC_AUTH_DOMAIN_P2,\n      projectId: process.env.NEXT_PUBLIC_PROJECT_ID_P2,\n      storageBucket: process.env.NEXT_PUBLIC_STORAGE_BUCKET_P2,\n      messagingSenderId: process.env.NEXT_PUBLIC_MESSAGING_SENDER_ID_P2,\n      appId: process.env.NEXT_PUBLIC_APP_ID_P2,\n    });\n  }\",\n  \"function fnCreateForm() {\n    if (globals.isFormCreated) {\n      globals.dialogBoxRef.showModal();\n      return;\n    }\n    const dialog = document.createElement('dialog');\n    // save the reference to use in other functionsfn\n    globals.dialogBoxRef = dialog;\n    dialog.style.cssText = `border: 1px solid #ccc;padding: 20px;border-radius: 5px;box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);/*center dialog assuming it looks better in center*/position: absoulte;  top: 50%; left: 50%; transform: translate(-50%, -50%); width:100%; max-width:500px /* For positioning the toaster */        `;\n    const form = document.createElement('form');\n    const errorContainer = document.createElement('div');\n    errorContainer.id = 'error-container';\n    errorContainer.style.cssText =\n      'color: red; margin-bottom: 11px; font-size:smaller';\n    form.appendChild(errorContainer);\n    const usernameInput = document.createElement('input');\n    usernameInput.type = 'text';\n    usernameInput.id = 'username';\n    usernameInput.placeholder = 'Username';\n    usernameInput.style.cssText =\n      'width: 100%; padding: 8px; margin-bottom: 10px;';\n    form.appendChild(usernameInput);\n    const emailInput = document.createElement('input');\n    emailInput.type = 'email';\n    emailInput.id = 'email';\n    emailInput.placeholder = 'Email';\n    emailInput.style.cssText =\n      'width: 100%; padding: 8px; margin-bottom: 10px;';\n    form.appendChild(emailInput);\n    const passwordInput = document.createElement('input');\n    passwordInput.type = 'password';\n    passwordInput.id = 'password';\n    passwordInput.placeholder = 'Password';\n    passwordInput.style.cssText =\n      'width: 100%; padding: 8px; margin-bottom: 10px;';\n    form.appendChild(passwordInput);\n    const switchText = document.createElement('p');\n    switchText.id = 'switch-text';\n    switchText.style.cssText =\n      'text-align: center; margin-bottom: 10px; cursor: pointer;';\n    // as globals.isSignUp is false by default, text content of switchText will be for sign-in\n    switchText.textContent =  'Don\\'t have an account? Sign-up';\n    form.appendChild(switchText);\n    const submitButton = document.createElement('button');\n    // save the reference to use in other functionsfn\n    globals.submitButtonRef = submitButton;\n    submitButton.type = 'submit';\n    submitButton.textContent = 'Submit';\n    submitButton.style.cssText =\n      'width: 100%; padding: 8px; background-color: #4CAF50; color: white; border: none; border-radius: 5px; cursor: pointer;';\n    form.appendChild(submitButton);\n    dialog.appendChild(form);\n    document.body.appendChild(dialog);\n    dialog.showModal();\n    globals.isFormCreated = true;\n  }\",\n  \"function fnAddFormEventlisteners() { // Corrected function name for consistency\n    const form = document.querySelector('dialog form');\n    const errorContainer = document.getElementById('error-container');\n    const switchText = document.getElementById('switch-text');\n    const usernameInput = document.getElementById('username');\n    const emailInput = document.getElementById('email');\n    const passwordInput = document.getElementById('password');\n    switchText.addEventlistener('click', () => {\n      globals.isSignUp = !globals.isSignUp;\n      fnUpdateSwitchText();\n      usernameInput.style.display = globals.isSignUp ? 'block' : 'none';\n    });\n    form.addEventlistener('submit', async (e) => {\n      e.preventDefault();\n      fnUpdateButtonState(true);\n      errorContainer.textContent = '';\n      fnShowToaster('Processing...');\n      try {\n        if (globals.isSignUp) {\n          await fnSignUp(usernameInput.value, emailInput.value, passwordInput.value);\n        } else {\n          await fnSignIn(emailInput.value, passwordInput.value);\n        }\n        fnShowToaster('Success!', 'success');\n        form.reset();\n      } catch (error) {\n        errorContainer.textContent = error.message;\n        fnShowToaster(error.message, 'error');\n      } finally {\n        fnHideToaster();\n        fnUpdateButtonState(false);\n      }\n    });\n  }\",\n  \"function fnUpdateSwitchText() {\n    const switchText = document.getElementById('switch-text');\n    switchText.textContent = globals.isSignUp ? 'Already have an account? Sign-in' : 'Don't have an account? Sign-up';\n  }\",\n  \"function fnShowToaster(message, type = 'info') {\n    const toaster = document.createElement('div');\n    toaster.style.cssText = `\n      position: fixed;\n      bottom: 20px;\n      right: 20px;\n      background-color: ${type === 'error' ? '#f44336' : type === 'success' ? '#4CAF50' : '#2196F3'};\n      color: white;\n      padding: 10px;\n      border-radius: 5px;\n      z-index: 1000;\n    `;\n    toaster.textContent = message;\n    document.body.appendChild(toaster);\n    setTimeout(() => toaster.remove(), 3000);\n  }\",\n  \"function fnHideToaster() {\n    const toaster = document.querySelector(`div[style*='position: fixed']`);\n    if (toaster) toaster.remove();\n  }\",\n   \"async function fnSignUp(username, email, password) {\n    if (!fnValidateInput(username, email, password)) return;\n    fnInitializeApp();\n    const auth = getAuth();\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    const user = userCredential.user;\n    const db = getFirestore();\n    const docRef = doc(db, 'users', user.uid);\n    await setDoc(docRef, { username }); // Added username to user document\n    console.log('User created:', user);\n    globals.dialogBoxRef.close();\n  }\",\n  \"async function fnSignIn(email, password) {\n    if (!fnValidatePassword(email, password)) return;\n    fnInitializeApp();\n    const auth = getAuth();\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    const user = userCredential.user;\n    const db = getFirestore();\n    const userDoc = doc(db, 'users', user.uid);\n    const userSnapshot = await getDoc(userDoc);\n    console.log('User data:', userSnapshot.data());\n    globals.dialogBoxRef.close();\n  }\",\n  \"function fnValidateInput(username, email, password) {\n    if (!username || !email || !password) {\n      throw new Error('All fields are required.');\n    }\n    if (!fnIsValidEmail(email)) {\n      throw new Error('Invalid email address.');\n    }\n    if (!fnIsValidPassword(password)) {\n      throw new Error('Password must be at least 6 characters long and contain at least one uppercase letter.');\n    }\n    if (!fnIsValidUsername(username)) {\n      throw new Error('Username cannot contain special characters.');\n    }\n    return true;\n  }\",\n  \"function fnValidatePassword(email, password) {\n    if (!email || !password) {\n      throw new Error('Email and password are required.');\n    }\n    if (!fnIsValidPassword(password)) {\n      throw new Error('Password must be at least 6 characters long and contain at least one uppercase letter.');\n    }\n    return true;\n  }\",\n  \"function fnIsValidPassword(password) {\n    return password.length >= 6 && /[A-Z]/.test(password);\n  }\",\n  \"function fnIsValidUsername(username) {\n    return /^[a-zA-Z0-9_]+$/.test(username);\n  }\",\n \"function fnIsValidEmail(email) {\n  return /^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+$/.test(email);\n}\"\n  \"function fnUpdateButtonState(isSubmitting) {\n    globals.submitButtonRef.textContent = isSubmitting ? 'Submitting...' : 'Submit'; //Improved text\n    globals.submitButtonRef.disabled = isSubmitting; //Simplified disabling\n  }\",\n],\n    \"imports\": [\n      \"import { initializeApp } from 'firebase/app'\",\n      \"import { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword } from 'firebase/auth'\",\n      \"import { getFirestore, collection, addDoc, doc, getDoc, setDoc } from 'firebase/firestore';\"\n    ]\n  },\n  \"expect\": \"The user must have the Firebase package installed and have the necessary environment variables set (NEXT_PUBLIC_API_KEY_P2, NEXT_PUBLIC_AUTH_DOMAIN_P2, NEXT_PUBLIC_PROJECT_ID_P2, NEXT_PUBLIC_STORAGE_BUCKET_P2, NEXT_PUBLIC_MESSAGING_SENDER_ID_P2, NEXT_PUBLIC_APP_ID_P2). A 'users' collection must exist in Firestore.\"\n}\n```\n",
          },
        ],
      },
      {
        role: "user",
        parts: [
          {
            text: '```json\n{\n"prompt":"a function say Hello using alert",\n"listener":"onClick",\n"onInit":"Disable the button and change the text to \'Active at night only\' if the time is not 7PM-4AM"\n}\n```',
          },
        ],
      },
      {
        role: "model",
        parts: [
          {
            text: '```json\n{\n  "thoughts": "The user wants to display an alert message \'Hello\' when the button is clicked and initialize the button by disabling it and changing its text based on the current time. An onInitialRender function is generated for the initialization logic.",\n  "response": {\n    "eventListener": "function main(event, args) { alert(\'Hello\'); }",\n    "onInitialRender": "function onInitialRender(target, args) { const now = new Date(); const hours = now.getHours(); if (hours < 19 && hours > 4) { target.disabled = true; target.innerText = \'Active at night only\'; } }"\n  },\n  "error": {},\n  "expect": "Ensure that the button has the onClick listener attached. On initialization, the button will be disabled and text updated if the current time is not between 7 PM and 4 AM."\n}\n```\n',
          },
        ],
      },
    ],
  },
  input: {
    history: [
      {
        role: "user",
        parts: [{ text: "Hi\n" }],
      },
      {
        role: "model",
        parts: [
          {
            text: '```json\n{\n  "error": {\n    "message": "Irrelevant request.",\n    "status": 400,\n    "details": "The request is not related to generating a JavaScript event listener function for a DOM element (such as \'input\' or \'button\'). Please provide a valid JSON input.",\n    "code": "IRRELEVANT_REQUEST"\n  }\n}\n```',
          },
        ],
      },
      {
        role: "user",
        parts: [
          {
            text: '```json\n{\n"prompt":"a function that validate email",\n"listener":"onBlur",\n"type":"email",\n"callbacks":{\n "independent":[\n{ "callGuide":"call everytime","callback":"callbackIndependent0" }\n],\n"dependent":[\n{ "callGuide":"call when email is valid","paramterGuide":["pass the result as boolean","pass the email"], "callback":"validEmail"  }\n]\n}\n}\n```',
          },
        ],
      },
      {
        role: "model",
        parts: [
          {
            text: '```json\n{\n  "thoughts": "I\'m going to create a function to validate an email on blur, call an independent callback, and call a dependent callback when the email is valid.",\n  "error": {},\n  "response": {\n    "eventListener": "function main(event, args) {\\n  const email = event.target.value;\\n  args.callbackIndependent0();\\n  if (fnValidateEmail(email)) {\\n    args.validEmail(true, email);\\n  } else {\\n    args.validEmail(false, email);\\n  }\\n}",\n    "globals": {},\n    "imports": [],\n    "helperFunctions": [\n      "function fnValidateEmail(email) {\\n  const re = /^[\\\\w-\\\\.]+@([\\\\w-]+\\\\.)+[\\\\w-]{2,4}$/;\\n  return re.test(email);\\n}"\n    ]\n  },\n  "expect": "The args object must contain callbackIndependent0 (function) and validEmail (function with 2 parameters: a boolean and the email address)."\n}\n```',
          },
        ],
      },
      {
        role: "user",
        parts: [
          {
            text: "Your code  have some error:\n\n Invalid regular expression: /^[\\\\w-\\\\.]+@([\\\\w-]+\\\\.)+[\\\\w-]{2,4}$/: Range out of order in character class\n\nAlso you can refactor the code, as fnValidateEmail boolean you can just pass that to args.validEmail without the if-else statement.\n\nregenerate with the changes and remember to not repeat these mistakes in the future.\n",
          },
        ],
      },
      {
        role: "model",
        parts: [
          {
            text: '```json\n{\n  "thoughts": "The previous code had an error in the regular expression and could be refactored for better readability. I\'ve corrected the regex and simplified the code to directly pass the validation result to the dependent callback.",\n  "error": {},\n  "response": {\n    "eventListener": "function main(event, args) {\\n  const email = event.target.value;\\n  args.callbackIndependent0();\\n  const isValid = fnValidateEmail(email);\\n  args.validEmail(isValid, email);\\n}",\n    "globals": {},\n    "imports": [],\n    "helperFunctions": [\n      "function fnValidateEmail(email) {\\n  const re = /^[\\\\w.-]+@[\\\\w-]+\\\\.[\\\\w-]{2,4}$/;\\n  return re.test(email);\\n}"\n    ]\n  },\n  "expect": "The args object must contain callbackIndependent0 (function) and validEmail (function with 2 parameters: a boolean and the email address)."\n}\n```',
          },
        ],
      },
      {
        role: "user",
        parts: [
          {
            text: '```json\n{\n "prompt":"Update a state variable with the length of the input text"\n"type":"text",        \n"filename":"characterCountInput",\n        "listener":"onChange",\n        "mutation":[\n          {\n            "id": "updateCharCount",\n            "returnFormat": 0,\n            "mutate": "setCharCount",\n            "mutationType": "callback",\n          },\n        ]\n}\n```',
          },
        ],
      },
      {
        role: "model",
        parts: [
          {
            text: '```json\n{\n  "thoughts": "I will generate a function that updates a state variable with the length of the input text on change event, and use the mutation to update the charCount.",\n  "error": {},\n  "response": {\n    "eventListener": "function main(event, args) {\\n  const textLength = event.target.value.length;\\n  args.updateCharCount(textLength);\\n}",\n    "globals": {},\n    "imports": []\n  },\n  "expect": "The args object must contain an updateCharCount function."\n}\n```',
          },
        ],
      },
      {
        role: "user",
        parts: [
          {
            text: '**Some improvements to make when generating logic for AIInput**\n\n- Never use assumable IDs or classes to access the target. If a function wants to use the input element, pass event.currentTarget to it as an argument from main. Alternately, add your own IDs/classes with a filename- (from Input) prefix and use that to query it.\n\n- Often "expect" in output has expectation like "input element must have the id \'[THE_FILE_NAME]\'" This is not correct, You have to pass the target to a function which use it, or add you own classes, or use globals to store reference.\n\n- When you are asked to style the input, create decent styles. You need to improve your CSS.\n\n- When using any external library, don\'t forget to include an import statement in the imports array,\n\n**Output JSON problem to solve**\n\n- Strict JSON: Validate all JSON output for correctness. No hidden characters or extra whitespace in keys. \n- Double Quotes: All JSON keys must be enclosed in double quotes\n\n_response with Got it to confirm you will follow these instructions_',
          },
        ],
      },
      {
        role: "model",
        parts: [{ text: "Got it. I will follow these instructions.\n" }],
      },
    ],
  },
  form: {
    history: [
      {
        role: "user",
        parts: [{ text: "Hello" }],
      },
      {
        role: "model",
        parts: [
          {
            text: '```json\n{\n  "error": {\n    "message": "Invalid JSON input or incorrect input structure.",\n    "status": 400,\n    "details": "The provided input is not valid JSON or does not conform to the expected AIFormProps interface. Please refer to the documentation for the correct input format.",\n    "code": "INVALID_INPUT"\n  }\n}\n```',
          },
        ],
      },
      {
        role: "user",
        parts: [
          {
            text: '```json\n{\n "prompt":"a simple form with name, age and contact number fields",\n        "filename":"simpleForm",\n        "listener":"onSubmit",\n"element":"form"\n}\n```',
          },
        ],
      },
      {
        role: "model",
        parts: [
          {
            text: "```json\n{\n  \"thoughts\": \"The prompt requests a simple form with name, age, and contact number fields. The `filename` is set to `simpleForm` to allow the model to generate the styling using classes of `.simpleForm`. The `listener` is set to `onSubmit`\",\n  \"response\": {\n    \"eventListener\": \"function main(event, args) {\n      event.preventDefault();\n\n      const name = document.getElementById('simpleForm-name').value;\n      const age = document.getElementById('simpleForm-age').value;\n      const contactNumber = document.getElementById('simpleForm-contactNumber').value;\n\n      console.log('Name:', name);\n      console.log('Age:', age);\n      console.log('Contact Number:', contactNumber);\n    }\",\n    \"formBuilder\": \"function formBuilder(formElement) {\n      if (globals.isFormBuilded) return;\n\n      if (!(formElement instanceof HTMLFormElement)) {\n        console.warn('Invalid formElement provided. Expected an HTMLFormElement.');\n        return;\n      }\n      const createElement = (tag, options = {}) => {\n        const element = document.createElement(tag);\n        Object.assign(element, options);\n        return element;\n      };\n\n      const nameLabel = createElement('label', {\n        for: 'simpleForm-name',\n        textContent: 'Name:',\n        classList: ['simpleForm-label']\n      });\n      const nameInput = createElement('input', {\n        type: 'text',\n        id: 'simpleForm-name',\n        name: 'name',\n        classList: ['simpleForm-input']\n      });\n\n      const ageLabel = createElement('label', {\n        for: 'simpleForm-age',\n        textContent: 'Age:',\n        classList: ['simpleForm-label']\n      });\n      const ageInput = createElement('input', {\n        type: 'number',\n        id: 'simpleForm-age',\n        name: 'age',\n        classList: ['simpleForm-input']\n      });\n\n      const contactNumberLabel = createElement('label', {\n        for: 'simpleForm-contactNumber',\n        textContent: 'Contact Number:',\n        classList: ['simpleForm-label']\n      });\n      const contactNumberInput = createElement('input', {\n        type: 'tel',\n        id: 'simpleForm-contactNumber',\n        name: 'contactNumber',\n        classList: ['simpleForm-input']\n      });\n\n      formElement.appendChild(nameLabel);\n      formElement.appendChild(nameInput);\n      formElement.appendChild(ageLabel);\n      formElement.appendChild(ageInput);\n      formElement.appendChild(contactNumberLabel);\n      formElement.appendChild(contactNumberInput);\n\n      const submitButton = createElement('button', {\n        type: 'submit',\n        textContent: 'Submit',\n        classList: ['simpleForm-button']\n      });\n      formElement.appendChild(submitButton);\n      globals.isFormBuilded = true;\n    }\",\n    \"globals\": {\n      \"isFormBuilded\": false\n    },\n    \"CSS\": {\n      \"styles\": \".simpleForm-label {\\n  display: block;\\n  margin-bottom: 5px;\\n}\\n\\n.simpleForm-input {\\n  width: 100%;\\n  padding: 8px;\\n  margin-bottom: 10px;\\n  border: 1px solid #ccc;\\n  border-radius: 4px;\\n}\\n\\n.simpleForm-button {\\n  background-color: #4CAF50;\\n  color: white;\\n  padding: 10px 20px;\\n  border: none;\\n  border-radius: 4px;\\n  cursor: pointer;\\n}\\n\\n.simpleForm-button:hover {\\n  background-color: #3e8e41;\\n}\"\n    }\n  },\n  \"expect\": \"Ensure the HTML includes a `<form>` element with the class `simpleForm`. No external libraries are needed. All elements will be available in the provided `formElement`.\"\n}\n```",
          },
        ],
      },
      {
        role: "user",
        parts: [
          {
            text: "For the previous code and for every other form there are a few things to improve:\n- Inside the main function, use FormData instead of document to query the element.\n- Inside formBuilder function, the createElement should be a helper function, not a formBuilder local function\n- Always use htmlFor instead of for in createElement as for will not work for label\n- In the main, do not cache the formData to globals object until explicitly asked for it.",
          },
        ],
      },
      {
        role: "model",
        parts: [
          {
            text: "```json\n{\n  \"thoughts\": \"The prompt requests a simple form with name, age, and contact number fields. The `filename` is set to `simpleForm` to allow the model to generate the styling using classes of `.simpleForm`. The `listener` is set to `onSubmit`. I will use FormData instead of querying the element .I will also add a global createElement function and refactor the code.\",\n  \"response\": {\n    \"eventListener\": \"function main(event, args) {\n      event.preventDefault();\n\n      const formData = new FormData(event.currentTarget);\n      const data = {};\n      formData.forEach((value, key) => {\n        data[key] = value;\n      });\n\n      console.log('Form Data:', data);\n    }\",\n    \"formBuilder\": \"function formBuilder(formElement) {\n      if (globals.isFormBuilded) return;\n\n      if (!(formElement instanceof HTMLFormElement)) {\n        console.warn('Invalid formElement provided. Expected an HTMLFormElement.');\n        return;\n      }\n\n      const nameLabel = createElement('label', {\n        htmlFor: 'simpleForm-name',\n        textContent: 'Name:',\n        classList: ['simpleForm-label']\n      });\n      const nameInput = createElement('input', {\n        type: 'text',\n        id: 'simpleForm-name',\n        name: 'name',\n        classList: ['simpleForm-input']\n      });\n\n      const ageLabel = createElement('label', {\n        htmlFor: 'simpleForm-age',\n        textContent: 'Age:',\n        classList: ['simpleForm-label']\n      });\n      const ageInput = createElement('input', {\n        type: 'number',\n        id: 'simpleForm-age',\n        name: 'age',\n        classList: ['simpleForm-input']\n      });\n\n      const contactNumberLabel = createElement('label', {\n        htmlFor: 'simpleForm-contactNumber',\n        textContent: 'Contact Number:',\n        classList: ['simpleForm-label']\n      });\n      const contactNumberInput = createElement('input', {\n        type: 'tel',\n        id: 'simpleForm-contactNumber',\n        name: 'contactNumber',\n        classList: ['simpleForm-input']\n      });\n\n      formElement.appendChild(nameLabel);\n      formElement.appendChild(nameInput);\n      formElement.appendChild(ageLabel);\n      formElement.appendChild(ageInput);\n      formElement.appendChild(contactNumberLabel);\n      formElement.appendChild(contactNumberInput);\n\n      const submitButton = createElement('button', {\n        type: 'submit',\n        textContent: 'Submit',\n        classList: ['simpleForm-button']\n      });\n      formElement.appendChild(submitButton);\n\n      globals.isFormBuilded = true;\n    }\",\n    \"helperFunctions\": [\n      \"function createElement(tag, options) {\n  // Extract properties that need special handling\n  const { onClick, type, ...restOptions } = options || {};\n  \n  // For elements where type must be set during creation (like input)\n  const element = type && tag === 'input' \n    ? document.createElement(tag, { type }) \n    : document.createElement(tag);\n  \n  // Handle event listeners\n  if (onClick) {\n    element.onclick = onClick;\n  }\n  \n  // Safely assign remaining properties\n  for (const [key, value] of Object.entries(restOptions)) {\n    try {\n      element[key] = value;\n    } catch (error) {\n      console.warn(Could not set property '${key}' on ${tag} element:, error);\n    }\n  }\n  \n  return element;\n}\"\n    ],\n    \"globals\": {\n      \"isFormBuilded\": false\n    },\n    \"CSS\": {\n      \"styles\": \".simpleForm-label {\\n  display: block;\\n  margin-bottom: 5px;\\n}\\n\\n.simpleForm-input {\\n  width: 100%;\\n  padding: 8px;\\n  margin-bottom: 10px;\\n  border: 1px solid #ccc;\\n  border-radius: 4px;\\n}\\n\\n.simpleForm-button {\\n  background-color: #4CAF50;\\n  color: white;\\n  padding: 10px 20px;\\n  border: none;\\n  border-radius: 4px;\\n  cursor: pointer;\\n}\\n\\n.simpleForm-button:hover {\\n  background-color: #3e8e41;\\n}\"\n    }\n  },\n  \"expect\": \"Ensure the HTML includes a `<form>` element with the class `simpleForm`. No external libraries are needed. All elements will be available in the provided `formElement`.\"\n}\n```",
          },
        ],
      },
      {
        role: "user",
        parts: [
          {
            text: '```json\n{\n"prompt":"Create a job application form",\n  "filename":"jobApplicationForm",\n  "listener":"onSubmit",\n  "fieldDefinitions":{[\n    {\n      "id": "fullName",\n      "fieldDefination":\n        "Full name input field with placeholder \'Enter your full name\'",\n      "validate": "Required",\n    },\n    {\n      "id": "email",\n      "fieldDefination": "Email address with appropriate input type",\n      "validate": "Must be a valid email address and is required",\n    },\n    {\n      "id": "experience",\n      "fieldDefination":\n        "Years of experience as a dropdown with options ranging from 0 to 10+ years",\n      "validate": "Required",\n    },\n    {\n      "id": "coverletter",\n      "fieldDefination":\n        "Large textarea for cover letter with resizable property",\n      "styleHint": "Minimum height of 150px",\n    },\n  ]}\n  "styleHint":"Clean professional layout with subtle borders"\n}\n```',
          },
        ],
      },
      {
        role: "model",
        parts: [
          {
            text: "```json\n{\n  \"thoughts\": \"The prompt is to create a job application form with fullName, email, experience, and coverletter fields. The prompt specifies the use of placeholders, input types, dropdown options, textarea properties, and validation rules. A `createElement` function is added in `helperFunctions`.\",\n  \"response\": {\n    \"eventListener\": \"function main(event, args) {\\n  event.preventDefault();\\n\\n  const formData = new FormData(event.currentTarget);\\n\\n  // Basic validation before submission\\n  if (!formData.get('fullName') || !formData.get('email') || !formData.get('experience')) {\\n    alert('Please fill in all required fields.');\\n    return;\\n  }\\n\\n  console.log('Form Data:', Object.fromEntries(formData));\\n}\",\n    \"formBuilder\": \"function formBuilder(formElement) {\\n  if (globals.isFormBuilded) return;\\n\\n  if (!(formElement instanceof HTMLFormElement)) {\\n    console.warn('Invalid formElement provided. Expected an HTMLFormElement.');\\n    return;\\n  }\\n\\n  const fullNameLabel = createElement('label', {\\n    htmlFor: 'jobApplicationForm-fullName',\\n    textContent: 'Full Name:',\\n    classList: ['jobApplicationForm-label']\\n  });\\n  const fullNameInput = createElement('input', {\\n    type: 'text',\\n    id: 'jobApplicationForm-fullName',\\n    name: 'fullName',\\n    placeholder: 'Enter your full name',\\n    classList: ['jobApplicationForm-input'],\\n    required: true\\n  });\\n\\n  const emailLabel = createElement('label', {\\n    htmlFor: 'jobApplicationForm-email',\\n    textContent: 'Email Address:',\\n    classList: ['jobApplicationForm-label']\\n  });\\n  const emailInput = createElement('input', {\\n    type: 'email',\\n    id: 'jobApplicationForm-email',\\n    name: 'email',\\n    classList: ['jobApplicationForm-input'],\\n    required: true\\n  });\\n\\n  const experienceLabel = createElement('label', {\\n    htmlFor: 'jobApplicationForm-experience',\\n    textContent: 'Years of Experience:',\\n    classList: ['jobApplicationForm-label']\\n  });\\n  const experienceSelect = createElement('select', {\\n    id: 'jobApplicationForm-experience',\\n    name: 'experience',\\n    classList: ['jobApplicationForm-input'],\\n    required: true\\n  });\\n\\n  const experienceOptions = [\\n    '0 years',\\n    '1 year',\\n    '2 years',\\n    '3 years',\\n    '4 years',\\n    '5 years',\\n    '6 years',\\n    '7 years',\\n    '8 years',\\n    '9 years',\\n    '10+ years'\\n  ];\\n  experienceOptions.forEach(optionText => {\\n    const option = createElement('option', {\\n      value: optionText,\\n      textContent: optionText\\n    });\\n    experienceSelect.appendChild(option);\\n  });\\n\\n  const coverLetterLabel = createElement('label', {\\n    htmlFor: 'jobApplicationForm-coverletter',\\n    textContent: 'Cover Letter:',\\n    classList: ['jobApplicationForm-label']\\n  });\\n  const coverLetterTextarea = createElement('textarea', {\\n    id: 'jobApplicationForm-coverletter',\\n    name: 'coverletter',\\n    classList: ['jobApplicationForm-textarea'],\\n    style: 'min-height: 150px'\\n  });\\n\\n  const submitButton = createElement('button', {\\n    type: 'submit',\\n    textContent: 'Submit Application',\\n    classList: ['jobApplicationForm-button']\\n  });\\n\\n  formElement.appendChild(fullNameLabel);\\n  formElement.appendChild(fullNameInput);\\n  formElement.appendChild(emailLabel);\\n  formElement.appendChild(emailInput);\\n  formElement.appendChild(experienceLabel);\\n  formElement.appendChild(experienceSelect);\\n  formElement.appendChild(coverLetterLabel);\\n  formElement.appendChild(coverLetterTextarea);\\n  formElement.appendChild(submitButton);\\n  globals.isFormBuilded = true;\\n}\",\n    \"helperFunctions\": [\n      \"function createElement(tag, options = {}) {\\n  const element = document.createElement(tag);\\n  Object.assign(element, options);\\n  return element;\\n}\"\n    ],\n    \"globals\": {\n      \"isFormBuilded\": false\n    },\n    \"CSS\": {\n      \"styles\": \".jobApplicationForm-label {\\n  display: block;\\n  margin-bottom: 5px;\\n  font-weight: bold;\\n}\\n\\n.jobApplicationForm-input, .jobApplicationForm-textarea {\\n  width: 100%;\\n  padding: 10px;\\n  margin-bottom: 15px;\\n  border: 1px solid #ddd;\\n  border-radius: 5px;\\n  box-sizing: border-box;\\n}\\n\\n.jobApplicationForm-textarea {\\n  font-family: sans-serif; /* Ensure consistent font */\\n  resize: vertical;\\n}\\n\\n.jobApplicationForm-button {\\n  background-color: #007bff;\\n  color: white;\\n  padding: 12px 20px;\\n  border: none;\\n  border-radius: 5px;\\n  cursor: pointer;\\n  font-size: 16px;\\n}\\n\\n.jobApplicationForm-button:hover {\\n  background-color: #0056b3;\\n}\"\n    }\n  },\n  \"expect\": \"The code expects the multiStep data and fieldDefinitions to be passed in the args during the onInitialRender call. The CSS contains the styling for the registrationForm, progressBar, steps, buttons, and error messages. The navigation and progress update depend on the presence of DOM elements with specific class names.\"\n}\n```",
          },
        ],
      },
      {
        role: "user",
        parts: [
          {
            text: 'Some improvements that are required for the previous response and any other form are:\n- Do not use Alert to show error; use error at top, error below specific input, or toaster to show error.\n- Always add a title for the form based on its functionality, omit only if asked explicitly in the prompt\n- Always add some margin to the form to separate it from other elements. \n- Always change the Button state and text based on the submission state.\n- Always add a "Success" message at the top appropriate place in the form.',
          },
        ],
      },
      {
        role: "model",
        parts: [
          {
            text: "```json\n{\n  \"thoughts\": \"The prompt is to create a job application form with fullName, email, experience, and coverletter fields. The prompt specifies the use of placeholders, input types, dropdown options, textarea properties, and validation rules. A `createElement` function is added in `helperFunctions`. I will now add a title to the form, a success message placeholder, margin for the form, change the button state and text based on the submission state, show error at top, and also show error below specific input if validation fails\",\n  \"response\": {\n    \"eventListener\": \"function main(event, args) {\\n  event.preventDefault();\\n\\n  setStatus('', ''); // Clear any previous status\\n  toggleButtonState(true, 'Submitting...');\\n\\n  const formData = new FormData(event.currentTarget);\\n\\n  // Basic validation before submission\\n  let isValid = true;\\n  if (!formData.get('fullName')) {\\n    isValid = false;\\n    setStatus('Please enter your full name.', 'error');\\n  }\\n  if (!formData.get('email')) {\\n    isValid = false;\\n    setStatus('Please enter your email address.', 'error');\\n  }\\n  if (!formData.get('experience')) {\\n    isValid = false;\\n    setStatus('Please select your experience.', 'error');\\n  }\\n\\n  if (!isValid) {\\n    toggleButtonState(false, 'Submit Application');\\n    return;\\n  }\\n\\n  // Simulate submission\\n  setTimeout(() => {\\n    console.log('Form Data:', Object.fromEntries(formData));\\n    setStatus('Application submitted successfully!', 'success');\\n    toggleButtonState(false, 'Submit Application');\\n  }, 1500); // Simulate network delay\\n}\",\n    \"formBuilder\": \"function formBuilder(formElement) {\\n  if (globals.isFormBuilded) return;\\n\\n  if (!(formElement instanceof HTMLFormElement)) {\\n    console.warn('Invalid formElement provided. Expected an HTMLFormElement.');\\n    return;\\n  }\\n\\n  //Form title\\n  const title = createElement('h1', {\\n    textContent: 'Job Application Form',\\n    classList: ['jobApplicationForm-title']\\n  });\\n\\n  // Status message container\\n  const statusDiv = createElement('div', {\\n    id: 'formStatus',\\n    classList: ['jobApplicationForm-status']\\n  });\\n\\n  const fullNameLabel = createElement('label', {\\n    htmlFor: 'jobApplicationForm-fullName',\\n    textContent: 'Full Name:',\\n    classList: ['jobApplicationForm-label']\\n  });\\n  const fullNameInput = createElement('input', {\\n    type: 'text',\\n    id: 'jobApplicationForm-fullName',\\n    name: 'fullName',\\n    placeholder: 'Enter your full name',\\n    classList: ['jobApplicationForm-input'],\\n    required: true\\n  });\\n\\n  const emailLabel = createElement('label', {\\n    htmlFor: 'jobApplicationForm-email',\\n    textContent: 'Email Address:',\\n    classList: ['jobApplicationForm-label']\\n  });\\n  const emailInput = createElement('input', {\\n    type: 'email',\\n    id: 'jobApplicationForm-email',\\n    name: 'email',\\n    classList: ['jobApplicationForm-input'],\\n    required: true\\n  });\\n\\n  const experienceLabel = createElement('label', {\\n    htmlFor: 'jobApplicationForm-experience',\\n    textContent: 'Years of Experience:',\\n    classList: ['jobApplicationForm-label']\\n  });\\n  const experienceSelect = createElement('select', {\\n    id: 'jobApplicationForm-experience',\\n    name: 'experience',\\n    classList: ['jobApplicationForm-input'],\\n    required: true\\n  });\\n\\n  const experienceOptions = [\\n    '0 years',\\n    '1 year',\\n    '2 years',\\n    '3 years',\\n    '4 years',\\n    '5 years',\\n    '6 years',\\n    '7 years',\\n    '8 years',\\n    '9 years',\\n    '10+ years'\\n  ];\\n  experienceOptions.forEach(optionText => {\\n    const option = createElement('option', {\\n      value: optionText,\\n      textContent: optionText\\n    });\\n    experienceSelect.appendChild(option);\\n  });\\n\\n  const coverLetterLabel = createElement('label', {\\n    htmlFor: 'jobApplicationForm-coverletter',\\n    textContent: 'Cover Letter:',\\n    classList: ['jobApplicationForm-label']\\n  });\\n  const coverLetterTextarea = createElement('textarea', {\\n    id: 'jobApplicationForm-coverletter',\\n    name: 'coverletter',\\n    classList: ['jobApplicationForm-textarea'],\\n    style: 'min-height: 150px'\\n  });\\n\\n  globals.submitButton = createElement('button', {\\n    type: 'submit',\\n    textContent: 'Submit Application',\\n    classList: ['jobApplicationForm-button']\\n  });\\n\\n  formElement.appendChild(title);\\n  formElement.appendChild(statusDiv);\\n  formElement.appendChild(fullNameLabel);\\n  formElement.appendChild(fullNameInput);\\n  formElement.appendChild(emailLabel);\\n  formElement.appendChild(emailInput);\\n  formElement.appendChild(experienceLabel);\\n  formElement.appendChild(experienceSelect);\\n  formElement.appendChild(coverLetterLabel);\\n  formElement.appendChild(coverLetterTextarea);\\n  formElement.appendChild(globals.submitButton);\\n\\n  globals.isFormBuilded = true;\\n}\",\n    \"helperFunctions\": [\n      \"function createElement(tag, options) {\\n  const element = document.createElement(tag);\\n  Object.assign(element, options);\\n  return element;\\n}\",\n      \"function setStatus(message, type) {\\n  const statusDiv = document.getElementById('formStatus');\\n  statusDiv.textContent = message;\\n  statusDiv.className = 'jobApplicationForm-status ' + type;\\n}\",\n      \"function toggleButtonState(disabled, text) {\\n  globals.submitButton.disabled = disabled;\\n  globals.submitButton.textContent = text;\\n}\"\n    ],\n    \"globals\": {\n      \"isFormBuilded\": false,\n      \"submitButton\": null\n    },\n    \"CSS\": {\n      \"styles\": \".jobApplicationForm {\\n  margin: 20px;\\n}\\n\\n.jobApplicationForm-title {\\n  text-align: center;\\n  margin-bottom: 20px;\\n}\\n\\n.jobApplicationForm-label {\\n  display: block;\\n  margin-bottom: 5px;\\n  font-weight: bold;\\n}\\n\\n.jobApplicationForm-input, .jobApplicationForm-textarea {\\n  width: 100%;\\n  padding: 10px;\\n  margin-bottom: 15px;\\n  border: 1px solid #ddd;\\n  border-radius: 5px;\\n  box-sizing: border-box;\\n}\\n\\n.jobApplicationForm-textarea {\\n  font-family: sans-serif; /* Ensure consistent font */\\n  resize: vertical;\\n}\\n\\n.jobApplicationForm-button {\\n  background-color: #007bff;\\n  color: white;\\n  padding: 12px 20px;\\n  border: none;\\n  border-radius: 5px;\\n  cursor: pointer;\\n  font-size: 16px;\\n}\\n\\n.jobApplicationForm-button:hover {\\n  background-color: #0056b3;\\n}\\n\\n.jobApplicationForm-status {\\n  margin-bottom: 15px;\\n  padding: 10px;\\n  border-radius: 5px;\\n  font-weight: bold;\\n  text-align: center;\\n}\\n\\n.jobApplicationForm-status.error {\\n  background-color: #f8d7da;\\n  color: #721c24;\\n  border: 1px solid #f5c6cb;\\n}\\n\\n.jobApplicationForm-status.success {\\n  background-color: #d4edda;\\n  color: #155724;\\n  border: 1px solid #c3e6cb;\\n}\"\n    }\n  },\n  \"expect\": \"The code expects the multiStep data and fieldDefinitions to be passed in the args during the onInitialRender call. The CSS contains the styling for the registrationForm, progressBar, steps, buttons, and error messages. The navigation and progress update depend on the presence of DOM elements with specific class names.\"\n}\n```",
          },
        ],
      },
      {
        role: "user",
        parts: [
          {
            text: '```json\n{\n"prompt":"Create a restaurant feedback form with the following fields: customer name, visit date, meal type (breakfast, lunch, dinner), food quality rating (1-5), service rating (1-5), ambiance rating (1-5), and additional comments",\n        "filename":"restaurantFeedbackForm",\n        "listener":"onSubmit",\n        "layout":"two-column",\n        "attributes":{{\n          "id": "restaurant-feedback",\n          "autoComplete": "off",\n          "noValidate": true,\n        }},\n        "styleHint":"Elegant design"\n}\n```',
          },
        ],
      },
      {
        role: "model",
        parts: [
          {
            text: "```json\n{\n  \"thoughts\": \"The prompt requests a restaurant feedback form with customer name, visit date, meal type, food quality rating, service rating, ambiance rating, and additional comments. The `filename` is set to `restaurantFeedbackForm`, the `listener` is `onSubmit`, the `layout` is `two-column`, attributes and `styleHint` are also provided.\",\n  \"response\": {\n    \"eventListener\": \"function main(event, args) {\\n  event.preventDefault();\\n\\n  setStatus('', ''); // Clear previous status\\n  toggleButtonState(true, 'Submitting...');\\n\\n  const formData = new FormData(event.currentTarget);\\n  const data = Object.fromEntries(formData.entries());\\n\\n  console.log('Form Data:', data);\\n\\n  // Simulate submission\\n  setTimeout(() => {\\n    setStatus('Thank you for your feedback!', 'success');\\n    toggleButtonState(false, 'Submit Feedback');\\n  }, 1500);\\n}\",\n    \"formBuilder\": \"function formBuilder(formElement) {\\n  if (globals.isFormBuilded) return;\\n\\n  if (!(formElement instanceof HTMLFormElement)) {\\n    console.warn('Invalid formElement provided. Expected an HTMLFormElement.');\\n    return;\\n  }\\n  const title = createElement('h1', {\\n    textContent: 'Restaurant Feedback Form',\\n    classList: ['restaurantFeedbackForm-title']\\n  });\\n\\n  const statusDiv = createElement('div', {\\n    id: 'formStatus',\\n    classList: ['restaurantFeedbackForm-status']\\n  });\\n\\n  const nameLabel = createElement('label', {\\n    htmlFor: 'restaurantFeedbackForm-customerName',\\n    textContent: 'Customer Name:',\\n    classList: ['restaurantFeedbackForm-label']\\n  });\\n  const nameInput = createElement('input', {\\n    type: 'text',\\n    id: 'restaurantFeedbackForm-customerName',\\n    name: 'customerName',\\n    classList: ['restaurantFeedbackForm-input']\\n  });\\n\\n  const dateLabel = createElement('label', {\\n    htmlFor: 'restaurantFeedbackForm-visitDate',\\n    textContent: 'Visit Date:',\\n    classList: ['restaurantFeedbackForm-label']\\n  });\\n  const dateInput = createElement('input', {\\n    type: 'date',\\n    id: 'restaurantFeedbackForm-visitDate',\\n    name: 'visitDate',\\n    classList: ['restaurantFeedbackForm-input']\\n  });\\n\\n  const mealTypeLabel = createElement('label', {\\n    htmlFor: 'restaurantFeedbackForm-mealType',\\n    textContent: 'Meal Type:',\\n    classList: ['restaurantFeedbackForm-label']\\n  });\\n  const mealTypeSelect = createElement('select', {\\n    id: 'restaurantFeedbackForm-mealType',\\n    name: 'mealType',\\n    classList: ['restaurantFeedbackForm-input']\\n  });\\n  ['Breakfast', 'Lunch', 'Dinner'].forEach(optionText => {\\n    const option = createElement('option', {\\n      value: optionText,\\n      textContent: optionText\\n    });\\n    mealTypeSelect.appendChild(option);\\n  });\\n\\n  const foodQualityLabel = createElement('label', {\\n    htmlFor: 'restaurantFeedbackForm-foodQuality',\\n    textContent: 'Food Quality Rating (1-5):',\\n    classList: ['restaurantFeedbackForm-label']\\n  });\\n  const foodQualitySelect = createElement('select', {\\n    id: 'restaurantFeedbackForm-foodQuality',\\n    name: 'foodQuality',\\n    classList: ['restaurantFeedbackForm-input']\\n  });\\n  for (let i = 1; i <= 5; i++) {\\n    const option = createElement('option', {\\n      value: i,\\n      textContent: i\\n    });\\n    foodQualitySelect.appendChild(option);\\n  }\\n\\n  const serviceLabel = createElement('label', {\\n    htmlFor: 'restaurantFeedbackForm-serviceRating',\\n    textContent: 'Service Rating (1-5):',\\n    classList: ['restaurantFeedbackForm-label']\\n  });\\n  const serviceSelect = createElement('select', {\\n    id: 'restaurantFeedbackForm-serviceRating',\\n    name: 'serviceRating',\\n    classList: ['restaurantFeedbackForm-input']\\n  });\\n  for (let i = 1; i <= 5; i++) {\\n    const option = createElement('option', {\\n      value: i,\\n      textContent: i\\n    });\\n    serviceSelect.appendChild(option);\\n  }\\n\\n  const ambianceLabel = createElement('label', {\\n    htmlFor: 'restaurantFeedbackForm-ambianceRating',\\n    textContent: 'Ambiance Rating (1-5):',\\n    classList: ['restaurantFeedbackForm-label']\\n  });\\n  const ambianceSelect = createElement('select', {\\n    id: 'restaurantFeedbackForm-ambianceRating',\\n    name: 'ambianceRating',\\n    classList: ['restaurantFeedbackForm-input']\\n  });\\n  for (let i = 1; i <= 5; i++) {\\n    const option = createElement('option', {\\n      value: i,\\n      textContent: i\\n    });\\n    ambianceSelect.appendChild(option);\\n  }\\n\\n  const commentsLabel = createElement('label', {\\n    htmlFor: 'restaurantFeedbackForm-additionalComments',\\n    textContent: 'Additional Comments:',\\n    classList: ['restaurantFeedbackForm-label']\\n  });\\n  const commentsTextarea = createElement('textarea', {\\n    id: 'restaurantFeedbackForm-additionalComments',\\n    name: 'additionalComments',\\n    classList: ['restaurantFeedbackForm-textarea']\\n  });\\n\\n  globals.submitButton = createElement('button', {\\n    type: 'submit',\\n    textContent: 'Submit Feedback',\\n    classList: ['restaurantFeedbackForm-button']\\n  });\\n\\n  // Create rows and append elements\\n  const row1 = createElement('div', { classList: ['restaurantFeedbackForm-row'] });\\n  row1.appendChild(createElement('div', { classList: ['restaurantFeedbackForm-column'] })).appendChild(nameLabel);\\n  row1.appendChild(createElement('div', { classList: ['restaurantFeedbackForm-column'] })).appendChild(nameInput);\\n  row1.appendChild(createElement('div', { classList: ['restaurantFeedbackForm-column'] })).appendChild(dateLabel);\\n  row1.appendChild(createElement('div', { classList: ['restaurantFeedbackForm-column'] })).appendChild(dateInput);\\n\\n  const row2 = createElement('div', { classList: ['restaurantFeedbackForm-row'] });\\n  row2.appendChild(createElement('div', { classList: ['restaurantFeedbackForm-column'] })).appendChild(mealTypeLabel);\\n  row2.appendChild(createElement('div', { classList: ['restaurantFeedbackForm-column'] })).appendChild(mealTypeSelect);\\n  row2.appendChild(createElement('div', { classList: ['restaurantFeedbackForm-column'] })).appendChild(foodQualityLabel);\\n  row2.appendChild(createElement('div', { classList: ['restaurantFeedbackForm-column'] })).appendChild(foodQualitySelect);\\n\\n  const row3 = createElement('div', { classList: ['restaurantFeedbackForm-row'] });\\n   row3.appendChild(createElement('div', { classList: ['restaurantFeedbackForm-column'] })).appendChild(serviceLabel);\\n  row3.appendChild(createElement('div', { classList: ['restaurantFeedbackForm-column'] })).appendChild(serviceSelect);\\n   row3.appendChild(createElement('div', { classList: ['restaurantFeedbackForm-column'] })).appendChild(ambianceLabel);\\n  row3.appendChild(createElement('div', { classList: ['restaurantFeedbackForm-column'] })).appendChild(ambianceSelect);\\n\\n  formElement.appendChild(title);\\n  formElement.appendChild(statusDiv);\\n  formElement.appendChild(row1);\\n  formElement.appendChild(row2);\\n  formElement.appendChild(row3);\\n  formElement.appendChild(commentsLabel);\\n  formElement.appendChild(commentsTextarea);\\n  formElement.appendChild(globals.submitButton);\\n\\n  globals.isFormBuilded = true;\\n}\",\n    \"helperFunctions\": [\n      \"function createElement(tag, options = {}) {\\n  const element = document.createElement(tag);\\n  Object.assign(element, options);\\n  return element;\\n}\",\n      \"function setStatus(message, type) {\\n  const statusDiv = document.getElementById('formStatus');\\n  statusDiv.textContent = message;\\n  statusDiv.className = 'restaurantFeedbackForm-status ' + type;\\n}\",\n      \"function toggleButtonState(disabled, text) {\\n  globals.submitButton.disabled = disabled;\\n  globals.submitButton.textContent = text;\\n}\"\n    ],\n    \"globals\": {\n      \"isFormBuilded\": false,\n      \"submitButton\": null\n    },\n    \"CSS\": {\n      \"styles\": \".restaurantFeedbackForm {\\n  margin: 20px;\\n  padding: 20px;\\n  border: 1px solid #ddd;\\n  border-radius: 5px;\\n}\\n\\n.restaurantFeedbackForm-title {\\n  text-align: center;\\n  margin-bottom: 20px;\\n  color: #333;\\n}\\n\\n.restaurantFeedbackForm-label {\\n  display: block;\\n  margin-bottom: 5px;\\n  font-weight: bold;\\n  color: #555;\\n}\\n\\n.restaurantFeedbackForm-input, .restaurantFeedbackForm-textarea, .restaurantFeedbackForm-select {\\n  width: 100%;\\n  padding: 10px;\\n  margin-bottom: 15px;\\n  border: 1px solid #ddd;\\n  border-radius: 5px;\\n  box-sizing: border-box;\\n  font-size: 1em;\\n  color: #333;\\n}\\n\\n.restaurantFeedbackForm-textarea {\\n  font-family: sans-serif;\\n  resize: vertical;\\n}\\n\\n.restaurantFeedbackForm-button {\\n  background-color: #5cb85c;\\n  color: white;\\n  padding: 12px 20px;\\n  border: none;\\n  border-radius: 5px;\\n  cursor: pointer;\\n  font-size: 16px;\\n}\\n\\n.restaurantFeedbackForm-button:hover {\\n  background-color: #4cae4c;\\n}\\n\\n.restaurantFeedbackForm-status {\\n  margin-bottom: 15px;\\n  padding: 10px;\\n  border-radius: 5px;\\n  font-weight: bold;\\n  text-align: center;\\n}\\n\\n.restaurantFeedbackForm-status.error {\\n  background-color: #f8d7da;\\n  color: #721c24;\\n  border: 1px solid #f5c6cb;\\n}\\n\\n.restaurantFeedbackForm-status.success {\\n  background-color: #d4edda;\\n  color: #155724;\\n  border: 1px solid #c3e6cb;\\n}\\n\\n.restaurantFeedbackForm-row {\\n  display: flex;\\n  flex-wrap: wrap;\\n  margin-bottom: 15px;\\n}\\n\\n.restaurantFeedbackForm-column {\\n  width: 50%;\\n  padding-right: 10px;\\n  box-sizing: border-box;\\n}\\n\\n/* Ensure proper spacing for labels and inputs in each column */\\n.restaurantFeedbackForm-column > label, .restaurantFeedbackForm-column > input, .restaurantFeedbackForm-column > select {\\n  display: block;\\n  width: 100%;\\n  margin-bottom: 5px;\\n}\"\n    }\n  },\n  \"expect\": \"The code expects the multiStep data and fieldDefinitions to be passed in the args during the onInitialRender call. The CSS contains the styling for the registrationForm, progressBar, steps, buttons, and error messages. The navigation and progress update depend on the presence of DOM elements with specific class names.\"\n}\n```",
          },
        ],
      },
      {
        role: "user",
        parts: [
          {
            text: 'Some improvements to made for the previous form as well as for any others are:\n\n- No success message is displayed.\n- The Form title is light and has no proper styling\n- Some fields are assumably required even if the prompt didn\'t mention it, like the customer name in the previous prompt, but still, the generated code didn\'t make them required. If you are not sure which inputs are assumed to be require just omit the require and let user decide it.\n-  Overall, the CSS is not very impressive for any form; it can be improved.\n- The CSS should not use any dummy URL; use the URL only provided by the user in the prompt.\n- The expect property is completely wrong. It expects "multisteps" and "fieldDefinitions" but they are not even provided in the user prompt, which means they are not to be used, Additionally, there is no progress bar in the form still the expect mentioned it. The last sentence is also vague. Why expecting the user to add something if they didn\'t even mentioned it in the prompt?',
          },
        ],
      },
      {
        role: "model",
        parts: [
          {
            text: "```json\n{\n  \"thoughts\": \"The prompt requests a restaurant feedback form with customer name, visit date, meal type, food quality rating, service rating, ambiance rating, and additional comments. The `filename` is set to `restaurantFeedbackForm`, the `listener` is `onSubmit`, the `layout` is `two-column`, attributes and `styleHint` are also provided. I will now improve the CSS, add more stylish title. The code will now show a success message to the user.\",\n  \"response\": {\n    \"eventListener\": \"function main(event, args) {\\n  event.preventDefault();\\n\\n  setStatus('', ''); // Clear previous status\\n  toggleButtonState(true, 'Submitting...');\\n\\n  const formData = new FormData(event.currentTarget);\\n  const data = Object.fromEntries(formData.entries());\\n\\n  console.log('Form Data:', data);\\n\\n  // Simulate submission\\n  setTimeout(() => {\\n    setStatus('Thank you for your feedback!', 'success');\\n    toggleButtonState(false, 'Submit Feedback');\\n  }, 1500);\\n}\",\n    \"formBuilder\": \"function formBuilder(formElement) {\\n  if (globals.isFormBuilded) return;\\n\\n  if (!(formElement instanceof HTMLFormElement)) {\\n    console.warn('Invalid formElement provided. Expected an HTMLFormElement.');\\n    return;\\n  }\\n  const title = createElement('h1', {\\n    textContent: 'Restaurant Feedback Form',\\n    classList: ['restaurantFeedbackForm-title']\\n  });\\n\\n  const statusDiv = createElement('div', {\\n    id: 'restaurantFeedbackForm-formStatus',\\n    classList: ['restaurantFeedbackForm-status']\\n  });\\n\\n  const nameLabel = createElement('label', {\\n    htmlFor: 'restaurantFeedbackForm-customerName',\\n    textContent: 'Customer Name:',\\n    classList: ['restaurantFeedbackForm-label']\\n  });\\n  const nameInput = createElement('input', {\\n    type: 'text',\\n    id: 'restaurantFeedbackForm-customerName',\\n    name: 'customerName',\\n    classList: ['restaurantFeedbackForm-input']\\n  });\\n\\n  const dateLabel = createElement('label', {\\n    htmlFor: 'restaurantFeedbackForm-visitDate',\\n    textContent: 'Visit Date:',\\n    classList: ['restaurantFeedbackForm-label']\\n  });\\n  const dateInput = createElement('input', {\\n    type: 'date',\\n    id: 'restaurantFeedbackForm-visitDate',\\n    name: 'visitDate',\\n    classList: ['restaurantFeedbackForm-input']\\n  });\\n\\n  const mealTypeLabel = createElement('label', {\\n    htmlFor: 'restaurantFeedbackForm-mealType',\\n    textContent: 'Meal Type:',\\n    classList: ['restaurantFeedbackForm-label']\\n  });\\n  const mealTypeSelect = createElement('select', {\\n    id: 'restaurantFeedbackForm-mealType',\\n    name: 'mealType',\\n    classList: ['restaurantFeedbackForm-input']\\n  });\\n  ['Breakfast', 'Lunch', 'Dinner'].forEach(optionText => {\\n    const option = createElement('option', {\\n      value: optionText,\\n      textContent: optionText\\n    });\\n    mealTypeSelect.appendChild(option);\\n  });\\n\\n  const foodQualityLabel = createElement('label', {\\n    htmlFor: 'restaurantFeedbackForm-foodQuality',\\n    textContent: 'Food Quality Rating (1-5):',\\n    classList: ['restaurantFeedbackForm-label']\\n  });\\n  const foodQualitySelect = createElement('select', {\\n    id: 'restaurantFeedbackForm-foodQuality',\\n    name: 'foodQuality',\\n    classList: ['restaurantFeedbackForm-input']\\n  });\\n  for (let i = 1; i <= 5; i++) {\\n    const option = createElement('option', {\\n      value: i,\\n      textContent: i\\n    });\\n    foodQualitySelect.appendChild(option);\\n  }\\n\\n  const serviceLabel = createElement('label', {\\n    htmlFor: 'restaurantFeedbackForm-serviceRating',\\n    textContent: 'Service Rating (1-5):',\\n    classList: ['restaurantFeedbackForm-label']\\n  });\\n  const serviceSelect = createElement('select', {\\n    id: 'restaurantFeedbackForm-serviceRating',\\n    name: 'serviceRating',\\n    classList: ['restaurantFeedbackForm-input']\\n  });\\n  for (let i = 1; i <= 5; i++) {\\n    const option = createElement('option', {\\n      value: i,\\n      textContent: i\\n    });\\n    serviceSelect.appendChild(option);\\n  }\\n\\n  const ambianceLabel = createElement('label', {\\n    htmlFor: 'restaurantFeedbackForm-ambianceRating',\\n    textContent: 'Ambiance Rating (1-5):',\\n    classList: ['restaurantFeedbackForm-label']\\n  });\\n  const ambianceSelect = createElement('select', {\\n    id: 'restaurantFeedbackForm-ambianceRating',\\n    name: 'ambianceRating',\\n    classList: ['restaurantFeedbackForm-input']\\n  });\\n  for (let i = 1; i <= 5; i++) {\\n    const option = createElement('option', {\\n      value: i,\\n      textContent: i\\n    });\\n    ambianceSelect.appendChild(option);\\n  }\\n\\n  const commentsLabel = createElement('label', {\\n    htmlFor: 'restaurantFeedbackForm-additionalComments',\\n    textContent: 'Additional Comments:',\\n    classList: ['restaurantFeedbackForm-label']\\n  });\\n  const commentsTextarea = createElement('textarea', {\\n    id: 'restaurantFeedbackForm-additionalComments',\\n    name: 'additionalComments',\\n    classList: ['restaurantFeedbackForm-textarea']\\n  });\\n\\n  globals.submitButton = createElement('button', {\\n    type: 'submit',\\n    textContent: 'Submit Feedback',\\n    classList: ['restaurantFeedbackForm-button']\\n  });\\n\\n  // Create rows and append elements\\n  const row1 = createElement('div', { classList: ['restaurantFeedbackForm-row'] });\\n  row1.appendChild(createElement('div', { classList: ['restaurantFeedbackForm-column'] })).appendChild(nameLabel);\\n  row1.appendChild(createElement('div', { classList: ['restaurantFeedbackForm-column'] })).appendChild(nameInput);\\n  row1.appendChild(createElement('div', { classList: ['restaurantFeedbackForm-column'] })).appendChild(dateLabel);\\n  row1.appendChild(createElement('div', { classList: ['restaurantFeedbackForm-column'] })).appendChild(dateInput);\\n\\n  const row2 = createElement('div', { classList: ['restaurantFeedbackForm-row'] });\\n  row2.appendChild(createElement('div', { classList: ['restaurantFeedbackForm-column'] })).appendChild(mealTypeLabel);\\n  row2.appendChild(createElement('div', { classList: ['restaurantFeedbackForm-column'] })).appendChild(mealTypeSelect);\\n  row2.appendChild(createElement('div', { classList: ['restaurantFeedbackForm-column'] })).appendChild(foodQualityLabel);\\n  row2.appendChild(createElement('div', { classList: ['restaurantFeedbackForm-column'] })).appendChild(foodQualitySelect);\\n\\n  const row3 = createElement('div', { classList: ['restaurantFeedbackForm-row'] });\\n   row3.appendChild(createElement('div', { classList: ['restaurantFeedbackForm-column'] })).appendChild(serviceLabel);\\n  row3.appendChild(createElement('div', { classList: ['restaurantFeedbackForm-column'] })).appendChild(serviceSelect);\\n   row3.appendChild(createElement('div', { classList: ['restaurantFeedbackForm-column'] })).appendChild(ambianceLabel);\\n  row3.appendChild(createElement('div', { classList: ['restaurantFeedbackForm-column'] })).appendChild(ambianceSelect);\\n\\n  formElement.appendChild(title);\\n  formElement.appendChild(statusDiv);\\n  formElement.appendChild(row1);\\n  formElement.appendChild(row2);\\n  formElement.appendChild(row3);\\n  formElement.appendChild(commentsLabel);\\n  formElement.appendChild(commentsTextarea);\\n  formElement.appendChild(globals.submitButton);\\n\\n  globals.isFormBuilded = true;\\n}\",\n    \"helperFunctions\": [\n      \"function createElement(tag, options = {}) {\\n  const element = document.createElement(tag);\\n  Object.assign(element, options);\\n  return element;\\n}\",\n      \"function setStatus(message, type) {\\n  const statusDiv = document.getElementById('restaurantFeedbackForm-formStatus');\\n  statusDiv.textContent = message;\\n  statusDiv.className = 'restaurantFeedbackForm-status ' + type;\\n}\",\n      \"function toggleButtonState(disabled, text) {\\n  globals.submitButton.disabled = disabled;\\n  globals.submitButton.textContent = text;\\n}\"\n    ],\n    \"globals\": {\n      \"isFormBuilded\": false,\n      \"submitButton\": null\n    },\n    \"CSS\": {\n      \"styles\": \".restaurantFeedbackForm {\\n  margin: 20px;\\n  padding: 30px;\\n  border: 1px solid #e0e0e0;\\n  border-radius: 10px;\\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\\n  font-family: 'Arial', sans-serif;\\n  color: #333;\\n}\\n\\n.restaurantFeedbackForm-title {\\n  text-align: center;\\n  margin-bottom: 30px;\\n  color: #e44d26; /* A warm, inviting color */\\n  font-size: 2.2em;\\n  font-weight: 700;\\n  letter-spacing: 1px;\\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\\n}\\n\\n.restaurantFeedbackForm-label {\\n  display: block;\\n  margin-bottom: 8px;\\n  font-weight: 600;\\n  color: #555;\\n}\\n\\n.restaurantFeedbackForm-input, .restaurantFeedbackForm-textarea, .restaurantFeedbackForm-select {\\n  width: 100%;\\n  padding: 12px;\\n  margin-bottom: 20px;\\n  border: 1px solid #ddd;\\n  border-radius: 6px;\\n  box-sizing: border-box;\\n  font-size: 1em;\\n  color: #444;\\n  transition: border-color 0.3s ease;\\n}\\n\\n.restaurantFeedbackForm-input:focus, .restaurantFeedbackForm-textarea:focus, .restaurantFeedbackForm-select:focus {\\n  border-color: #e44d26; /* Highlight on focus */\\n  outline: none;\\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.08);\\n}\\n\\n.restaurantFeedbackForm-textarea {\\n  font-family: 'Arial', sans-serif;\\n  resize: vertical;\\n  min-height: 120px;\\n}\\n\\n.restaurantFeedbackForm-button {\\n  background-color: #e44d26;\\n  color: white;\\n  padding: 14px 24px;\\n  border: none;\\n  border-radius: 6px;\\n  cursor: pointer;\\n  font-size: 1.1em;\\n  font-weight: 600;\\n  transition: background-color 0.3s ease;\\n}\\n\\n.restaurantFeedbackForm-button:hover {\\n  background-color: #d13b18; /* Darken on hover */\\n}\\n\\n.restaurantFeedbackForm-status {\\n  margin-bottom: 20px;\\n  padding: 12px;\\n  border-radius: 6px;\\n  font-weight: 600;\\n  text-align: center;\\n}\\n\\n.restaurantFeedbackForm-status.error {\\n  background-color: #f8d7da;\\n  color: #721c24;\\n  border: 1px solid #f5c6cb;\\n}\\n\\n.restaurantFeedbackForm-status.success {\\n  background-color: #d4edda;\\n  color: #155724;\\n  border: 1px solid #c3e6cb;\\n}\\n\\n.restaurantFeedbackForm-row {\\n  display: flex;\\n  flex-wrap: wrap;\\n  margin-bottom: 15px;\\n}\\n\\n.restaurantFeedbackForm-column {\\n  width: 50%;\\n  padding-right: 15px;\\n  padding-left: 15px;\\n  box-sizing: border-box;\\n}\\n\\n/* Responsive adjustments for smaller screens */\\n@media (max-width: 768px) {\\n  .restaurantFeedbackForm-column {\\n    width: 100%; /* Stack columns on smaller screens */\\n    padding-right: 0;\\n    padding-left: 0;\\n  }\\n}\\n\"\n    }\n  },\n  \"expect\": \"Ensure the HTML includes a `<form>` element with the class `restaurantFeedbackForm`. The generated JavaScript code is designed to be used with an existing form element and will not create a new form element itself. The form should be placed where you want the registration form to appear on your webpage.\"\n}\n```",
          },
        ],
      },
      {
        role: "user",
        parts: [
          {
            text: '```json\n{\n "prompt":"Create a password change form with current password, new password, and confirm new password fields.",\n        "filename":"passwordChangeForm",\n        "listener":"onSubmit",\n        "fieldDefinitions":{[\n          {\n            "id": "currentPassword",\n            "fieldDefination": "Current password field with masked input",\n            "validate": "Required",\n          },\n          {\n            "id": "newPassword",\n            "fieldDefination":\n              "New password field with masked input and password strength indicator",\n            "validate":\n              "Required, must be at least 8 characters with one uppercase letter, one lowercase letter, one number, and one special character, and must not be the same as the current password"\n          },\n          {\n            "id": "confirmPassword",\n            "fieldDefination": "Confirm new password field with masked input",\n            "validate": "Required, must match exactly with @newPassword",\n          },\n        ]},\n        "validate":"Show validation errors in real-time as the user types",\n        "styleHint":"Use this color palette: FFA725, FFF5E4, C1D8C3 and 6A9C89"\n}\n```',
          },
        ],
      },
      {
        role: "model",
        parts: [
          {
            text: "```json\n{\n  \"thoughts\": \"The prompt requests a password change form with current password, new password, and confirm new password fields. The `filename` is set to `passwordChangeForm`, the `listener` is `onSubmit`. It also specifies the filed definitions, validation rules, and style hints with a color palette.\",\n  \"response\": {\n    \"eventListener\": \"function main(event, args) {\\n  event.preventDefault();\\n  setStatus('', '');\\n  toggleButtonState(true, 'Changing Password...');\\n\\n  const formData = new FormData(event.currentTarget);\\n  const currentPassword = formData.get('currentPassword');\\n  const newPassword = formData.get('newPassword');\\n  const confirmPassword = formData.get('confirmPassword');\\n\\n  // Client-side validation (you should also validate on the server)\\n  if (!currentPassword || !newPassword || !confirmPassword) {\\n    setStatus('Please fill in all fields.', 'error');\\n    toggleButtonState(false, 'Change Password');\\n    return;\\n  }\\n\\n  if (newPassword !== confirmPassword) {\\n    setStatus('New password and confirm password do not match.', 'error');\\n    toggleButtonState(false, 'Change Password');\\n    return;\\n  }\\n\\n  // Simulate password change\\n  setTimeout(() => {\\n    setStatus('Password changed successfully!', 'success');\\n    toggleButtonState(false, 'Change Password');\\n  }, 1500);\\n}\",\n    \"formBuilder\": \"function formBuilder(formElement) {\\n  if (globals.isFormBuilded) return;\\n\\n  if (!(formElement instanceof HTMLFormElement)) {\\n    console.warn('Invalid formElement provided. Expected an HTMLFormElement.');\\n    return;\\n  }\\n\\n  // Form Title\\n  const title = createElement('h1', {\\n    textContent: 'Change Password',\\n    classList: ['passwordChangeForm-title']\\n  });\\n\\n  // Status message container\\n  const statusDiv = createElement('div', {\\n    id: 'passwordChangeForm-formStatus',\\n    classList: ['passwordChangeForm-status']\\n  });\\n\\n  // Current Password\\n  const currentPasswordLabel = createElement('label', {\\n    htmlFor: 'passwordChangeForm-currentPassword',\\n    textContent: 'Current Password:',\\n    classList: ['passwordChangeForm-label']\\n  });\\n  const currentPasswordInput = createElement('input', {\\n    type: 'password',\\n    id: 'passwordChangeForm-currentPassword',\\n    name: 'currentPassword',\\n    classList: ['passwordChangeForm-input'],\\n    required: true\\n  });\\n  currentPasswordInput.addEventlistener('input', () => clearError(currentPasswordInput));\\n\\n  // New Password\\n  const newPasswordLabel = createElement('label', {\\n    htmlFor: 'passwordChangeForm-newPassword',\\n    textContent: 'New Password:',\\n    classList: ['passwordChangeForm-label']\\n  });\\n  const newPasswordInput = createElement('input', {\\n    type: 'password',\\n    id: 'passwordChangeForm-newPassword',\\n    name: 'newPassword',\\n    classList: ['passwordChangeForm-input'],\\n    required: true\\n  });\\n  newPasswordInput.addEventlistener('input', () => {\\n    validatePasswordStrength(newPasswordInput.value);\\n    clearError(newPasswordInput);\\n  });\\n\\n  // Confirm New Password\\n  const confirmPasswordLabel = createElement('label', {\\n    htmlFor: 'passwordChangeForm-confirmPassword',\\n    textContent: 'Confirm New Password:',\\n    classList: ['passwordChangeForm-label']\\n  });\\n  const confirmPasswordInput = createElement('input', {\\n    type: 'password',\\n    id: 'passwordChangeForm-confirmPassword',\\n    name: 'confirmPassword',\\n    classList: ['passwordChangeForm-input'],\\n    required: true\\n  });\\n  confirmPasswordInput.addEventlistener('input', () => {\\n    validateConfirmPassword(newPasswordInput.value, confirmPasswordInput.value);\\n    clearError(confirmPasswordInput);\\n  });\\n\\n  globals.submitButton = createElement('button', {\\n    type: 'submit',\\n    textContent: 'Change Password',\\n    classList: ['passwordChangeForm-button']\\n  });\\n\\n  formElement.appendChild(title);\\n  formElement.appendChild(statusDiv);\\n  formElement.appendChild(currentPasswordLabel);\\n  formElement.appendChild(currentPasswordInput);\\n  formElement.appendChild(newPasswordLabel);\\n  formElement.appendChild(newPasswordInput);\\n  formElement.appendChild(confirmPasswordLabel);\\n  formElement.appendChild(confirmPasswordInput);\\n  formElement.appendChild(globals.submitButton);\\n\\n  globals.isFormBuilded = true;\\n}\",\n    \"helperFunctions\": [\n      \"function createElement(tag, options) {\\n  const element = document.createElement(tag);\\n  Object.assign(element, options);\\n  return element;\\n}\",\n      \"function setStatus(message, type) {\\n  const statusDiv = document.getElementById('passwordChangeForm-formStatus');\\n  statusDiv.textContent = message;\\n  statusDiv.className = 'passwordChangeForm-status ' + type;\\n}\",\n      \"function toggleButtonState(disabled, text) {\\n  globals.submitButton.disabled = disabled;\\n  globals.submitButton.textContent = text;\\n}\",\n      \"function validatePasswordStrength(password) {\\n  const strength = calculatePasswordStrength(password);\\n  let message = '';\\n\\n  if (password.length < 8) {\\n    message = 'Password must be at least 8 characters.';\\n  } else if (!/[A-Z]/.test(password)) {\\n    message = 'Password must contain at least one uppercase letter.';\\n  } else if (!/[a-z]/.test(password)) {\\n    message = 'Password must contain at least one lowercase letter.';\\n  } else if (!/[0-9]/.test(password)) {\\n    message = 'Password must contain at least one number.';\\n  } else if (!/[^A-Za-z0-9]/.test(password)) {\\n    message = 'Password must contain at least one special character.';\\n  }\\n\\n  setError(document.getElementById('passwordChangeForm-newPassword'), message);\\n}\",\n      \"function validateConfirmPassword(newPassword, confirmPassword) {\\n  if (newPassword !== confirmPassword) {\\n    setError(document.getElementById('passwordChangeForm-confirmPassword'), 'Passwords must match.');\\n  }\\n}\",\n      \"function setError(field, message) {\\n  const errorId = field.id + '-error';\\n  let errorSpan = document.getElementById(errorId);\\n  if (!errorSpan) {\\n    errorSpan = createElement('span', {\\n      id: errorId,\\n      className: 'passwordChangeForm-error'\\n    });\\n    field.parentNode.appendChild(errorSpan);\\n  }\\n  errorSpan.textContent = message;\\n  field.classList.add('passwordChangeForm-input-error');\\n}\",\n      \"function clearError(field) {\\n  const errorId = field.id + '-error';\\n  const errorSpan = document.getElementById(errorId);\\n  if (errorSpan) {\\n    errorSpan.textContent = '';\\n    field.classList.remove('passwordChangeForm-input-error');\\n  }\\n}\",\n      \"function calculatePasswordStrength(password) {\\n  let strength = 0;\\n  if (password.length >= 8) strength++;\\n  if (/[A-Z]/.test(password)) strength++;\\n  if (/[a-z]/.test(password)) strength++;\\n  if (/[0-9]/.test(password)) strength++;\\n  if (/[^A-Za-z0-9]/.test(password)) strength++;\\n  return strength;\\n}\"\n    ],\n    \"globals\": {\n      \"isFormBuilded\": false,\n      \"submitButton\": null\n    },\n    \"CSS\": {\n      \"styles\": \".passwordChangeForm {\\n  margin: 20px;\\n  padding: 30px;\\n  border-radius: 10px;\\n  font-family: Arial, sans-serif;\\n  background-color: #FFF5E4; /* Light background */\\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\\n}\\n\\n.passwordChangeForm-title {\\n  text-align: center;\\n  color: #FFA725; /* Orange */\\n  margin-bottom: 20px;\\n}\\n\\n.passwordChangeForm-label {\\n  display: block;\\n  margin-bottom: 5px;\\n  color: #6A9C89; /* Green */\\n  font-weight: bold;\\n}\\n\\n.passwordChangeForm-input {\\n  width: 100%;\\n  padding: 10px;\\n  margin-bottom: 15px;\\n  border: 1px solid #C1D8C3; /* Light green */\\n  border-radius: 5px;\\n  box-sizing: border-box;\\n}\\n\\n.passwordChangeForm-input:focus {\\n  outline: none;\\n  border-color: #FFA725; /* Orange */\\n  box-shadow: 0 0 5px rgba(255, 167, 37, 0.5);\\n}\\n\\n.passwordChangeForm-button {\\n  background-color: #6A9C89; /* Green */\\n  color: white;\\n  padding: 12px 20px;\\n  border: none;\\n  border-radius: 5px;\\n  cursor: pointer;\\n  font-size: 16px;\\n  transition: background-color 0.3s;\\n}\\n\\n.passwordChangeForm-button:hover {\\n  background-color: #558774;\\n}\\n\\n.passwordChangeForm-status {\\n  margin-bottom: 15px;\\n  padding: 10px;\\n  border-radius: 5px;\\n  text-align: center;\\n}\\n\\n.passwordChangeForm-status.error {\\n  background-color: #f8d7da;\\n  color: #721c24;\\n}\\n\\n.passwordChangeForm-status.success {\\n  background-color: #d4edda;\\n  color: #155724;\\n}\\n\\n.passwordChangeForm-input-error {\\n  border-color: #f44336; /* Red */\\n}\\n\\n.passwordChangeForm-error {\\n  color: #f44336; /* Red */\\n  font-size: 0.8em;\\n  display: block;\\n  margin-top: 5px;\\n}\"\n    }\n  },\n  \"expect\": \"Ensure the HTML includes a `<form>` element with the class `passwordChangeForm`. The generated JavaScript code is designed to be used with an existing form element and will not create a new form element itself. The form should be placed where you want the registration form to appear on your webpage.\"\n}\n```",
          },
        ],
      },
      {
        role: "user",
        parts: [
          {
            text: '```json\n{\n  "prompt":"Create a comprehensive travel booking form with trip type (one-way, round-trip, multi-city), departure date, return date (conditional on round-trip), destination search with autocomplete suggestion, number of travelers (adults, children, infants), travel class (economy, premium economy, business, first), and special accommodations textarea",\n  "filename":"travelBookingForm",\n  "listener":"onSubmit",\n  "styleHint":"Modern travel website design with gradient accents, flight icons, and responsive layout that adjusts for mobile devices",\n  "validate":"Departure date must be in the future, return date must be after departure date for round-trip bookings, at least one traveler must be selected",\n  "cacheResponse":{false}\n}\n```',
          },
        ],
      },
      {
        role: "model",
        parts: [
          {
            text: "```json\n{\n  \"thoughts\": \"The prompt requests a travel booking form with various fields such as trip type, departure date, return date, destination search, number of travelers, travel class, and special accommodations. The `filename` is set to `travelBookingForm`, the `listener` is `onSubmit`. It also specifies the style hints and validation rules.\",\n  \"response\": {\n    \"eventListener\": \"function main(event, args) {\\n  event.preventDefault();\\n\\n  setStatus('', ''); // Clear previous status\\n  toggleButtonState(true, 'Searching...');\\n\\n  const formData = new FormData(event.currentTarget);\\n\\n  // Validation\\n  let isValid = true;\\n  const tripType = formData.get('tripType');\\n  const departureDate = formData.get('departureDate');\\n  const returnDate = formData.get('returnDate');\\n  const numAdults = parseInt(formData.get('numAdults') || 0);\\n  const numChildren = parseInt(formData.get('numChildren') || 0);\\n  const numInfants = parseInt(formData.get('numInfants') || 0);\\n\\n  if (!departureDate) {\\n    setStatus('Departure date is required.', 'error');\\n    isValid = false;\\n  }\\n\\n  if (tripType === 'round-trip' && !returnDate) {\\n    setStatus('Return date is required for round-trip bookings.', 'error');\\n    isValid = false;\\n  }\\n\\n  if (tripType === 'round-trip' && returnDate <= departureDate) {\\n    setStatus('Return date must be after departure date.', 'error');\\n    isValid = false;\\n  }\\n\\n  if (numAdults + numChildren + numInfants === 0) {\\n    setStatus('At least one traveler must be selected.', 'error');\\n    isValid = false;\\n  }\\n\\n  if (!isValid) {\\n    toggleButtonState(false, 'Search Flights');\\n    return;\\n  }\\n\\n  // Simulate flight search\\n  setTimeout(() => {\\n    console.log('Form Data:', Object.fromEntries(formData.entries()));\\n    setStatus('Flights found! (Simulated)', 'success');\\n    toggleButtonState(false, 'Search Flights');\\n  }, 2000);\\n}\",\n    \"formBuilder\": \"function formBuilder(formElement) {\\n  if (globals.isFormBuilded) return;\\n\\n  if (!(formElement instanceof HTMLFormElement)) {\\n    console.warn('Invalid formElement provided. Expected an HTMLFormElement.');\\n    return;\\n  }\\n\\n  // Form Title\\n  const title = createElement('h1', {\\n    textContent: 'Book Your Dream Trip',\\n    classList: ['travelBookingForm-title']\\n  });\\n\\n  // Status Message Container\\n  const statusDiv = createElement('div', {\\n    id: 'travelBookingForm-formStatus',\\n    classList: ['travelBookingForm-status']\\n  });\\n\\n  // Trip Type\\n  const tripTypeLabel = createElement('label', {\\n    htmlFor: 'travelBookingForm-tripType',\\n    textContent: 'Trip Type:',\\n    classList: ['travelBookingForm-label']\\n  });\\n  const tripTypeSelect = createElement('select', {\\n    id: 'travelBookingForm-tripType',\\n    name: 'tripType',\\n    classList: ['travelBookingForm-input']\\n  });\\n  ['one-way', 'round-trip', 'multi-city'].forEach(optionText => {\\n    const option = createElement('option', {\\n      value: optionText,\\n      textContent: optionText.replace('-', ' ')\\n    });\\n    tripTypeSelect.appendChild(option);\\n  });\\n  tripTypeSelect.addEventlistener('change', () => {\\n    const returnDateRow = document.getElementById('returnDateRow');\\n    returnDateRow.style.display = tripTypeSelect.value === 'round-trip' ? 'flex' : 'none';\\n  });\\n\\n  // Departure Date\\n  const departureDateLabel = createElement('label', {\\n    htmlFor: 'travelBookingForm-departureDate',\\n    textContent: 'Departure Date:',\\n    classList: ['travelBookingForm-label']\\n  });\\n  const departureDateInput = createElement('input', {\\n    type: 'date',\\n    id: 'travelBookingForm-departureDate',\\n    name: 'departureDate',\\n    classList: ['travelBookingForm-input']\\n  });\\n\\n  // Return Date\\n  const returnDateLabel = createElement('label', {\\n    htmlFor: 'travelBookingForm-returnDate',\\n    textContent: 'Return Date:',\\n    classList: ['travelBookingForm-label']\\n  });\\n  const returnDateInput = createElement('input', {\\n    type: 'date',\\n    id: 'travelBookingForm-returnDate',\\n    name: 'returnDate',\\n    classList: ['travelBookingForm-input']\\n  });\\n  const returnDateRow = createElement('div', {\\n    id: 'returnDateRow',\\n    classList: ['travelBookingForm-row']\\n  });\\n  returnDateRow.style.display = tripTypeSelect.value === 'round-trip' ? 'flex' : 'none';\\n  returnDateRow.appendChild(returnDateLabel);\\n  returnDateRow.appendChild(returnDateInput);\\n\\n  // Destination Search\\n  const destinationLabel = createElement('label', {\\n    htmlFor: 'travelBookingForm-destination',\\n    textContent: 'Destination:',\\n    classList: ['travelBookingForm-label']\\n  });\\n  const destinationInput = createElement('input', {\\n    type: 'text',\\n    id: 'travelBookingForm-destination',\\n    name: 'destination',\\n    classList: ['travelBookingForm-input']\\n  });\\n  // Number of Travelers\\n  const travelersLabel = createElement('label', {\\n    textContent: 'Number of Travelers:',\\n    classList: ['travelBookingForm-label']\\n  });\\n  const adultsLabel = createElement('label', {\\n    htmlFor: 'travelBookingForm-numAdults',\\n    textContent: 'Adults:'\\n  });\\n  const adultsInput = createElement('input', {\\n    type: 'number',\\n    id: 'travelBookingForm-numAdults',\\n    name: 'numAdults',\\n    min: '0',\\n    classList: ['travelBookingForm-number-input']\\n  });\\n  const childrenLabel = createElement('label', {\\n    htmlFor: 'travelBookingForm-numChildren',\\n    textContent: 'Children:'\\n  });\\n  const childrenInput = createElement('input', {\\n    type: 'number',\\n    id: 'travelBookingForm-numChildren',\\n    name: 'numChildren',\\n    min: '0',\\n    classList: ['travelBookingForm-number-input']\\n  });\\n  const infantsLabel = createElement('label', {\\n    htmlFor: 'travelBookingForm-numInfants',\\n    textContent: 'Infants:'\\n  });\\n  const infantsInput = createElement('input', {\\n    type: 'number',\\n    id: 'travelBookingForm-numInfants',\\n    name: 'numInfants',\\n    min: '0',\\n    classList: ['travelBookingForm-number-input']\\n  });\\n  const travelersContainer = createElement('div', {\\n    classList: ['travelBookingForm-travelers-container']\\n  });\\n  travelersContainer.appendChild(adultsLabel);\\n  travelersContainer.appendChild(adultsInput);\\n  travelersContainer.appendChild(childrenLabel);\\n  travelersContainer.appendChild(childrenInput);\\n  travelersContainer.appendChild(infantsLabel);\\n  travelersContainer.appendChild(infantsInput);\\n  // Travel Class\\n  const travelClassLabel = createElement('label', {\\n    htmlFor: 'travelBookingForm-travelClass',\\n    textContent: 'Travel Class:',\\n    classList: ['travelBookingForm-label']\\n  });\\n  const travelClassSelect = createElement('select', {\\n    id: 'travelBookingForm-travelClass',\\n    name: 'travelClass',\\n    classList: ['travelBookingForm-input']\\n  });\\n  ['economy', 'premium economy', 'business', 'first'].forEach(optionText => {\\n    const option = createElement('option', {\\n      value: optionText,\\n      textContent: optionText.replace(' ', ' ').replace(/^./, str => str.toUpperCase())\\n    });\\n    travelClassSelect.appendChild(option);\\n  });\\n  // Special Accommodations\\n  const accommodationsLabel = createElement('label', {\\n    htmlFor: 'travelBookingForm-specialAccommodations',\\n    textContent: 'Special Accommodations:',\\n    classList: ['travelBookingForm-label']\\n  });\\n  const accommodationsTextarea = createElement('textarea', {\\n    id: 'travelBookingForm-specialAccommodations',\\n    name: 'specialAccommodations',\\n    classList: ['travelBookingForm-textarea']\\n  });\\n  globals.submitButton = createElement('button', {\\n    type: 'submit',\\n    textContent: 'Search Flights',\\n    classList: ['travelBookingForm-button']\\n  });\\n\\n  // Assemble the form\\n  formElement.appendChild(title);\\n  formElement.appendChild(statusDiv);\\n  formElement.appendChild(tripTypeLabel);\\n  formElement.appendChild(tripTypeSelect);\\n  formElement.appendChild(departureDateLabel);\\n  formElement.appendChild(departureDateInput);\\n  formElement.appendChild(returnDateRow);\\n  formElement.appendChild(destinationLabel);\\n  formElement.appendChild(destinationInput);\\n  formElement.appendChild(travelersLabel);\\n  formElement.appendChild(travelersContainer);\\n  formElement.appendChild(travelClassLabel);\\n  formElement.appendChild(travelClassSelect);\\n  formElement.appendChild(accommodationsLabel);\\n  formElement.appendChild(accommodationsTextarea);\\n  formElement.appendChild(globals.submitButton);\\n\\n  globals.isFormBuilded = true;\\n}\",\n    \"helperFunctions\": [\n      \"function createElement(tag, options) {\\n  const element = document.createElement(tag);\\n  Object.assign(element, options);\\n  return element;\\n}\",\n      \"function setStatus(message, type) {\\n  const statusDiv = document.getElementById('travelBookingForm-formStatus');\\n  statusDiv.textContent = message;\\n  statusDiv.className = 'travelBookingForm-status ' + type;\\n}\",\n      \"function toggleButtonState(disabled, text) {\\n  globals.submitButton.disabled = disabled;\\n  globals.submitButton.textContent = text;\\n}\"\n    ],\n    \"globals\": {\n      \"isFormBuilded\": false,\n      \"submitButton\": null\n    },\n    \"CSS\": {\n      \"styles\": \".travelBookingForm {\\n  margin: 20px;\\n  padding: 30px;\\n  border-radius: 12px;\\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\\n  background: linear-gradient(to right, #f0f2f5, #e1e5ea); /* Subtle gradient */\\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\\n  color: #333;\\n}\\n\\n.travelBookingForm-title {\\n  text-align: center;\\n  color: #2980b9; /* A calm blue for the title */\\n  margin-bottom: 30px;\\n  font-size: 2.3em;\\n  font-weight: 600;\\n}\\n\\n.travelBookingForm-label {\\n  display: block;\\n  margin-bottom: 8px;\\n  font-weight: 500;\\n  color: #555;\\n}\\n\\n.travelBookingForm-input, .travelBookingForm-textarea, .travelBookingForm-select {\\n  width: 100%;\\n  padding: 12px;\\n  margin-bottom: 20px;\\n  border: 1px solid #ced4da;\\n  border-radius: 6px;\\n  box-sizing: border-box;\\n  font-size: 1em;\\n  color: #495057;\\n  transition: border-color 0.3s ease;\\n}\\n\\n.travelBookingForm-input:focus, .travelBookingForm-textarea:focus, .travelBookingForm-select:focus {\\n  border-color: #2980b9; /* Highlight color */\\n  outline: none;\\n  box-shadow: 0 2px 5px rgba(41, 128, 185, 0.3);\\n}\\n\\n.travelBookingForm-textarea {\\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\\n  resize: vertical;\\n  min-height: 120px;\\n}\\n\\n.travelBookingForm-button {\\n  background-color: #3498db; /* A brighter blue for the button */\\n  color: white;\\n  padding: 14px 24px;\\n  border: none;\\n  border-radius: 6px;\\n  cursor: pointer;\\n  font-size: 1.1em;\\n  font-weight: 500;\\n  transition: background-color 0.3s ease;\\n}\\n\\n.travelBookingForm-button:hover {\\n  background-color: #21618c; /* Darker shade for hover */\\n}\\n\\n.travelBookingForm-status {\\n  margin-bottom: 20px;\\n  padding: 12px;\\n  border-radius: 6px;\\n  font-weight: 500;\\n  text-align: center;\\n}\\n\\n.travelBookingForm-status.error {\\n  background-color: #f8d7da;\\n  color: #721c24;\\n  border: 1px solid #f5c6cb;\\n}\\n\\n.travelBookingForm-status.success {\\n  background-color: #d4edda;\\n  color: #155724;\\n  border: 1px solid #c3e6cb;\\n}\\n\\n.travelBookingForm-row {\\n  display: flex;\\n  flex-wrap: wrap;\\n  margin-bottom: 15px;\\n}\\n\\n/* Styling for the number inputs to remove arrows */\\n.travelBookingForm-number-input {\\n  -webkit-appearance: none;\\n  -moz-appearance: none;\\n  appearance: none;\\n  width: 60px;\\n  padding: 8px;\\n  border: 1px solid #ced4da;\\n  border-radius: 4px;\\n  margin-right: 10px;\\n}\\n\\n.travelBookingForm-travelers-container {\\n  display: flex;\\n  gap: 10px;\\n  align-items: center;\\n}\\n\\n@media (max-width: 768px) {\\n  .travelBookingForm {\\n    padding: 20px;\\n  }\\n  .travelBookingForm-travelers-container {\\n    flex-direction: column;\\n    align-items: flex-start;\\n  }\\n  .travelBookingForm-number-input {\\n    width: 100%;\\n    margin-bottom: 10px;\\n  }\\n}\\n\"\n    }\n  },\n  \"expect\": \"Ensure the HTML includes a `<form>` element with the class `travelBookingForm`. The generated JavaScript code is designed to be used with an existing form element and will not create a new form element itself. The form should be placed where you want the registration form to appear on your webpage.\"\n}\n```",
          },
        ],
      },
      {
        role: "user",
        parts: [
          {
            text: '```json\n{\n "prompt":"Create a survey form with static fields name and age range selection (under 18, 18-25, 26-40, 41-60, over 60) and dynamic questions fields. Use the _surveyQuestion to get the full list of questions (initally it will be empty array). The _surveyQuestions will be updated everytime the age changes its an array of object each with text property  use that to display the question and provide a input text for user to type there answer. upon submission update the &surveyResults",\n        "filename":"productSurveyForm",\n        "listener":"onSubmit", \n        "supportingProps":{\n          "variables": {\n            "_surveyQuestions": [],\n          },\n        }\n        "mutation":[\n          {\n            "id": "surveyResults",\n            "returnFormat": {\n              "completed": true,\n              "timestamp": "ISO date string",\n              "responses": [],\n            },\n            "mutate": setSurveyData,\n            "mutationType": "callback",\n          },\n        ],\n        "callbacks":{\n          "independent": [\n            {\n              "callGuide":\n              "Call this function when the form is first loaded to track form impression",\n              "callback": "callbackindependent0",\n            },\n          ],\n          "dependent": [\n            {\n              "callGuide":\n                "Call this function when a user changes their age range to filter and update the displayed questions",\n              "parametersGuide": [\n                "The selected age range value as number, say under 18 is selected then pass 18, 41-60 pass 41 and so on.",\n              ],\n             "callback": "filterQuestionsByAge",\n            },\n          ],\n        },\n        "styleHint": "Clean survey design"\n}\n```',
          },
        ],
      },
      {
        role: "model",
        parts: [
          {
            text: "```json\n{\n  \"thoughts\": \"The prompt requests a survey form with static name and age range selection, and dynamic questions fields. The _surveyQuestion variable is used to get the full list of questions. The _surveyQuestions will be updated every time the age changes. The prompt also defines a mutation to update the &surveyResults and specifies callbacks. I am extracting all information for the prompt to generate the code.\",\n  \"response\": {\n    \"eventListener\": \"function main(event, args) {\\n  event.preventDefault();\\n\\n  const formData = new FormData(event.currentTarget);\\n  const responses = [];\\n  const questions = args._surveyQuestions;\\n\\n  questions.forEach((question, index) => {\\n    const answer = formData.get(`question-${index}`);\\n    responses.push({\\n      question: question.text,\\n      answer: answer || ''\\n    });\\n  });\\n\\n  const surveyResults = {\\n    completed: true,\\n    timestamp: new Date().toISOString(),\\n    responses: responses\\n  };\\n\\n  args.surveyResults(surveyResults);\\n  setStatus('Survey submitted successfully!', 'success');\\n}\",\n    \"formBuilder\": \"function formBuilder(formElement, args) {\\n  if (globals.isFormBuilded) return;\\n\\n  if (!(formElement instanceof HTMLFormElement)) {\\n    console.warn('Invalid formElement provided. Expected an HTMLFormElement.');\\n    return;\\n  }\\n  args.callbackindependent0();\\n  const title = createElement('h1', {\\n    textContent: 'Product Survey Form',\\n    classList: ['productSurveyForm-title']\\n  });\\n\\n  const statusDiv = createElement('div', {\\n    id: 'productSurveyForm-formStatus',\\n    classList: ['productSurveyForm-status']\\n  });\\n\\n  const nameLabel = createElement('label', {\\n    htmlFor: 'productSurveyForm-name',\\n    textContent: 'Name:',\\n    classList: ['productSurveyForm-label']\\n  });\\n  const nameInput = createElement('input', {\\n    type: 'text',\\n    id: 'productSurveyForm-name',\\n    name: 'name',\\n    classList: ['productSurveyForm-input']\\n  });\\n\\n  const ageRangeLabel = createElement('label', {\\n    htmlFor: 'productSurveyForm-ageRange',\\n    textContent: 'Age Range:',\\n    classList: ['productSurveyForm-label']\\n  });\\n  const ageRangeSelect = createElement('select', {\\n    id: 'productSurveyForm-ageRange',\\n    name: 'ageRange',\\n    classList: ['productSurveyForm-input']\\n  });\\n  const ageRanges = [\\n    { text: 'Under 18', value: 18 },\\n    { text: '18-25', value: 18 },\\n    { text: '26-40', value: 26 },\\n    { text: '41-60', value: 41 },\\n    { text: 'Over 60', value: 61 }\\n  ];\\n  ageRanges.forEach(range => {\\n    const option = createElement('option', {\\n      value: range.value,\\n      textContent: range.text\\n    });\\n    ageRangeSelect.appendChild(option);\\n  });\\n\\n  const questionContainer = createElement('div', {\\n    id: 'questionContainer',\\n    classList: ['productSurveyForm-question-container']\\n  });\\n\\n  ageRangeSelect.addEventlistener('change', (event) => {\\n    const selectedAge = parseInt(event.target.value);\\n    updateQuestions(selectedAge);\\n  });\\n\\n  function updateQuestions(selectedAge) {\\n    questionContainer.innerHTML = '';\\n    const filteredQuestions = args.filterQuestionsByAge(selectedAge);\\n    filteredQuestions.forEach((question, index) => {\\n      const questionLabel = createElement('label', {\\n        htmlFor: `question-${index}`,\\n        textContent: question.text,\\n        classList: ['productSurveyForm-question-label']\\n      });\\n      const questionInput = createElement('input', {\\n        type: 'text',\\n        id: `question-${index}`,\\n        name: `question-${index}`,\\n        classList: ['productSurveyForm-question-input']\\n      });\\n      questionContainer.appendChild(questionLabel);\\n      questionContainer.appendChild(questionInput);\\n    });\\n  }\\n\\n  globals.submitButton = createElement('button', {\\n    type: 'submit',\\n    textContent: 'Submit Survey',\\n    classList: ['productSurveyForm-button']\\n  });\\n\\n  formElement.appendChild(title);\\n  formElement.appendChild(statusDiv);\\n  formElement.appendChild(nameLabel);\\n  formElement.appendChild(nameInput);\\n  formElement.appendChild(ageRangeLabel);\\n  formElement.appendChild(ageRangeSelect);\\n  formElement.appendChild(questionContainer);\\n  formElement.appendChild(globals.submitButton);\\n\\n  globals.isFormBuilded = true;\\n  // show intial question\\n  updateQuestions(ageRanges[0].value);\\n}\",\n    \"helperFunctions\": [\n      \"function createElement(tag, options) { const element = document.createElement(tag); if (options.dataset) { for (const key in options.dataset) { if (options.dataset.hasOwnProperty(key)) { element.dataset[key] = options.dataset[key]; } } delete options.dataset; } Object.assign(element, options); return element; }\",\n      \"function setStatus(message, type) {\\n  const statusDiv = document.getElementById('productSurveyForm-formStatus');\\n  statusDiv.textContent = message;\\n  statusDiv.className = 'productSurveyForm-status ' + type;\\n}\",\n      \"function toggleButtonState(disabled, text) {\\n  globals.submitButton.disabled = disabled;\\n  globals.submitButton.textContent = text;\\n}\"\n    ],\n    \"globals\": {\n      \"isFormBuilded\": false,\n      \"submitButton\": null\n    },\n    \"CSS\": {\n      \"styles\": \".productSurveyForm {\\n  margin: 20px;\\n  padding: 30px;\\n  border-radius: 12px;\\n  font-family: 'Arial', sans-serif;\\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\\n}\\n\\n.productSurveyForm-title {\\n  text-align: center;\\n  color: #3498db;\\n  margin-bottom: 25px;\\n}\\n\\n.productSurveyForm-label {\\n  display: block;\\n  margin-bottom: 8px;\\n  font-weight: 500;\\n}\\n\\n.productSurveyForm-input {\\n  width: 100%;\\n  padding: 10px;\\n  margin-bottom: 15px;\\n  border: 1px solid #ccc;\\n  border-radius: 5px;\\n  box-sizing: border-box;\\n}\\n\\n.productSurveyForm-button {\\n  background-color: #3498db;\\n  color: white;\\n  padding: 12px 20px;\\n  border: none;\\n  border-radius: 5px;\\n  cursor: pointer;\\n}\\n\\n.productSurveyForm-button:hover {\\n  background-color: #2980b9;\\n}\\n\\n.productSurveyForm-status {\\n  margin-bottom: 15px;\\n  padding: 10px;\\n  border-radius: 5px;\\n  font-weight: bold;\\n  text-align: center;\\n}\\n\\n.productSurveyForm-status.error {\\n  background-color: #f8d7da;\\n  color: #721c24;\\n  border: 1px solid #f5c6cb;\\n}\\n\\n.productSurveyForm-status.success {\\n  background-color: #d4edda;\\n  color: #155724;\\n  border: 1px solid #c3e6cb;\\n}\\n\\n.productSurveyForm-question-container {\\n  margin-top: 20px;\\n}\\n\\n.productSurveyForm-question-label {\\n  display: block;\\n  margin-bottom: 5px;\\n  font-weight: bold;\\n}\\n\\n.productSurveyForm-question-input {\\n  width: 100%;\\n  padding: 10px;\\n  margin-bottom: 15px;\\n  border: 1px solid #ccc;\\n  border-radius: 5px;\\n  box-sizing: border-box;\\n}\\n\"\n    }\n  },\n  \"expect\": \"Ensure the HTML includes a `<form>` element with the class `productSurveyForm`. The generated JavaScript code is designed to be used with an existing form element and will not create a new form element itself. The form should be placed where you want the registration form to appear on your webpage.\"\n}\n```",
          },
        ],
      },
      {
        role: "user",
        parts: [
          {
            text: '```json\n{\n  "prompt": "Create a comprehensive job application form with personal details section, education history section, work experience section, skills assessment, and document uploads. Include form validation and dynamic fields that change based on job type selection.",\n  "filename": "complexJobApplicationForm",\n  "listener": "onSubmit",\n  "cacheResponse": false,\n  "layout": "responsive-sections",\n  "attributes": {\n    "className": "job-application-master-form corporate-theme",\n    "id": "career-application-form",\n    "encType": "multipart/form-data",\n    "data-analytics-id": "job-app-form-v3"\n  },\n  "styleHint": "Professional enterprise design with collapsible sections, progress tracking, and responsive layout that works well on all devices",\n  "validate": "Comprehensive validation with real-time feedback and cross-field validation",\n  "fieldDefinitions": [\n    {\n      "id": "jobType",\n      "fieldDefination": "Job type selection (Full-time, Part-time, Contract, Internship)",\n      "validate": "Required",\n      "styleHint": "Prominent selection buttons with icons"\n    },\n    {\n      "id": "personalInfo",\n      "fieldDefination": "Personal information section with fields for full name, email, phone, and address",\n      "validate": "All fields required, email and phone must be valid formats",\n      "layout": "two-column",\n      "styleHint": "Clean layout with subtle field separators"\n    },\n    {\n      "id": "education",\n      "fieldDefination": "Education history with degree, institution, field of study, and graduation year",\n      "validate": "At least one education entry required for all job types except internship",\n      "styleHint": "Repeatable section with add/remove buttons"\n    },\n    {\n      "id": "experience",\n      "fieldDefination": "Work experience with job title, company, duration, and responsibilities",\n      "validate": "At least 2 years of experience required for Full-time positions, validate against @jobType",\n      "styleHint": "Repeatable section with rich text editor for responsibilities"\n    },\n    {\n      "id": "skills",\n      "fieldDefination": "Skills assessment with 5-point self-rating scale for relevant skills based on job type",\n      "validate": "At least 3 skills must be rated",\n      "styleHint": "Interactive skills rating with visual indicators"\n    },\n    {\n      "id": "documents",\n      "fieldDefination": "Document upload section for resume, cover letter, and portfolio",\n      "validate": "Resume required for all applications, cover letter required for Full-time and Part-time, portfolio optional",\n      "styleHint": "Drag-and-drop upload area with file type validation"\n    }\n  ],\n  "supportingProps": {\n    "utils": {\n      "$SKILLS_BY_JOB": {\n        "Full-time": ["Project Management", "Team Leadership", "Strategic Planning", "Budget Management"],\n        "Part-time": ["Time Management", "Communication", "Multitasking"],\n        "Contract": ["Self-Management", "Technical Expertise", "Client Communication"],\n        "Internship": ["Eagerness to Learn", "Basic Technical Skills", "Communication"]\n      }\n    },\n    "variables": {\n      "_jobDescriptions": {\n        "Full-time": "40 hours per week, benefits eligible",\n        "Part-time": "20-30 hours per week, limited benefits",\n        "Contract": "Project-based, flexible hours",\n        "Internship": "Learning opportunity, 15-20 hours per week"\n      }\n    }\n  },\n  "onInit": "function(formElement) { formElement.querySelectorAll(\'.section-nav-button\').forEach(button => { button.addEventlistener(\'click\', (e) => { const targetSection = document.getElementById(e.target.dataset.target); if (targetSection) { targetSection.scrollIntoView({ behavior: \'smooth\' }); } }); }); formElement.querySelectorAll(\'.help-icon\').forEach(icon => { /* Tooltip initialization code would go here */ }); }",\n  "mutation": [\n    {\n      "id": "applicationData",\n      "returnFormat": { \n        "status": "submitted",\n        "timestamp": "ISO date string", \n        "applicationId": "generated ID",\n        "completionPercentage": 100\n      },\n      "mutate": "setApplicationState",\n      "mutationType": "callback"\n    }\n  ],\n  \n}\n```',
          },
        ],
      },
      {
        role: "model",
        parts: [
          {
            text: "```json\n{\n  \"thoughts\": \"The prompt is to create a comprehensive job application form with multiple sections (personal details, education, work experience, skills, documents), dynamic behavior based on job type, and extensive validation. The `filename` is set to `complexJobApplicationForm`, the `listener` is `onSubmit`, and several other properties are specified to guide the form's structure and behavior. It's important to understand how these properties interact to create the desired form.\",\n  \"response\": {\n    \"eventListener\": \"function main(event, args) {\\n  event.preventDefault();\\n\\n  setStatus('', ''); // Clear any previous status\\n  toggleButtonState(true, 'Submitting Application...');\\n\\n  const formData = new FormData(event.currentTarget);\\n\\n  // Basic validation - more detailed validation needed\\n  if (!formData.get('jobType')) {\\n    setStatus('Please select a job type.', 'error');\\n    toggleButtonState(false, 'Submit Application');\\n    return;\\n  }\\n\\n  // Gather application data\\n  const applicationData = {\\n    jobType: formData.get('jobType'),\\n    // Add other form data here\\n    status: 'submitted',\\n    timestamp: new Date().toISOString(),\\n    applicationId: Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15), // Generate a random ID\\n    completionPercentage: 100\\n  };\\n\\n  // Simulate submission process\\n  setTimeout(() => {\\n    console.log('Application Data:', applicationData);\\n    setStatus('Application submitted successfully!', 'success');\\n    toggleButtonState(false, 'Submit Application');\\n\\n    // Mutation with the gathered data\\n    args.applicationData(applicationData);\\n  }, 2000);\\n}\",\n    \"formBuilder\": \"function formBuilder(formElement, args) {\\n  if (globals.isFormBuilded) return;\\n\\n  if (!(formElement instanceof HTMLFormElement)) {\\n    console.warn('Invalid formElement provided. Expected an HTMLFormElement.');\\n    return;\\n  }\\n\\n  // Add classes and attributes to the form\\n  formElement.classList.add('job-application-master-form', 'corporate-theme');\\n  formElement.id = 'career-application-form';\\n  formElement.encType = 'multipart/form-data';\\n  formElement.dataset.analyticsId = 'job-app-form-v3';\\n  args.onInit(formElement); // call onload, onInit is not meant to create element but is here for testing purposes\\n\\n  // Title\\n  const title = createElement('h1', {\\n    textContent: 'Job Application Form',\\n    classList: ['complexJobApplicationForm-title']\\n  });\\n\\n  // Status message container\\n  const statusDiv = createElement('div', {\\n    id: 'complexJobApplicationForm-formStatus',\\n    classList: ['complexJobApplicationForm-status']\\n  });\\n\\n  // Job Type Selection\\n  const jobTypeLabel = createElement('label', {\\n    textContent: 'Select Job Type:',\\n    classList: ['complexJobApplicationForm-label']\\n  });\\n\\n  const jobTypeContainer = createElement('div', {\\n    classList: ['complexJobApplicationForm-job-type-container']\\n  });\\n\\n  const jobTypes = ['Full-time', 'Part-time', 'Contract', 'Internship'];\\n  jobTypes.forEach(type => {\\n    const radio = createElement('input', {\\n      type: 'radio',\\n      id: `jobType-${type}`,\\n      name: 'jobType',\\n      value: type,\\n      classList: ['complexJobApplicationForm-job-type-radio']\\n    });\\n\\n    const label = createElement('label', {\\n      htmlFor: `jobType-${type}`,\\n      textContent: type,\\n      classList: ['complexJobApplicationForm-job-type-label']\\n    });\\n    const description = createElement('div', {\\n      textContent: args._jobDescriptions[type],\\n      classList: ['complexJobApplicationForm-job-type-description']\\n    })\\n\\n    jobTypeContainer.appendChild(radio);\\n    jobTypeContainer.appendChild(label);\\n    jobTypeContainer.appendChild(description)\\n  });\\n  // Personal Information Section\\n  const personalInfoLabel = createElement('h2', {\\n    textContent: 'Personal Information',\\n    classList: ['complexJobApplicationForm-section-title']\\n  });\\n\\n  const fullNameLabel = createElement('label', {\\n    htmlFor: 'fullName',\\n    textContent: 'Full Name:',\\n    classList: ['complexJobApplicationForm-label']\\n  });\\n  const fullNameInput = createElement('input', {\\n    type: 'text',\\n    id: 'fullName',\\n    name: 'fullName',\\n    required: true,\\n    classList: ['complexJobApplicationForm-input']\\n  });\\n\\n  const emailLabel = createElement('label', {\\n    htmlFor: 'email',\\n    textContent: 'Email:',\\n    classList: ['complexJobApplicationForm-label']\\n  });\\n  const emailInput = createElement('input', {\\n    type: 'email',\\n    id: 'email',\\n    name: 'email',\\n    required: true,\\n    classList: ['complexJobApplicationForm-input']\\n  });\\n\\n\\n  globals.submitButton = createElement('button', {\\n    type: 'submit',\\n    textContent: 'Submit Application',\\n    classList: ['complexJobApplicationForm-button']\\n  });\\n\\n  formElement.appendChild(title);\\n  formElement.appendChild(statusDiv);\\n  formElement.appendChild(jobTypeLabel);\\n  formElement.appendChild(jobTypeContainer);\\n  formElement.appendChild(personalInfoLabel);\\n  formElement.appendChild(fullNameLabel);\\n  formElement.appendChild(fullNameInput);\\n  formElement.appendChild(emailLabel);\\n  formElement.appendChild(emailInput);\\n  formElement.appendChild(globals.submitButton);\\n  globals.isFormBuilded = true;\\n}\",\n    \"helperFunctions\": [\n      \"function createElement(tag, options) {\\n  const element = document.createElement(tag);\\n  if (options.dataset) {\\n    for (const key in options.dataset) {\\n      if (options.dataset.hasOwnProperty(key)) {\\n        element.dataset[key] = options.dataset[key];\\n      }\\n    }\\n    delete options.dataset;\\n  }\\n  Object.assign(element, options);\\n  return element;\\n}\",\n      \"function setStatus(message, type) {\\n  const statusDiv = document.getElementById('complexJobApplicationForm-formStatus');\\n  statusDiv.textContent = message;\\n  statusDiv.className = 'complexJobApplicationForm-status ' + type;\\n}\",\n      \"function toggleButtonState(disabled, text) {\\n  globals.submitButton.disabled = disabled;\\n  globals.submitButton.textContent = text;\\n}\"\n    ],\n    \"globals\": {\n      \"isFormBuilded\": false,\n      \"submitButton\": null\n    },\n    \"CSS\": {\n      \"styles\": \".complexJobApplicationForm {\\n  margin: 20px;\\n  padding: 30px;\\n  font-family: 'Arial', sans-serif;\\n  border-radius: 10px;\\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\\n}\\n\\n.complexJobApplicationForm-title {\\n  text-align: center;\\n  color: #2c3e50;\\n  margin-bottom: 25px;\\n}\\n\\n.complexJobApplicationForm-label {\\n  display: block;\\n  margin-bottom: 8px;\\n  font-weight: 500;\\n}\\n\\n.complexJobApplicationForm-input {\\n  width: 100%;\\n  padding: 10px;\\n  margin-bottom: 15px;\\n  border: 1px solid #ccc;\\n  border-radius: 5px;\\n  box-sizing: border-box;\\n}\\n\\n.complexJobApplicationForm-button {\\n  background-color: #3498db;\\n  color: white;\\n  padding: 12px 20px;\\n  border: none;\\n  border-radius: 5px;\\n  cursor: pointer;\\n}\\n\\n.complexJobApplicationForm-button:hover {\\n  background-color: #2980b9;\\n}\\n\\n.complexJobApplicationForm-status {\\n  margin-bottom: 15px;\\n  padding: 10px;\\n  border-radius: 5px;\\n  font-weight: bold;\\n  text-align: center;\\n}\\n\\n.complexJobApplicationForm-status.error {\\n  background-color: #f8d7da;\\n  color: #721c24;\\n  border: 1px solid #f5c6cb;\\n}\\n\\n.complexJobApplicationForm-status.success {\\n  background-color: #d4edda;\\n  color: #155724;\\n  border: 1px solid #c3e6cb;\\n}\\n\\n.complexJobApplicationForm-job-type-container {\\n  display: flex;\\n  flex-direction: column;\\n  gap: 10px;\\n  margin-bottom: 20px;\\n}\\n\\n.complexJobApplicationForm-job-type-label {\\n  margin-left: 5px;\\n}\\n\"\n    }\n  },\n  \"expect\": \"Ensure the HTML includes a `<form>` element with the specified classes and attributes. The generated JavaScript code is designed to be used with an existing form element and will not create a new form element itself. The form should be placed where you want the registration form to appear on your webpage.\"\n}\n```",
          },
        ],
      },
      {
        role: "user",
        parts: [
          {
            text: '```json\n{\n "prompt":"Product availablility check form. Take user input and query \'products\' collection using title field. it will return title, rating and price if available. show the details in form if available.",\n        "filename":"chechProductAvailablitiyForm",\n        "listener":"onSubmit",\n        "supportingProps":{\n          "database": {\n            "name": "firebase",\n            "envGuide": "NEXT_PUBLIC before each and _P2 at the end of each",\n          },\n        },\n        "fieldDefinitions":[\n          {\n            "fieldDefination": "Text to take the product name",\n            "validate": "must not be empty",\n          },\n        ],\n        "styleHint":"Use extensive CSS so the form looks good"\n}\n```',
          },
        ],
      },
      {
        role: "model",
        parts: [
          {
            text: "```json\n{\n  \"thoughts\": \"The prompt requests a product availability check form that takes user input and queries a 'products' collection in Firebase using the title field. The form should display the name, rating, and price if the product is found. I will now remove all \\\\n characters from the response.\",\n  \"response\": {\n    \"eventListener\": \"function main(event, args) {\\n  event.preventDefault();\\n  setStatus('', '');\\n  clearProductDetails();\\n  toggleButtonState(true, 'Checking Availability...');\\n\\n  const formData = new FormData(event.currentTarget);\\n  const productName = formData.get('productName');\\n\\n  if (!productName) {\\n    setStatus('Please enter a product name.', 'error');\\n    toggleButtonState(false, 'Check Availability');\\n    return;\\n  }\\n\\n  try {\\n    initializeApp({\\n      apiKey: process.env.NEXT_PUBLIC_API_KEY_P2,\\n      authDomain: process.env.NEXT_PUBLIC_AUTH_DOMAIN_P2,\\n      projectId: process.env.NEXT_PUBLIC_PROJECT_ID_P2,\\n      storageBucket: process.env.NEXT_PUBLIC_STORAGE_BUCKET_P2,\\n      messagingSenderId: process.env.NEXT_PUBLIC_MESSAGING_SENDER_ID_P2,\\n      appId: process.env.NEXT_PUBLIC_APP_ID_P2\\n    });\\n\\n    const db = getFirestore();\\n    const productsRef = collection(db, 'products');\\n    const q = query(productsRef, where('title', '==', productName));\\n    const querySnapshot = await getDocs(q);\\n\\n    if (!querySnapshot.empty) {\\n      querySnapshot.forEach((doc) => {\\n        const productData = doc.data();\\n        displayProductDetails(productData.name, productData.rating, productData.price);\\n      });\\n      setStatus('Product details found.', 'success');\\n    } else {\\n      setStatus('Product not found.', 'error');\\n    }\\n  } catch (error) {\\n    console.error('Error fetching product:', error);\\n    setStatus('Error checking availability.', 'error');\\n  } finally {\\n    toggleButtonState(false, 'Check Availability');\\n  }\\n}\",\n    \"formBuilder\": \"function formBuilder(formElement, args) {\\n  if (globals.isFormBuilded) return;\\n\\n  if (!(formElement instanceof HTMLFormElement)) {\\n    console.warn('Invalid formElement provided. Expected an HTMLFormElement.');\\n    return;\\n  }\\n\\n  // Form Title\\n  const title = createElement('h1', {\\n    textContent: 'Check Product Availability',\\n    classList: ['chechProductAvailablitiyForm-title']\\n  });\\n\\n  // Status message container\\n  const statusDiv = createElement('div', {\\n    id: 'chechProductAvailablitiyForm-formStatus',\\n    classList: ['chechProductAvailablitiyForm-status']\\n  });\\n\\n  // Product Name Input\\n  const productNameLabel = createElement('label', {\\n    htmlFor: 'chechProductAvailablitiyForm-productName',\\n    textContent: 'Product Name:',\\n    classList: ['chechProductAvailablitiyForm-label']\\n  });\\n\\n  const productNameInput = createElement('input', {\\n    type: 'text',\\n    id: 'chechProductAvailablitiyForm-productName',\\n    name: 'productName',\\n    classList: ['chechProductAvailablitiyForm-input']\\n  });\\n\\n  const productDetailsContainer = createElement('div', {\\n    id: 'productDetailsContainer',\\n    classList: ['chechProductAvailablitiyForm-product-details-container']\\n  });\\n\\n  const nameDiv = createElement('div', {\\n    id: 'productName',\\n    textContent: 'Name: ',\\n    classList: ['chechProductAvailablitiyForm-product-name']\\n  });\\n\\n  const ratingDiv = createElement('div', {\\n    id: 'productRating',\\n    textContent: 'Rating: ',\\n    classList: ['chechProductAvailablitiyForm-product-rating']\\n  });\\n\\n  const priceDiv = createElement('div', {\\n    id: 'productPrice',\\n    textContent: 'Price: ',\\n    classList: ['chechProductAvailablitiyForm-product-price']\\n  });\\n\\n  productDetailsContainer.appendChild(nameDiv);\\n  productDetailsContainer.appendChild(ratingDiv);\\n  productDetailsContainer.appendChild(priceDiv);\\n\\n  globals.submitButton = createElement('button', {\\n    type: 'submit',\\n    textContent: 'Check Availability',\\n    classList: ['chechProductAvailablitiyForm-button']\\n  });\\n\\n  formElement.appendChild(title);\\n  formElement.appendChild(statusDiv);\\n  formElement.appendChild(productNameLabel);\\n  formElement.appendChild(productNameInput);\\n  formElement.appendChild(globals.submitButton);\\n  formElement.appendChild(productDetailsContainer);\\n\\n  globals.isFormBuilded = true;\\n}\",\n    \"helperFunctions\": [\n      \"function createElement(tag, options) {\\n  const element = document.createElement(tag);\\n  if (options.dataset) {\\n    for (const key in options.dataset) {\\n      if (options.dataset.hasOwnProperty(key)) {\\n        element.dataset[key] = options.dataset[key];\\n      }\\n    }\\n    delete options.dataset;\\n  }\\n  Object.assign(element, options);\\n  return element;\\n}\",\n      \"function setStatus(message, type) {\\n  const statusDiv = document.getElementById('chechProductAvailablitiyForm-formStatus');\\n  statusDiv.textContent = message;\\n  statusDiv.className = 'chechProductAvailablitiyForm-status ' + type;\\n}\",\n      \"function toggleButtonState(disabled, text) {\\n  globals.submitButton.disabled = disabled;\\n  globals.submitButton.textContent = text;\\n}\",\n      \"function displayProductDetails(name, rating, price) {\\n  document.getElementById('productName').textContent = `Name: ${name}`;\\n  document.getElementById('productRating').textContent = `Rating: ${rating}`;\\n  document.getElementById('productPrice').textContent = `Price: $${price}`;\\n}\",\n      \"function clearProductDetails() {\\n  document.getElementById('productName').textContent = 'Name:';\\n  document.getElementById('productRating').textContent = 'Rating:';\\n  document.getElementById('productPrice').textContent = 'Price:';\\n}\"\n    ],\n    \"globals\": {\n      \"isFormBuilded\": false,\n      \"submitButton\": null\n    },\n    \"imports\": [\n      \"import { initializeApp } from 'firebase/app'\",\n      \"import { getFirestore, collection, query, where, getDocs } from 'firebase/firestore'\"\n    ],\n    \"CSS\": {\n      \"styles\": \".chechProductAvailablitiyForm {\\n  margin: 30px auto;\\n  padding: 30px;\\n  max-width: 600px;\\n  font-family: 'Arial', sans-serif;\\n  border-radius: 12px;\\n  background-color: #f9f9f9;\\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\\n}\\n\\n.chechProductAvailablitiyForm-title {\\n  text-align: center;\\n  margin-bottom: 30px;\\n  color: #333;\\n  font-size: 2.2em;\\n}\\n\\n.chechProductAvailablitiyForm-label {\\n  display: block;\\n  margin-bottom: 10px;\\n  color: #555;\\n  font-weight: bold;\\n}\\n\\n.chechProductAvailablitiyForm-input {\\n  width: 100%;\\n  padding: 12px;\\n  margin-bottom: 25px;\\n  border: 1px solid #ddd;\\n  border-radius: 6px;\\n  box-sizing: border-box;\\n  font-size: 1em;\\n  color: #444;\\n}\\n\\n.chechProductAvailablitiyForm-button {\\n  background-color: #5cb85c;\\n  color: white;\\n  padding: 14px 24px;\\n  border: none;\\n  border-radius: 6px;\\n  cursor: pointer;\\n  font-size: 1.1em;\\n  transition: background-color 0.3s ease;\\n}\\n\\n.chechProductAvailablitiyForm-button:hover {\\n  background-color: #4cae4c;\\n}\\n\\n.chechProductAvailablitiyForm-status {\\n  margin-bottom: 25px;\\n  padding: 12px;\\n  border-radius: 6px;\\n  font-weight: bold;\\n  text-align: center;\\n}\\n\\n.chechProductAvailablitiyForm-status.error {\\n  background-color: #f8d7da;\\n  color: #721c24;\\n  border: 1px solid #f5c6cb;\\n}\\n\\n.chechProductAvailablitiyForm-status.success {\\n  background-color: #d4edda;\\n  color: #155724;\\n  border: 1px solid #c3e6cb;\\n}\\n\\n.chechProductAvailablitiyForm-product-details-container {\\n  margin-top: 20px;\\n  padding: 15px;\\n  border: 1px solid #eee;\\n  border-radius: 6px;\\n  background-color: #fff;\\n}\\n\\n.chechProductAvailablitiyForm-product-name,\\n.chechProductAvailablitiyForm-product-rating,\\n.chechProductAvailablitiyForm-product-price {\\n  margin-bottom: 8px;\\n  color: #777;\\n}\"\n    }\n  },\n  \"expect\": \"Ensure the HTML includes a `<form>` element with the class `chechProductAvailablitiyForm`. The generated JavaScript code requires Firebase to be set up. A collection named 'products' should exist in Firestore with fields like 'title', 'name', 'rating', and 'price'.\"\n}\n```",
          },
        ],
      },
      {
        role: "user",
        parts: [
          {
            text: '```json\n{\n"prompt":"a form that upload users files to publicFiles directory",\n"filename":"uploadFileForm",\n"listener":"onSubmit",\n"supportingProps":{\n"database":{\n"name":"supbase storage"\n},\n"fieldDefinitions":[\n{\n"fieldDefinition":"a file name",\n"validate":"required"\n},\n{\n"fieldDefinition":"drag-and-drop and select file",\n"validate":"File must not exceed 50kb is size",\n"styleHint":"The UI here should be great with animations, it should be a nice looking drag-and-drop UI with extensive CSS"\n}\n]\n}\n}\n```',
          },
        ],
      },
      {
        role: "model",
        parts: [
          {
            text: "```json\n{\n  \"thoughts\": \"The prompt requests a form that uploads users files to Supabase Storage. The filename is `uploadFileForm` and listener is `onSubmit`. It should have great UI with animations. I will add validation that the file should not exceed 50kb in size. I will add CSS for great UI.\",\n  \"response\": {\n    \"eventListener\": \"async function main(event, args) {\\n  event.preventDefault();\\n  setStatus('', '');\\n  toggleButtonState(true, 'Uploading...');\\n\\n  const formData = new FormData(event.currentTarget);\\n  const file = formData.get('fileUpload');\\n\\n  if (!file) {\\n    setStatus('Please select a file to upload.', 'error');\\n    toggleButtonState(false, 'Upload');\\n    return;\\n  }\\n\\n  if (file.size > 50000) {\\n    setStatus('File size must not exceed 50KB.', 'error');\\n    toggleButtonState(false, 'Upload');\\n    return;\\n  }\\n\\n  try {\\n    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\\n    const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\\n    const supabase = createClient(supabaseUrl, supabaseKey);\\n    const fileName = formData.get('fileName');\\n\\n    const { data, error } = await supabase\\n      .storage\\n      .from('publicFiles')\\n      .upload(`${fileName || file.name}`, file, {\\n        cacheControl: '3600',\\n        upsert: false\\n      });\\n\\n    if (error) {\\n      throw new Error(error.message);\\n    }\\n\\n    setStatus(`File uploaded successfully to publicFiles/${data.path}`, 'success');\\n  } catch (error) {\\n    console.error('Upload error:', error.message);\\n    setStatus(`Upload failed: ${error.message}`, 'error');\\n  } finally {\\n    toggleButtonState(false, 'Upload');\\n  }\\n}\",\n    \"formBuilder\": \"function formBuilder(formElement, args) {\\n  if (globals.isFormBuilded) return;\\n\\n  if (!(formElement instanceof HTMLFormElement)) {\\n    console.warn('Invalid formElement provided. Expected an HTMLFormElement.');\\n    return;\\n  }\\n\\n  const title = createElement('h1', {\\n    textContent: 'Upload File Form',\\n    classList: ['uploadFileForm-title']\\n  });\\n\\n  const statusDiv = createElement('div', {\\n    id: 'uploadFileForm-formStatus',\\n    classList: ['uploadFileForm-status']\\n  });\\n\\n  const fileNameLabel = createElement('label', {\\n    htmlFor: 'uploadFileForm-fileName',\\n    textContent: 'File Name:',\\n    classList: ['uploadFileForm-label']\\n  });\\n\\n  const fileNameInput = createElement('input', {\\n    type: 'text',\\n    id: 'uploadFileForm-fileName',\\n    name: 'fileName',\\n    placeholder: 'Optional: Enter a file name',\\n    classList: ['uploadFileForm-input']\\n  });\\n\\n  const fileUploadContainer = createElement('div', {\\n    classList: ['uploadFileForm-file-upload-container']\\n  });\\n\\n  const fileInput = createElement('input', {\\n    type: 'file',\\n    id: 'uploadFileForm-fileUpload',\\n    name: 'fileUpload',\\n    classList: ['uploadFileForm-file-upload-input'],\\n    style: 'display: none;'\\n  });\\n\\n  const fileUploadLabel = createElement('label', {\\n    htmlFor: 'uploadFileForm-fileUpload',\\n    classList: ['uploadFileForm-file-upload-label']\\n  });\\n\\n  fileUploadLabel.innerHTML = `\\n    <i class=\\\\\\\"fas fa-upload\\\\\\\"></i>\\n    <span>Drag & Drop your file here or Click to Browse</span>\\n  `;\\n\\n  fileUploadContainer.addEventlistener('dragover', (e) => {\\n    e.preventDefault();\\n    fileUploadContainer.classList.add('uploadFileForm-file-upload-container-dragover');\\n  });\\n\\n  fileUploadContainer.addEventlistener('dragleave', () => {\\n    fileUploadContainer.classList.remove('uploadFileForm-file-upload-container-dragover');\\n  });\\n\\n  fileUploadContainer.addEventlistener('drop', (e) => {\\n    e.preventDefault();\\n    fileUploadContainer.classList.remove('uploadFileForm-file-upload-container-dragover');\\n    fileInput.files = e.dataTransfer.files;\\n  });\\n\\n  fileInput.addEventlistener('change', () => {\\n    if (fileInput.files.length > 0) {\\n      fileUploadLabel.querySelector('span').textContent = fileInput.files[0].name;\\n    } else {\\n      fileUploadLabel.querySelector('span').textContent = 'Drag & Drop your file here or Click to Browse';\\n    }\\n  });\\n\\n  fileUploadContainer.appendChild(fileInput);\\n  fileUploadContainer.appendChild(fileUploadLabel);\\n\\n  globals.submitButton = createElement('button', {\\n    type: 'submit',\\n    textContent: 'Upload',\\n    classList: ['uploadFileForm-button']\\n  });\\n\\n  formElement.appendChild(title);\\n  formElement.appendChild(statusDiv);\\n  formElement.appendChild(fileNameLabel);\\n  formElement.appendChild(fileNameInput);\\n  formElement.appendChild(fileUploadContainer);\\n  formElement.appendChild(globals.submitButton);\\n\\n  globals.isFormBuilded = true;\\n}\",\n    \"helperFunctions\": [\n      \"function createElement(tag, options) {\\n  const element = document.createElement(tag);\\n  if (options.dataset) {\\n    for (const key in options.dataset) {\\n      if (options.dataset.hasOwnProperty(key)) {\\n        element.dataset[key] = options.dataset[key];\\n      }\\n    }\\n    delete options.dataset;\\n  }\\n  Object.assign(element, options);\\n  return element;\\n}\",\n      \"function setStatus(message, type) {\\n  const statusDiv = document.getElementById('uploadFileForm-formStatus');\\n  statusDiv.textContent = message;\\n  statusDiv.className = 'uploadFileForm-status ' + type;\\n}\",\n      \"function toggleButtonState(disabled, text) {\\n  globals.submitButton.disabled = disabled;\\n  globals.submitButton.textContent = text;\\n}\"\n    ],\n    \"globals\": {\n      \"isFormBuilded\": false,\n      \"submitButton\": null\n    },\n    \"imports\": [\n      \"import { createClient } from '@supabase/supabase-js'\"\n    ],\n    \"CSS\": {\n      \"styles\": \".uploadFileForm {\\n  max-width: 600px;\\n  margin: 30px auto;\\n  padding: 40px;\\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\\n  border-radius: 15px;\\n  background-color: #f7f7f7;\\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\\n}\\n\\n.uploadFileForm-title {\\n  text-align: center;\\n  color: #333;\\n  margin-bottom: 30px;\\n  font-size: 2.4em;\\n}\\n\\n.uploadFileForm-label {\\n  display: block;\\n  margin-bottom: 10px;\\n  color: #555;\\n  font-weight: bold;\\n}\\n\\n.uploadFileForm-input {\\n  width: 100%;\\n  padding: 12px;\\n  margin-bottom: 25px;\\n  border: 1px solid #ddd;\\n  border-radius: 8px;\\n  box-sizing: border-box;\\n  font-size: 1em;\\n  color: #444;\\n}\\n\\n.uploadFileForm-button {\\n  background-color: #4CAF50;\\n  color: white;\\n  padding: 14px 24px;\\n  border: none;\\n  border-radius: 8px;\\n  cursor: pointer;\\n  font-size: 1.1em;\\n  transition: background-color 0.3s ease;\\n}\\n\\n.uploadFileForm-button:hover {\\n  background-color: #45a049;\\n}\\n\\n.uploadFileForm-status {\\n  margin-bottom: 25px;\\n  padding: 12px;\\n  border-radius: 8px;\\n  font-weight: bold;\\n  text-align: center;\\n}\\n\\n.uploadFileForm-status.error {\\n  background-color: #f8d7da;\\n  color: #721c24;\\n  border: 1px solid #f5c6cb;\\n}\\n\\n.uploadFileForm-status.success {\\n  background-color: #d4edda;\\n  color: #155724;\\n  border: 1px solid #c3e6cb;\\n}\\n\\n.uploadFileForm-file-upload-container {\\n  position: relative;\\n  width: 100%;\\n  padding: 30px;\\n  border: 2px dashed #ccc;\\n  border-radius: 10px;\\n  text-align: center;\\n  cursor: pointer;\\n  transition: all 0.3s ease;\\n}\\n\\n.uploadFileForm-file-upload-container:hover,\\n.uploadFileForm-file-upload-container-dragover {\\n  background-color: rgba(76, 175, 80, 0.1);\\n  border-color: #4CAF50;\\n}\\n\\n.uploadFileForm-file-upload-label {\\n  display: block;\\n  color: #777;\\n  font-size: 1.1em;\\n}\\n\\n.uploadFileForm-file-upload-label i {\\n  font-size: 2em;\\n  margin-bottom: 10px;\\n  display: block;\\n}\\n\\n.uploadFileForm-file-upload-input {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  width: 100%;\\n  height: 100%;\\n  opacity: 0;\\n  cursor: pointer;\\n}\\n/* Add more visual enhancements and animations as desired */\"\n    }\n  },\n  \"expect\": \"Ensure that Supabase is set up with the necessary environment variables (NEXT_PUBLIC_SUPABASE_URL, NEXT_PUBLIC_SUPABASE_ANON_KEY) and the @supabase/supabase-js library is installed. Create a storage bucket named publicFiles. The form should have an input for the file name and a drag-and-drop area for file uploads. \"\n}\n```",
          },
        ],
      },
      {
        role: "user",
        parts: [{ text: "hi\n" }],
      },
      {
        role: "model",
        parts: [
          {
            text: '```json\n{\n  "error": {\n    "message": "Invalid JSON input or incorrect input structure.",\n    "status": 400,\n    "details": "The provided input is not valid JSON or does not conform to the expected AIFormProps interface. Please refer to the documentation for the correct input format.",\n    "code": "INVALID_INPUT"\n  }\n}\n```',
          },
        ],
      },
      {
        role: "user",
        parts: [
          {
            text: "Do not show generic details. Give specific details in details property in error response",
          },
          {
            text: '```json\n{\n  "prompt": "Create a multi-step form",\n  "listener": "onSubmit",\n  "filename": "multiStepForm",\n  "layout": "one-column",\n  "styleHint": "Material Design",\n  "validate": "Validate each step before proceeding.  Ensure all required fields are filled.",\n  "fieldDefinitions": [\n    {\n      "id": "name",\n      "fieldDefination": "Text input for the user\'s full name",\n      "styleHint": "outlined",\n      "layout": "full-width",\n      "validate": "Required"\n    },\n    {\n      "id": "email",\n      "fieldDefination": "Email input for the user\'s email address",\n      "styleHint": "outlined",\n      "layout": "full-width",\n      "validate": "Required; Must be a valid email address"\n    },\n    {\n      "id": "phone",\n      "fieldDefination": "Telephone input for the user\'s phone number",\n      "styleHint": "outlined",\n      "layout": "full-width",\n      "validate": "Required"\n    },\n    {\n      "id": "address",\n      "fieldDefination": "Text input for the user\'s street address",\n      "styleHint": "outlined",\n      "layout": "full-width",\n      "validate": "Required"\n    },\n    {\n      "id": "city",\n      "fieldDefination": "Text input for the user\'s city",\n      "styleHint": "outlined",\n      "layout": "full-width",\n      "validate": "Required"\n    },\n    {\n      "id": "postalCode",\n      "fieldDefination": "Text input for the user\'s postal code",\n      "styleHint": "outlined",\n      "layout": "full-width",\n      "validate": "Required"\n    },\n    {\n      "id": "message",\n      "fieldDefination": "Textarea for a longer message from the user",\n      "styleHint": "outlined",\n      "layout": "full-width",\n      "validate": ""\n    },\n    {\n      "id": "experience",\n      "fieldDefination": "Text for user experience",\n      "styleHint": "outlined",\n      "layout": "full-width",\n      "validate": ""\n    },\n    {\n      "id": "skills",\n      "fieldDefination": "Text input for user skills",\n      "styleHint": "outlined",\n      "layout": "full-width",\n      "validate": ""\n    }\n  ],\n  "multiStep": {\n    "common": "Each step should have a clear heading and a progress indicator.  Use consistent styling for inputs and labels.",\n    "steps": [\n      {\n        "title": "Personal Information",\n        "fields": ["@name", "@email", "@phone"],\n        "desc": "Collect basic contact information.",\n        "validate": "All fields in this step are required."\n      },\n      {\n        "title": "Address Information",\n        "fields": ["@address", "@city", "@postalCode"],\n        "desc": "Collect the user\'s address details.",\n        "validate": "All fields in this step are required."\n      },\n      {\n        "title": "Additional Information",\n        "fields": ["@message", "@experience", "@skills"],\n        "desc": "Gather any additional details, like a message and user\'s experience.",\n        "styleHint": "Material Design",\n        "validate": ""\n      }\n    ]\n  }\n}\n```\n',
          },
        ],
      },
      {
        role: "model",
        parts: [
          {
            text: "```json\n{\n  \"thoughts\": \"Create a clean, functional multi-step form with proper step navigation, form validation, improved styling, and correct submission handling.\",\n  \"response\": {\n    \"eventListener\": \"function main(event, args) {\\n  event.preventDefault();\\n\\n  // Get the form data\\n  const formData = new FormData(document.querySelector('.multiStepForm'));\\n  const data = Object.fromEntries(formData.entries());\\n\\n  // Validate the form data before submission\\n  const errors = validateForm(data);\\n  if (errors.length > 0) {\\n    setStatus(errors.join('\\\\n'), 'error');\\n    return;\\n  }\\n\\n  // Set loading state\\n  setStatus('Processing your submission...', 'pending');\\n  toggleButtonState(true, 'Submitting...');\\n\\n  // Simulate API call with timeout\\n  setTimeout(() => {\\n    // For demo purposes: trigger error if name is 'error'\\n    console.log(data)\\n    if (data['multiStepForm-name'].toLowerCase() === 'error') {\\n      setStatus('Submission failed. Please try again.', 'error');\\n      toggleButtonState(false, 'Submit');\\n    } else {\\n      console.log('Form submitted successfully:', data);\\n      setStatus(\\n        'Thank you! Your form has been submitted successfully.',\\n        'success',\\n      );\\n      toggleButtonState(false, 'Done');\\n      document.querySelector('.multiStepForm').reset();\\n      showStep(1); // Reset to first step\\n    }\\n  }, 2000);\\n}\",\n    \"formBuilder\": \"function formBuilder(formElement, args) {\\n  if (globals.isFormBuilt) return;\\n\\n  if (!(formElement instanceof HTMLFormElement)) {\\n    console.error('Invalid form element. Expected HTMLFormElement.');\\n    return;\\n  }\\n\\n  formElement.classList.add('multiStepForm');\\n\\n  const header = createElement('div', {\\n    classList: ['multiStepForm-header'],\\n  });\\n\\n  const title = createElement('h2', {\\n    textContent: 'Contact Form',\\n    classList: ['multiStepForm-title'],\\n  });\\n\\n  const statusContainer = createElement('div', {\\n    id: 'multiStepForm-formStatus',\\n    classList: ['multiStepForm-status'],\\n  });\\n\\n  header.appendChild(title);\\n  header.appendChild(statusContainer);\\n  formElement.appendChild(header);\\n\\n  const progressBar = createElement('div', {\\n    classList: ['multiStepForm-progress'],\\n  });\\n\\n  const steps = [\\n    { id: 1, label: 'Personal Info' },\\n    { id: 2, label: 'Contact Details' },\\n    { id: 3, label: 'Confirmation' },\\n  ];\\n\\n  steps.forEach((step) => {\\n    const stepElement = createElement('div', {\\n      id: `multiStepForm-progress-step-${step.id}`,\\n      classList: ['multiStepForm-progress-step', step.id === 1 ? 'active' : ''],\\n    });\\n\\n    const stepNumber = createElement('div', {\\n      classList: ['multiStepForm-progress-number'],\\n      textContent: step.id,\\n    });\\n\\n    const stepLabel = createElement('div', {\\n      classList: ['multiStepForm-progress-label'],\\n      textContent: step.label,\\n    });\\n\\n    stepElement.appendChild(stepNumber);\\n    stepElement.appendChild(stepLabel);\\n    progressBar.appendChild(stepElement);\\n\\n    if (step.id < steps.length) {\\n      const connector = createElement('div', {\\n        classList: ['multiStepForm-progress-connector'],\\n      });\\n      progressBar.appendChild(connector);\\n    }\\n  });\\n\\n  formElement.appendChild(progressBar);\\n\\n  const formContent = createElement('div', {\\n    classList: ['multiStepForm-content'],\\n  });\\n\\n  const step1 = createFormStep(1, 'Personal Information');\\n  step1.appendChild(createFormField('multiStepForm-name', 'Full Name', 'text', true));\\n  step1.appendChild(createFormField('multiStepForm-email', 'Email Address', 'email', true));\\n  step1.appendChild(createFormField('multiStepForm-phone', 'Phone Number', 'tel', true));\\n\\n  const step2 = createFormStep(2, 'Address Information');\\n  step2.appendChild(createFormField('multiStepForm-address', 'Street Address', 'text', true));\\n  step2.appendChild(createFormField('multiStepForm-city', 'City', 'text', true));\\n  step2.appendChild(createFormField('multiStepForm-postalCode', 'Postal Code', 'text', true));\\n\\n  const step3 = createFormStep(3, 'Additional Information');\\n  step3.appendChild(createFormField('multiStepForm-message', 'Your Message', 'textarea'));\\n  step3.appendChild(createFormField('multiStepForm-experience', 'Experience', 'text'));\\n  step3.appendChild(createFormField('multiStepForm-skills', 'Skills', 'text'));\\n\\n  formContent.appendChild(step1);\\n  formContent.appendChild(step2);\\n  formContent.appendChild(step3);\\n  formElement.appendChild(formContent);\\n\\n  const buttonContainer = createElement('div', {\\n    classList: ['multiStepForm-buttons'],\\n  });\\n\\n  const prevButton = createElement('button', {\\n    type: 'button',\\n    textContent: 'Previous',\\n    classList: ['multiStepForm-button', 'multiStepForm-prev-button'],\\n    id: 'multiStepForm-prevButton',\\n  });\\n\\n  const nextButton = createElement('button', {\\n    type: 'button',\\n    textContent: 'Next',\\n    classList: ['multiStepForm-button', 'multiStepForm-next-button'],\\n    id: 'multiStepForm-nextButton',\\n  });\\n\\n  globals.submitButton = createElement('button', {\\n    type: 'submit',\\n    textContent: 'Submit',\\n    classList: ['multiStepForm-button', 'multiStepForm-submit-button'],\\n    id: 'multiStepForm-submitButton',\\n  });\\n\\n  buttonContainer.appendChild(prevButton);\\n  buttonContainer.appendChild(nextButton);\\n  buttonContainer.appendChild(globals.submitButton);\\n  formElement.appendChild(buttonContainer);\\n\\n  prevButton.addEventlistener('click', () => {\\n    if (globals.currentStep > 1) {\\n      showStep(globals.currentStep - 1);\\n    }\\n  });\\n\\n  nextButton.addEventlistener('click', () => {\\n    if (validateCurrentStep(globals.currentStep)) {\\n      if (globals.currentStep < 3) {\\n        showStep(globals.currentStep + 1);\\n      }\\n    }\\n  });\\n\\n  formElement.addEventlistener('submit', (e) => main(e, args));\\n\\n  globals.isFormBuilt = true;\\n  showStep(1);\\n\\n  function createFormStep(stepNumber, title) {\\n    const stepContainer = createElement('div', {\\n      id: `multiStepForm-step${stepNumber}`,\\n      classList: [\\n        'multiStepForm-step-container',\\n        stepNumber === 1 ? 'active' : '',\\n      ],\\n    });\\n\\n    const stepTitle = createElement('h3', {\\n      textContent: title,\\n      classList: ['multiStepForm-step-title'],\\n    });\\n\\n    stepContainer.appendChild(stepTitle);\\n    return stepContainer;\\n  }\\n\\n  function createFormField(name, label, type, required = false, options = []) {\\n    const fieldContainer = createElement('div', {\\n      classList: ['multiStepForm-field'],\\n    });\\n\\n    const labelElement = createElement('label', {\\n      htmlFor: name,\\n      textContent: required ? `${label} *` : label,\\n      classList: ['multiStepForm-label'],\\n    });\\n    fieldContainer.appendChild(labelElement);\\n\\n    if (type === 'textarea') {\\n      const textarea = createElement('textarea', {\\n        id: name,\\n        name: name,\\n        required: required,\\n        classList: ['multiStepForm-input', 'multiStepForm-textarea'],\\n      });\\n      fieldContainer.appendChild(textarea);\\n    } else if (type === 'select') {\\n      const select = createElement('select', {\\n        id: name,\\n        name: name,\\n        required: required,\\n        classList: ['multiStepForm-input', 'multiStepForm-select'],\\n      });\\n\\n      options.forEach((option) => {\\n        const optionElement = createElement('option', {\\n          value: option.value,\\n          textContent: option.label,\\n        });\\n        select.appendChild(optionElement);\\n      });\\n      fieldContainer.appendChild(select);\\n    } else {\\n      const input = createElement('input', {\\n        type: type,\\n        id: name,\\n        name: name,\\n        required: required,\\n        classList: ['multiStepForm-input'],\\n      });\\n      fieldContainer.appendChild(input);\\n    }\\n    return fieldContainer;\\n  }\\n}\",\n    \"helperFunctions\": [\n      \"function createElement(tag, props, children) {\\n  if(!typeof props == 'object'){\\n    console.error('props is not an object')\\n    return\\n  }\\n  const element = document.createElement(tag);\\n\\n  // Apply properties to the element\\n  Object.entries(props).forEach(([key, value]) => {\\n    if (key === 'classList' && Array.isArray(value)) {\\n      value.forEach(cls => cls && element.classList.add(cls));\\n    } else if (key === 'style' && typeof value === 'object') {\\n      Object.assign(element.style, value);\\n    } else if (key === 'dataset' && typeof value === 'object') {\\n      Object.entries(value).forEach(([dataKey, dataValue]) => {\\n        element.dataset[dataKey] = dataValue;\\n      });\\n    } else if (key === 'attributes' && typeof value === 'object') {\\n      Object.entries(value).forEach(([attrName, attrValue]) => {\\n        element.setAttribute(attrName, attrValue);\\n      });\\n    } else {\\n      element[key] = value;\\n    }\\n  });\\n\\n  // Append children\\n  if (Array.isArray(children)) {\\n    children.forEach(child => {\\n      if (child instanceof Node) {\\n        element.appendChild(child);\\n      }\\n    });\\n  }\\n\\n  return element;\\n}\",\n      \"function showStep(stepNumber) {\\n  // Update global current step\\n  globals.currentStep = stepNumber;\\n\\n  // Hide all step containers\\n  const stepContainers = document.querySelectorAll(\\n    '.multiStepForm-step-container',\\n  );\\n\\n  stepContainers.forEach((container) => {\\n    container.classList.remove('active');\\n  });\\n\\n  // Show current step container\\n  const currentContainer = document.getElementById(`multiStepForm-step${stepNumber}`);\\n  if (currentContainer) {\\n    currentContainer.classList.add('active');\\n  }\\n\\n  // Update progress indicators\\n  const progressSteps = document.querySelectorAll(\\n    '.multiStepForm-progress-step',\\n  );\\n  progressSteps.forEach((step, index) => {\\n    const stepId = index + 1;\\n    if (stepId < stepNumber) {\\n      step.classList.add('completed');\\n      step.classList.remove('active');\\n    } else if (stepId === stepNumber) {\\n      step.classList.add('active');\\n      step.classList.remove('completed');\\n    } else {\\n      step.classList.remove('active', 'completed');\\n    }\\n  });\\n\\n  // Update connector lines\\n  const connectors = document.querySelectorAll(\\n    '.multiStepForm-progress-connector',\\n  );\\n  connectors.forEach((connector, index) => {\\n    if (index + 1 < stepNumber) {\\n      connector.classList.add('active');\\n    } else {\\n      connector.classList.remove('active');\\n    }\\n  });\\n\\n  // Update button visibility\\n  const prevButton = document.getElementById('multiStepForm-prevButton');\\n  const nextButton = document.getElementById('multiStepForm-nextButton');\\n  const submitButton = document.getElementById('multiStepForm-submitButton');\\n\\n  if (prevButton && nextButton && submitButton) {\\n    prevButton.style.display = stepNumber === 1 ? 'none' : 'inline-block';\\n    nextButton.style.display = stepNumber === 3 ? 'none' : 'inline-block';\\n    submitButton.style.display = stepNumber === 3 ? 'inline-block' : 'none';\\n  }\\n\\n  // Clear any previous status messages\\n  setStatus('', '');\\n}\",\n      \"function setStatus(message, type) {\\n  const statusElement = document.getElementById('multiStepForm-formStatus');\\n  if (!statusElement) return;\\n\\n  statusElement.textContent = message;\\n  statusElement.className = 'multiStepForm-status';\\n\\n  if (type) {\\n    statusElement.classList.add(`multiStepForm-status-${type}`);\\n  }\\n\\n  // Scroll to status message if there's an error\\n  if (type === 'error') {\\n    statusElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\\n  }\\n}\",\n      \"function toggleButtonState(disabled, text) {\\n  if (globals.submitButton) {\\n    globals.submitButton.disabled = disabled;\\n    if (text) {\\n      globals.submitButton.textContent = text;\\n    }\\n  }\\n}\",\n      \"function validateCurrentStep(stepNumber) {\\n  const currentStep = document.getElementById(`multiStepForm-step${stepNumber}`);\\n  if (!currentStep) return true;\\n\\n  const requiredFields = currentStep.querySelectorAll('[required]');\\n  let isValid = true;\\n  let errorMessages = [];\\n\\n  requiredFields.forEach((field) => {\\n    if (!field.value.trim()) {\\n      isValid = false;\\n      field.classList.add('multiStepForm-error');\\n\\n      // Get field label\\n      const labelFor = document.querySelector(`label[for=\\\"${field.id}\\\"]`);\\n      const fieldName = labelFor\\n        ? labelFor.textContent.replace(' *', '')\\n        : field.name;\\n\\n      errorMessages.push(`${fieldName} is required`);\\n    } else {\\n      field.classList.remove('multiStepForm-error');\\n    }\\n  });\\n\\n  // Show error message if validation fails\\n  if (!isValid) {\\n    setStatus(\\n      `Please complete all required fields: ${errorMessages.join(', ')}`,\\n      'error',\\n    );\\n  }\\n\\n  return isValid;\\n}\",\n      \"function validateForm(data) {\\n  const errors = [];\\n\\n  // Validate required fields\\n  if (!data['multiStepForm-name'] || !data['multiStepForm-name'].trim()) {\\n    errors.push('Name is required');\\n  }\\n\\n  if (!data['multiStepForm-email'] || !data['multiStepForm-email'].trim()) {\\n    errors.push('Email is required');\\n  } else if (!/^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+$/.test(data['multiStepForm-email'])) {\\n    errors.push('Email is not valid');\\n  }\\n\\n  return errors;\\n}\"\n    ],\n    \"globals\": {\n      \"isFormBuilt\": false,\n      \"submitButton\": null,\n      \"currentStep\": 1\n    },\n    \"CSS\": {\n      \"styles\": \"/* Base form styling */\\n.multiStepForm {\\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\\n  max-width: 700px;\\n  margin: 40px auto;\\n  background-color: #ffffff;\\n  border-radius: 10px;\\n  box-shadow: 0 5px 25px rgba(0, 0, 0, 0.1);\\n  padding: 30px;\\n  color: #333;\\n}\\n\\n/* Header */\\n.multiStepForm-header {\\n  margin-bottom: 30px;\\n}\\n\\n.multiStepForm-title {\\n  font-size: 24px;\\n  color: #2c3e50;\\n  margin: 0 0 15px 0;\\n  text-align: center;\\n}\\n\\n/* Progress bar */\\n.multiStepForm-progress {\\n  display: flex;\\n  align-items: center;\\n  justify-content: space-between;\\n  margin-bottom: 40px;\\n}\\n\\n.multiStepForm-progress-step {\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  position: relative;\\n  z-index: 1;\\n}\\n\\n.multiStepForm-progress-number {\\n  width: 35px;\\n  height: 35px;\\n  border-radius: 50%;\\n  background-color: #e9ecef;\\n  color: #6c757d;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  font-weight: bold;\\n  margin-bottom: 8px;\\n  transition: all 0.3s ease;\\n}\\n\\n.multiStepForm-progress-label {\\n  font-size: 14px;\\n  color: #6c757d;\\n  font-weight: 500;\\n  transition: all 0.3s ease;\\n}\\n\\n.multiStepForm-progress-connector {\\n  flex-grow: 1;\\n  height: 3px;\\n  background-color: #e9ecef;\\n  margin: 0 10px;\\n  position: relative;\\n  top: -13px;\\n  z-index: 0;\\n  transition: background-color 0.3s ease;\\n}\\n\\n.multiStepForm-progress-connector.active {\\n  background-color: #3498db;\\n}\\n\\n.multiStepForm-progress-step.active .multiStepForm-progress-number {\\n  background-color: #3498db;\\n  color: white;\\n}\\n\\n.multiStepForm-progress-step.active .multiStepForm-progress-label {\\n  color: #3498db;\\n  font-weight: 600;\\n}\\n\\n.multiStepForm-progress-step.completed .multiStepForm-progress-number {\\n  background-color: #2ecc71;\\n  color: white;\\n}\\n\\n/* Form content */\\n.multiStepForm-content {\\n  margin-bottom: 30px;\\n}\\n\\n.multiStepForm-step-container {\\n  display: none;\\n  animation: fadeIn 0.4s ease;\\n}\\n\\n.multiStepForm-step-container.active {\\n  display: block;\\n}\\n\\n@keyframes fadeIn {\\n  from { opacity: 0; transform: translateY(10px); }\\n  to { opacity: 1; transform: translateY(0); }\\n}\\n\\n.multiStepForm-step-title {\\n  font-size: 18px;\\n  margin-bottom: 20px;\\n  color: #2c3e50;\\n  padding-bottom: 10px;\\n  border-bottom: 1px solid #eee;\\n}\\n\\n/* Form fields */\\n.multiStepForm-field {\\n  margin-bottom: 20px;\\n}\\n\\n.multiStepForm-label {\\n  display: block;\\n  margin-bottom: 8px;\\n  font-weight: 500;\\n  color: #4a5568;\\n}\\n\\n.multiStepForm-input {\\n  width: 100%;\\n  padding: 12px 15px;\\n  font-size: 15px;\\n  border: 1px solid #ddd;\\n  border-radius: 5px;\\n  background-color: #f9fafb;\\n  transition: border 0.3s, box-shadow 0.3s;\\n}\\n\\n.multiStepForm-input:focus {\\n  border-color: #3498db;\\n  box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);\\n  outline: none;\\n  background-color: #fff;\\n}\\n\\n.multiStepForm-textarea {\\n  min-height: 100px;\\n  resize: vertical;\\n}\\n\\n.multiStepForm-select {\\n  appearance: none;\\n  background-image: url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23606F7B' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'/%3E%3C/svg%3E\\\");\\n  background-repeat: no-repeat;\\n  background-position: right 10px center;\\n  background-size: 16px;\\n}\\n\\n.multiStepForm-checkbox-field {\\n  margin-top: 25px;\\n}\\n\\n.multiStepForm-checkbox-wrapper {\\n  display: flex;\\n  align-items: center;\\n}\\n\\n.multiStepForm-checkbox {\\n  margin-right: 10px;\\n  width: 18px;\\n  height: 18px;\\n}\\n\\n.multiStepForm-checkbox-label {\\n  font-size: 15px;\\n  font-weight: normal;\\n}\\n\\n/* Input validation */\\n.multiStepForm-input.multiStepForm-error {\\n  border-color: #e74c3c;\\n  background-color: #fff8f8;\\n}\\n\\n/* Status messages */\\n.multiStepForm-status {\\n  padding: 12px;\\n  margin-bottom: 20px;\\n  border-radius: 5px;\\n  text-align: center;\\n  display: none;\\n}\\n\\n.multiStepForm-status:not(:empty) {\\n  display: block;\\n}\\n\\n.multiStepForm-status-error {\\n  background-color: #fff5f5;\\n  color: #e53e3e;\\n  border: 1px solid #feb2b2;\\n}\\n\\n.multiStepForm-status-success {\\n  background-color: #f0fff4;\\n  color: #38a169;\\n  border: 1px solid #c6f6d5;\\n}\\n\\n.multiStepForm-status-pending {\\n  background-color: #ebf8ff;\\n  color: #3182ce;\\n  border: 1px solid #bee3f8;\\n}\\n\\n/* Buttons */\\n.multiStepForm-buttons {\\n  display: flex;\\n  justify-content: space-between;\\n}\\n\\n.multiStepForm-button {\\n  padding: 12px 20px;\\n  border: none;\\n  border-radius: 5px;\\n  font-size: 16px;\\n  font-weight: 600;\\n  cursor: pointer;\\n  transition: all 0.2s ease;\\n  min-width: 120px;\\n}\\n\\n.multiStepForm-prev-button {\\n  background-color: #f7fafc;\\n  color: #4a5568;\\n  border: 1px solid #e2e8f0;\\n}\\n\\n.multiStepForm-prev-button:hover {\\n  background-color: #edf2f7;\\n}\\n\\n.multiStepForm-next-button {\\n  background-color: #3498db;\\n  color: white;\\n  margin-left: auto;\\n}\\n\\n.multiStepForm-next-button:hover {\\n  background-color: #2980b9;\\n}\\n\\n.multiStepForm-submit-button {\\n  background-color: #2ecc71;\\n  color: white;\\n  margin-left: auto;\\n}\\n\\n.multiStepForm-submit-button:hover {\\n  background-color: #27ae60;\\n}\\n\\n.multiStepForm-button:disabled {\\n  opacity: 0.7;\\n  cursor: not-allowed;\\n}\\n\\n/* Responsive adjustments */\\n@media (max-width: 768px) {\\n  .multiStepForm {\\n    padding: 20px;\\n    margin: 20px;\\n  }\\n  \\n  .multiStepForm-progress-label {\\n    font-size: 12px;\\n  }\\n  \\n  .multiStepForm-button {\\n    min-width: 100px;\\n    padding: 10px 15px;\\n    font-size: 14px;\\n  }\\n}\\n\\n@media (max-width: 480px) {\\n  .multiStepForm-progress-label {\\n    display: none;\\n  }\\n  \\n  .multiStepForm-buttons {\\n    flex-direction: column;\\n    gap: 10px;\\n  }\\n  \\n  .multiStepForm-button {\\n    width: 100%;\\n  }\\n  \\n  .multiStepForm-next-button,\\n  .multiStepForm-submit-button {\\n    margin-left: 0;\\n  }\\n}\"\n    }\n  },\n  \"expect\": \"Create an HTML element with a form class of 'testMultistep'. The form should include proper step functionality, validation, and improved styling.\"\n}\n```",
          },
        ],
      },
      {
        role: "user",
        parts: [
          {
            text: '```json\n{\n  "prompt": "Create a simple 2-step form",\n  "listener": "onSubmit",\n  "filename": "simpleMultiStepForm",\n  "layout": "one-column",\n  "styleHint": "basic",\n  "validate": "Validate each step.",\n  "fieldDefinitions": [\n    {\n      "id": "name",\n      "fieldDefination": "Text input for name",\n      "validate": "Required"\n    },\n    {\n      "id": "email",\n      "fieldDefination": "Email input",\n      "validate": "Required; Must be a valid email"\n    },\n    {\n      "id": "message",\n      "fieldDefination": "Textarea for message",\n      "validate": ""\n    }\n  ],\n  "multiStep": {\n    "common": "Simple steps with basic styling.",\n    "steps": [\n      {\n        "title": "Contact Info",\n        "fields": ["@name", "@email"],\n        "desc": "Enter your name and email.",\n        "validate": "Name and email are required."\n      },\n      {\n        "title": "Message",\n        "fields": ["@message"],\n        "desc": "Enter your message.",\n        "validate": ""\n      }\n    ]\n  }\n}\n```',
          },
        ],
      },
      {
        role: "model",
        parts: [
          {
            text: "```json\n{\n  \"thoughts\": \"The prompt is to create a simple 2-step form with name, email, and message fields. The `filename` is set to `simpleMultiStepForm`, the `listener` is `onSubmit`, and other properties like layout, styleHint, and validate are also given.\",\n  \"response\": {\n    \"eventListener\": \"function main(event, args) {\\n  event.preventDefault();\\n\\n  // Get the form data\\n  const formData = new FormData(document.querySelector('.simpleMultiStepForm'));\\n  const data = Object.fromEntries(formData.entries());\\n\\n  // Validate the form data before submission\\n  const errors = validateForm(data);\\n  if (errors.length > 0) {\\n    setStatus(errors.join('\\\\n'), 'error');\\n    return;\\n  }\\n\\n  // Set loading state\\n  setStatus('Processing your submission...', 'pending');\\n  toggleButtonState(true, 'Submitting...');\\n\\n  // Simulate API call with timeout\\n  setTimeout(() => {\\n    console.log('Form submitted successfully:', data);\\n    setStatus(\\n      'Thank you! Your form has been submitted successfully.',\\n      'success'\\n    );\\n    toggleButtonState(false, 'Done');\\n  }, 2000);\\n}\",\n    \"formBuilder\": \"function formBuilder(formElement, args) {\\n  if (globals.isFormBuilt) return;\\n\\n  if (!(formElement instanceof HTMLFormElement)) {\\n    console.error('Invalid form element. Expected HTMLFormElement.');\\n    return;\\n  }\\n\\n  formElement.classList.add('simpleMultiStepForm');\\n\\n  const header = createElement('div', {\\n    classList: ['simpleMultiStepForm-header'],\\n  });\\n\\n  const title = createElement('h2', {\\n    textContent: 'Quick Inquiry',\\n    classList: ['simpleMultiStepForm-title'],\\n  });\\n\\n  const statusContainer = createElement('div', {\\n    id: 'simpleMultiStepForm-formStatus',\\n    classList: ['simpleMultiStepForm-status']\\n  });\\n\\n  header.appendChild(title);\\n  header.appendChild(statusContainer);\\n  formElement.appendChild(header);\\n\\n  const progressBar = createElement('div', {\\n    classList: ['simpleMultiStepForm-progress']\\n  });\\n\\n  const steps = [\\n    { id: 1, label: 'Contact Info' },\\n    { id: 2, label: 'Message' }\\n  ];\\n\\n  steps.forEach((step) => {\\n    const stepElement = createElement('div', {\\n      id: `simpleMultiStepForm-progress-step-${step.id}`,\\n      classList: ['simpleMultiStepForm-progress-step', step.id === 1 ? 'active' : '']\\n    });\\n\\n    const stepNumber = createElement('div', {\\n      classList: ['simpleMultiStepForm-progress-number'],\\n      textContent: step.id\\n    });\\n\\n    const stepLabel = createElement('div', {\\n      classList: ['simpleMultiStepForm-progress-label'],\\n      textContent: step.label\\n    });\\n\\n    stepElement.appendChild(stepNumber);\\n    stepElement.appendChild(stepLabel);\\n    progressBar.appendChild(stepElement);\\n\\n    if (step.id < steps.length) {\\n      const connector = createElement('div', {\\n        classList: ['simpleMultiStepForm-progress-connector']\\n      });\\n      progressBar.appendChild(connector);\\n    }\\n  });\\n\\n  formElement.appendChild(progressBar);\\n\\n  const formContent = createElement('div', {\\n    classList: ['simpleMultiStepForm-content']\\n  });\\n\\n  const step1 = createFormStep(1, 'Contact Information');\\n  step1.appendChild(createFormField('simpleMultiStepForm-name', 'Full Name', 'text', true));\\n  step1.appendChild(createFormField('simpleMultiStepForm-email', 'Email Address', 'email', true));\\n\\n  const step2 = createFormStep(2, 'Message');\\n  step2.appendChild(createFormField('simpleMultiStepForm-message', 'Your Message', 'textarea'));\\n\\n  formContent.appendChild(step1);\\n  formContent.appendChild(step2);\\n  formElement.appendChild(formContent);\\n\\n  const buttonContainer = createElement('div', {\\n    classList: ['simpleMultiStepForm-buttons']\\n  });\\n\\n  const prevButton = createElement('button', {\\n    type: 'button',\\n    textContent: 'Previous',\\n    classList: ['simpleMultiStepForm-button', 'simpleMultiStepForm-prev-button'],\\n    id: 'simpleMultiStepForm-prevButton'\\n  });\\n\\n  const nextButton = createElement('button', {\\n    type: 'button',\\n    textContent: 'Next',\\n    classList: ['simpleMultiStepForm-button', 'simpleMultiStepForm-next-button'],\\n    id: 'simpleMultiStepForm-nextButton'\\n  });\\n\\n  globals.submitButton = createElement('button', {\\n    type: 'submit',\\n    textContent: 'Submit',\\n    classList: ['simpleMultiStepForm-button', 'simpleMultiStepForm-submit-button'],\\n    id: 'simpleMultiStepForm-submitButton'\\n  });\\n\\n  buttonContainer.appendChild(prevButton);\\n  buttonContainer.appendChild(nextButton);\\n  buttonContainer.appendChild(globals.submitButton);\\n  formElement.appendChild(buttonContainer);\\n\\n  prevButton.addEventlistener('click', () => {\\n    if (globals.currentStep > 1) {\\n      showStep(globals.currentStep - 1);\\n    }\\n  });\\n\\n  nextButton.addEventlistener('click', () => {\\n    if (validateCurrentStep(globals.currentStep)) {\\n      if (globals.currentStep < 2) {\\n        showStep(globals.currentStep + 1);\\n      }\\n    }\\n  });\\n\\n  formElement.addEventlistener('submit', (e) => main(e, args));\\n\\n  globals.isFormBuilt = true;\\n  showStep(1);\\n\\n  function createFormStep(stepNumber, title) {\\n    const stepContainer = createElement('div', {\\n      id: `simpleMultiStepForm-step${stepNumber}`,\\n      classList: [\\n        'simpleMultiStepForm-step-container',\\n        stepNumber === 1 ? 'active' : ''\\n      ]\\n    });\\n\\n    const stepTitle = createElement('h3', {\\n      textContent: title,\\n      classList: ['simpleMultiStepForm-step-title']\\n    });\\n\\n    stepContainer.appendChild(stepTitle);\\n    return stepContainer;\\n  }\\n\\n  function createFormField(name, label, type, required = false, options = []) {\\n    const fieldContainer = createElement('div', {\\n      classList: ['simpleMultiStepForm-field']\\n    });\\n\\n    const labelElement = createElement('label', {\\n      htmlFor: name,\\n      textContent: required ? `${label} *` : label,\\n      classList: ['simpleMultiStepForm-label']\\n    });\\n    fieldContainer.appendChild(labelElement);\\n\\n    if (type === 'textarea') {\\n      const textarea = createElement('textarea', {\\n        id: name,\\n        name: name,\\n        required: required,\\n        classList: ['simpleMultiStepForm-input', 'simpleMultiStepForm-textarea']\\n      });\\n      fieldContainer.appendChild(textarea);\\n    } else {\\n      const input = createElement('input', {\\n        type: type,\\n        id: name,\\n        name: name,\\n        required: required,\\n        classList: ['simpleMultiStepForm-input']\\n      });\\n      fieldContainer.appendChild(input);\\n    }\\n    return fieldContainer;\\n  }\\n}\",\n    \"helperFunctions\": [\n      \"function createElement(tag, props, children) {\\n  if(!typeof props == 'object'){\\n    console.error('props is not an object')\\n    return\\n  }\\n  const element = document.createElement(tag);\\n\\n  // Apply properties to the element\\n  Object.entries(props).forEach(([key, value]) => {\\n    if (key === 'classList' && Array.isArray(value)) {\\n      value.forEach(cls => cls && element.classList.add(cls));\\n    } else if (key === 'style' && typeof value === 'object') {\\n      Object.assign(element.style, value);\\n    } else if (key === 'dataset' && typeof value === 'object') {\\n      Object.entries(value).forEach(([dataKey, dataValue]) => {\\n        element.dataset[dataKey] = dataValue;\\n      });\\n    } else if (key === 'attributes' && typeof value === 'object') {\\n      Object.entries(value).forEach(([attrName, attrValue]) => {\\n        element.setAttribute(attrName, attrValue);\\n      });\\n    } else {\\n      element[key] = value;\\n    }\\n  });\\n\\n  // Append children\\n  if (Array.isArray(children)) {\\n    children.forEach(child => {\\n      if (child instanceof Node) {\\n        element.appendChild(child);\\n      }\\n    });\\n  }\\n\\n  return element;\\n}\",\n      \"function showStep(stepNumber) {\\n  // Update global current step\\n  globals.currentStep = stepNumber;\\n\\n  // Hide all step containers\\n  const stepContainers = document.querySelectorAll(\\n    '.simpleMultiStepForm-step-container'\\n  );\\n\\n  stepContainers.forEach((container) => {\\n    container.classList.remove('active');\\n  });\\n\\n  // Show current step container\\n  const currentContainer = document.getElementById(`simpleMultiStepForm-step${stepNumber}`);\\n  if (currentContainer) {\\n    currentContainer.classList.add('active');\\n  }\\n\\n  // Update progress indicators\\n  const progressSteps = document.querySelectorAll(\\n    '.simpleMultiStepForm-progress-step'\\n  );\\n  progressSteps.forEach((step, index) => {\\n    const stepId = index + 1;\\n    if (stepId < stepNumber) {\\n      step.classList.add('completed');\\n      step.classList.remove('active');\\n    } else if (stepId === stepNumber) {\\n      step.classList.add('active');\\n      step.classList.remove('completed');\\n    } else {\\n      step.classList.remove('active', 'completed');\\n    }\\n  });\\n\\n  // Update connector lines\\n  const connectors = document.querySelectorAll(\\n    '.simpleMultiStepForm-progress-connector'\\n  );\\n  connectors.forEach((connector, index) => {\\n    if (index + 1 < stepNumber) {\\n      connector.classList.add('active');\\n    } else {\\n      connector.classList.remove('active');\\n    }\\n  });\\n\\n  // Update button visibility\\n  const prevButton = document.getElementById('simpleMultiStepForm-prevButton');\\n  const nextButton = document.getElementById('simpleMultiStepForm-nextButton');\\n  const submitButton = document.getElementById('simpleMultiStepForm-submitButton');\\n\\n  if (prevButton && nextButton && submitButton) {\\n    prevButton.style.display = stepNumber === 1 ? 'none' : 'inline-block';\\n    nextButton.style.display = stepNumber === 2 ? 'none' : 'inline-block';\\n    submitButton.style.display = stepNumber === 2 ? 'inline-block' : 'none';\\n  }\\n\\n  // Clear any previous status messages\\n  setStatus('', '');\\n}\",\n      \"function setStatus(message, type) {\\n  const statusElement = document.getElementById('simpleMultiStepForm-formStatus');\\n  if (!statusElement) return;\\n\\n  statusElement.textContent = message;\\n  statusElement.className = 'simpleMultiStepForm-status';\\n\\n  if (type) {\\n    statusElement.classList.add(`simpleMultiStepForm-status-${type}`);\\n  }\\n\\n  // Scroll to status message if there's an error\\n  if (type === 'error') {\\n    statusElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\\n  }\\n}\",\n      \"function toggleButtonState(disabled, text) {\\n  if (globals.submitButton) {\\n    globals.submitButton.disabled = disabled;\\n    if (text) {\\n      globals.submitButton.textContent = text;\\n    }\\n  }\\n}\",\n      \"function validateCurrentStep(stepNumber) {\\n  const currentStep = document.getElementById(`simpleMultiStepForm-step${stepNumber}`);\\n  if (!currentStep) return true;\\n\\n  const requiredFields = currentStep.querySelectorAll('[required]');\\n  let isValid = true;\\n  let errorMessages = [];\\n\\n  requiredFields.forEach((field) => {\\n    if (!field.value.trim()) {\\n      isValid = false;\\n      field.classList.add('simpleMultiStepForm-error');\\n\\n      // Get field label\\n      const labelFor = document.querySelector(`label[for=\\\"${field.id}\\\"]`);\\n      const fieldName = labelFor\\n        ? labelFor.textContent.replace(' *', '')\\n        : field.name;\\n\\n      errorMessages.push(`${fieldName} is required`);\\n    } else {\\n      field.classList.remove('simpleMultiStepForm-error');\\n    }\\n  });\\n\\n  // Show error message if validation fails\\n  if (!isValid) {\\n    setStatus(\\n      `Please complete all required fields: ${errorMessages.join(', ')}`,\\n      'error'\\n    );\\n  }\\n\\n  return isValid;\\n}\",\n      \"function validateForm(data) {\\n  const errors = [];\\n\\n  // Validate required fields\\n  if (!data['simpleMultiStepForm-name'] || !data['simpleMultiStepForm-name'].trim()) {\\n    errors.push('Name is required');\\n  }\\n\\n  if (!data['simpleMultiStepForm-email'] || !data['simpleMultiStepForm-email'].trim()) {\\n    errors.push('Email is required');\\n  } else if (!/^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+$/.test(data['simpleMultiStepForm-email'])) {\\n    errors.push('Email is not valid');\\n  }\\n\\n  return errors;\\n}\"\n    ],\n    \"globals\": {\n      \"isFormBuilt\": false,\n      \"submitButton\": null,\n      \"currentStep\": 1\n    },\n    \"CSS\": {\n      \"styles\": \".simpleMultiStepForm {\\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\\n  max-width: 700px;\\n  margin: 40px auto;\\n  background-color: #ffffff;\\n  border-radius: 10px;\\n  box-shadow: 0 5px 25px rgba(0, 0, 0, 0.1);\\n  padding: 30px;\\n  color: #333;\\n}\\n\\n.simpleMultiStepForm-header {\\n  margin-bottom: 30px;\\n}\\n\\n.simpleMultiStepForm-title {\\n  font-size: 24px;\\n  color: #2c3e50;\\n  margin: 0 0 15px 0;\\n  text-align: center;\\n}\\n\\n.simpleMultiStepForm-progress {\\n  display: flex;\\n  align-items: center;\\n  justify-content: space-between;\\n  margin-bottom: 40px;\\n}\\n\\n.simpleMultiStepForm-progress-step {\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  position: relative;\\n  z-index: 1;\\n}\\n\\n.simpleMultiStepForm-progress-number {\\n  width: 35px;\\n  height: 35px;\\n  border-radius: 50%;\\n  background-color: #e9ecef;\\n  color: #6c757d;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  font-weight: bold;\\n  margin-bottom: 8px;\\n  transition: all 0.3s ease;\\n}\\n\\n.simpleMultiStepForm-progress-label {\\n  font-size: 14px;\\n  color: #6c757d;\\n  font-weight: 500;\\n  transition: all 0.3s ease;\\n}\\n\\n.simpleMultiStepForm-progress-connector {\\n  flex-grow: 1;\\n  height: 3px;\\n  background-color: #e9ecef;\\n  margin: 0 10px;\\n  position: relative;\\n  top: -13px;\\n  z-index: 0;\\n  transition: background-color 0.3s ease;\\n}\\n\\n.simpleMultiStepForm-progress-connector.active {\\n  background-color: #3498db;\\n}\\n\\n.simpleMultiStepForm-progress-step.active .simpleMultiStepForm-progress-number {\\n  background-color: #3498db;\\n  color: white;\\n}\\n\\n.simpleMultiStepForm-progress-step.active .simpleMultiStepForm-progress-label {\\n  color: #3498db;\\n  font-weight: 600;\\n}\\n\\n.simpleMultiStepForm-progress-step.completed .simpleMultiStepForm-progress-number {\\n  background-color: #2ecc71;\\n  color: white;\\n}\\n\\n.simpleMultiStepForm-content {\\n  margin-bottom: 30px;\\n}\\n\\n.simpleMultiStepForm-step-container {\\n  display: none;\\n  animation: fadeIn 0.4s ease;\\n}\\n\\n.simpleMultiStepForm-step-container.active {\\n  display: block;\\n}\\n\\n@keyframes fadeIn {\\n  from { opacity: 0; transform: translateY(10px); }\\n  to { opacity: 1; transform: translateY(0); }\\n}\\n\\n.simpleMultiStepForm-step-title {\\n  font-size: 18px;\\n  margin-bottom: 20px;\\n  color: #2c3e50;\\n  padding-bottom: 10px;\\n  border-bottom: 1px solid #eee;\\n}\\n\\n.simpleMultiStepForm-field {\\n  margin-bottom: 20px;\\n}\\n\\n.simpleMultiStepForm-label {\\n  display: block;\\n  margin-bottom: 8px;\\n  font-weight: 500;\\n  color: #4a5568;\\n}\\n\\n.simpleMultiStepForm-input {\\n  width: 100%;\\n  padding: 12px 15px;\\n  font-size: 15px;\\n  border: 1px solid #ddd;\\n  border-radius: 5px;\\n  background-color: #f9fafb;\\n  transition: border 0.3s, box-shadow 0.3s;\\n}\\n\\n.simpleMultiStepForm-input:focus {\\n  border-color: #3498db;\\n  box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);\\n  outline: none;\\n  background-color: #fff;\\n}\\n\\n.simpleMultiStepForm-textarea {\\n  min-height: 100px;\\n  resize: vertical;\\n}\\n\\n.simpleMultiStepForm-select {\\n  appearance: none;\\n  background-image: url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23606F7B' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'/%3E%3C/svg%3E\\\");\\n  background-repeat: no-repeat;\\n  background-position: right 10px center;\\n  background-size: 16px;\\n}\\n\\n.simpleMultiStepForm-checkbox-field {\\n  margin-top: 25px;\\n}\\n\\n.simpleMultiStepForm-checkbox-wrapper {\\n  display: flex;\\n  align-items: center;\\n}\\n\\n.simpleMultiStepForm-checkbox {\\n  margin-right: 10px;\\n  width: 18px;\\n  height: 18px;\\n}\\n\\n.simpleMultiStepForm-checkbox-label {\\n  font-size: 15px;\\n  font-weight: normal;\\n}\\n\\n/* Input validation */\\n.simpleMultiStepForm-input.simpleMultiStepForm-error {\\n  border-color: #e74c3c;\\n  background-color: #fff8f8;\\n}\\n\\n/* Status messages */\\n.simpleMultiStepForm-status {\\n  padding: 12px;\\n  margin-bottom: 20px;\\n  border-radius: 5px;\\n  text-align: center;\\n  display: none;\\n}\\n\\n.simpleMultiStepForm-status:not(:empty) {\\n  display: block;\\n}\\n\\n.simpleMultiStepForm-status-error {\\n  background-color: #fff5f5;\\n  color: #e53e3e;\\n  border: 1px solid #feb2b2;\\n}\\n\\n.simpleMultiStepForm-status-success {\\n  background-color: #f0fff4;\\n  color: #38a169;\\n  border: 1px solid #c6f6d5;\\n}\\n\\n.simpleMultiStepForm-status-pending {\\n  background-color: #ebf8ff;\\n  color: #3182ce;\\n  border: 1px solid #bee3f8;\\n}\\n\\n/* Buttons */\\n.simpleMultiStepForm-buttons {\\n  display: flex;\\n  justify-content: space-between;\\n}\\n\\n.simpleMultiStepForm-button {\\n  padding: 12px 20px;\\n  border: none;\\n  border-radius: 5px;\\n  font-size: 16px;\\n  font-weight: 600;\\n  cursor: pointer;\\n  transition: all 0.2s ease;\\n  min-width: 120px;\\n}\\n\\n.simpleMultiStepForm-prev-button {\\n  background-color: #f7fafc;\\n  color: #4a5568;\\n  border: 1px solid #e2e8f0;\\n}\\n\\n.simpleMultiStepForm-prev-button:hover {\\n  background-color: #edf2f7;\\n}\\n\\n.simpleMultiStepForm-next-button {\\n  background-color: #3498db;\\n  color: white;\\n  margin-left: auto;\\n}\\n\\n.simpleMultiStepForm-next-button:hover {\\n  background-color: #2980b9;\\n}\\n\\n.simpleMultiStepForm-submit-button {\\n  background-color: #2ecc71;\\n  color: white;\\n  margin-left: auto;\\n}\\n\\n.simpleMultiStepForm-submit-button:hover {\\n  background-color: #27ae60;\\n}\\n\\n.simpleMultiStepForm-button:disabled {\\n  opacity: 0.7;\\n  cursor: not-allowed;\\n}\\n\\n/* Responsive adjustments */\\n@media (max-width: 768px) {\\n  .simpleMultiStepForm {\\n    padding: 20px;\\n    margin: 20px;\\n  }\\n  \\n  .simpleMultiStepForm-progress-label {\\n    font-size: 12px;\\n  }\\n  \\n  .simpleMultiStepForm-button {\\n    min-width: 100px;\\n    padding: 10px 15px;\\n    font-size: 14px;\\n  }\\n}\\n\\n@media (max-width: 480px) {\\n  .simpleMultiStepForm-progress-label {\\n    display: none;\\n  }\\n  \\n  .simpleMultiStepForm-buttons {\\n    flex-direction: column;\\n    gap: 10px;\\n  }\\n  \\n  .simpleMultiStepForm-button {\\n    width: 100%;\\n  }\\n  \\n  .simpleMultiStepForm-next-button,\\n  .simpleMultiStepForm-submit-button {\\n    margin-left: 0;\\n  }\\n}\"\n    }\n  },\n  \"expect\": \"Create an HTML element with a form class of 'testMultistep'. The form should include proper step functionality, validation, and improved styling.\"\n}\n```",
          },
        ],
      },
      {
        role: "user",
        parts: [
          {
            text: '"expect" field in output JSON must be simple string inside single or double quotes, no bullets, heading, new line is allowed. If you got it response with "Got it"',
          },
        ],
      },
      {
        role: "model",
        parts: [{ text: "Got it\n" }],
      },
      {
        role: "user",
        parts: [
          {
            text: '```json\n{\n  "prompt": "A multi-step form for user profile creation. Insert user to \'uesrs\' table",\n  "filename": "multiStepUserProfile",\n  "listener": "onSubmit",\n  "supportingProps": {\n    "database": {\n      "name": "supabase",\n      "envGuide": "Use NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY environment variables."\n    }\n  },\n  "fieldDefinitions": [\n    { "id": "firstName", "fieldDefination": "First Name", "validate": "Required" },\n    { "id": "lastName", "fieldDefination": "Last Name", "validate": "Required" },\n    { "id": "email", "fieldDefination": "Email", "validate": "Required, valid email" },\n    { "id": "phone", "fieldDefination": "Phone Number", "validate": "Required, numeric" },\n    { "id": "address", "fieldDefination": "Address" },\n    { "id": "city", "fieldDefination": "City" },\n    { "id": "country", "fieldDefination": "Country" },\n    { "id": "occupation", "fieldDefination": "Occupation" },\n    { "id": "company", "fieldDefination": "Company" },\n    { "id": "skills", "fieldDefination": "Skills, comma-separated" },\n    { "id": "interests", "fieldDefination": "Interests, comma-separated" },\n    { "id": "newsletter", "fieldDefination": "Subscribe to Newsletter", "styleHint": "Checkbox" },\n    { "id": "notifications", "fieldDefination": "Notification Frequency", "styleHint": "Dropdown: Daily, Weekly, Monthly" }\n  ],\n  "multiStep": {\n    "steps": [\n      {\n        "title": "Personal Information",\n        "fields": ["firstName", "lastName", "email", "phone"],\n        "desc": "Please provide your basic personal information.",\n        "layout": "two-column",\n        "styleHint": "Modern, clean design",\n        "validate": "All fields are required."\n      },\n      {\n        "title": "Address Details",\n        "fields": ["address", "city", "country"],\n        "desc": "Enter your address details.",\n        "layout": "one-column",\n        "styleHint": "Simple, straightforward layout",\n        "validate": "Address and city are required."\n      },\n      {\n        "title": "Professional Details",\n        "fields": ["occupation", "company", "skills"],\n        "desc": "Provide details about your professional background.",\n        "layout": "two-column",\n        "styleHint": "Professional, business-like style",\n        "validate": "Occupation and company are required."\n      },\n      {\n        "title": "Preferences",\n        "fields": ["interests", "newsletter", "notifications"],\n        "desc": "Set your preferences.",\n        "layout": "one-column",\n        "styleHint": "User-friendly, preference-focused design",\n        "validate": "Select at least one interest."\n      }\n    ]\n  },\n  "styleHint": "Comprehensive user profile creation form"\n}\n```',
          },
        ],
      },
      {
        role: "model",
        parts: [
          {
            text: "```json\n{\n  \"thoughts\": \"The prompt requests a multi-step form for user profile creation, with various sections for personal, address, professional, and preference details. I will now also add code to address issue with \\\"active classes\\\" which result in all sections being visible simultaneously, negating the intended step-by-step navigation. I will ensure correct implementation of active classes to control section visibility and enable proper navigation.\",\n  \"response\": {\n    \"eventListener\": \"async function main(event, args) {\\n  event.preventDefault();\\n  setStatus('', '');\\n  toggleButtonState(true, 'Creating Profile...');\\n\\n  const formData = new FormData(event.currentTarget);\\n  const userData = {\\n    firstName: formData.get('firstName'),\\n    lastName: formData.get('lastName'),\\n    email: formData.get('email'),\\n    phone: formData.get('phone'),\\n    address: formData.get('address'),\\n    city: formData.get('city'),\\n    country: formData.get('country'),\\n    occupation: formData.get('occupation'),\\n    company: formData.get('company'),\\n    skills: formData.get('skills'),\\n    interests: formData.get('interests'),\\n    newsletter: formData.get('newsletter') === 'on', // Convert to boolean\\n    notifications: formData.get('notifications')\\n  };\\n\\n  // Perform validation\\n  const errors = validateForm(userData);\\n  if (errors.length > 0) {\\n    setStatus(errors.join('\\\\n'), 'error');\\n    toggleButtonState(false, 'Create Profile');\\n    return;\\n  }\\n\\n  try {\\n    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\\n    const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\\n    const supabase = createClient(supabaseUrl, supabaseKey);\\n\\n    const { data, error } = await supabase\\n      .from('users')\\n      .insert([userData]);\\n\\n    if (error) {\\n      throw new Error(error.message);\\n    }\\n\\n    console.log('User profile created:', data);\\n    setStatus('User profile created successfully!', 'success');\\n  } catch (error) {\\n    console.error('Error creating profile:', error);\\n    setStatus(`Error creating profile: ${error.message}`, 'error');\\n  } finally {\\n    toggleButtonState(false, 'Create Profile');\\n  }\\n}\",\n    \"formBuilder\": \"function formBuilder(formElement, args) {\\n  if (globals.isFormBuilt) return;\\n\\n  if (!(formElement instanceof HTMLFormElement)) {\\n    console.warn('Invalid formElement provided. Expected an HTMLFormElement.');\\n    return;\\n  }\\n  formElement.classList.add('multiStepUserProfile');\\n\\n  const header = createElement('div', {\\n    classList: ['multiStepUserProfile-header']\\n  });\\n  const title = createElement('h1', {\\n    textContent: 'Create User Profile',\\n    classList: ['multiStepUserProfile-title']\\n  });\\n  const statusContainer = createElement('div', {\\n    id: 'multiStepUserProfile-formStatus',\\n    classList: ['multiStepUserProfile-status']\\n  });\\n  header.appendChild(title);\\n  header.appendChild(statusContainer);\\n  formElement.appendChild(header);\\n  const progressBar = createElement('div', {\\n    classList: ['multiStepUserProfile-progress']\\n  });\\n  const stepsData = args.multiStep.steps; // Access steps from supportingProps\\n\\n  stepsData.forEach((step, index) => {\\n    const stepElement = createElement('div', {\\n      id: `multiStepUserProfile-progress-step-${index + 1}`,\\n      classList: [\\n        'multiStepUserProfile-progress-step',\\n        index === 0 ? 'active' : ''\\n      ]\\n    });\\n    const stepNumber = createElement('div', {\\n      classList: ['multiStepUserProfile-progress-number'],\\n      textContent: index + 1\\n    });\\n    const stepLabel = createElement('div', {\\n      classList: ['multiStepUserProfile-progress-label'],\\n      textContent: step.title\\n    });\\n\\n    stepElement.appendChild(stepNumber);\\n    stepElement.appendChild(stepLabel);\\n    progressBar.appendChild(stepElement);\\n\\n    if (index < stepsData.length - 1) {\\n      const connector = createElement('div', {\\n        classList: ['multiStepUserProfile-progress-connector']\\n      });\\n      progressBar.appendChild(connector);\\n    }\\n  });\\n  formElement.appendChild(progressBar);\\n  const formContent = createElement('div', {\\n    classList: ['multiStepUserProfile-content']\\n  });\\n\\n  // Dynamically create form steps\\n  stepsData.forEach((step, index) => {\\n    const stepContainer = createFormStep(index + 1, step.title, args.multiStep.steps.length);\\n    let layoutClass = '';\\n    if (step.layout === 'two-column') {\\n      layoutClass = 'multiStepUserProfile-step-container-two-column';\\n    }\\n    stepContainer.classList.add(layoutClass);\\n    // Dynamically create form fields for each step\\n    step.fields.forEach(fieldId => {\\n      const field = args.fieldDefinitions.find(f => f.id === fieldId);\\n      if (field) {\\n        const formField = createFormField(field, `multiStepUserProfile-${fieldId}`, field.fieldDefination, field.validate);\\n        stepContainer.appendChild(formField);\\n      }\\n    });\\n    formContent.appendChild(stepContainer);\\n  });\\n\\n  formElement.appendChild(formContent);\\n  const buttonContainer = createElement('div', {\\n    classList: ['multiStepUserProfile-buttons']\\n  });\\n\\n  const prevButton = createElement('button', {\\n    type: 'button',\\n    textContent: 'Previous',\\n    classList: ['multiStepUserProfile-button', 'multiStepUserProfile-prev-button'],\\n    id: 'multiStepUserProfile-prevButton'\\n  });\\n\\n  const nextButton = createElement('button', {\\n    type: 'button',\\n    textContent: 'Next',\\n    classList: ['multiStepUserProfile-button', 'multiStepUserProfile-next-button'],\\n    id: 'multiStepUserProfile-nextButton'\\n  });\\n\\n  globals.submitButton = createElement('button', {\\n    type: 'submit',\\n    textContent: 'Create Profile',\\n    classList: ['multiStepUserProfile-button', 'multiStepUserProfile-submit-button'],\\n    id: 'multiStepUserProfile-submitButton'\\n  });\\n\\n  buttonContainer.appendChild(prevButton);\\n  buttonContainer.appendChild(nextButton);\\n  buttonContainer.appendChild(globals.submitButton);\\n  formElement.appendChild(buttonContainer);\\n  prevButton.addEventlistener('click', () => {\\n    if (globals.currentStep > 1) {\\n      showStep(globals.currentStep - 1);\\n    }\\n  });\\n  nextButton.addEventlistener('click', () => {\\n    if (validateCurrentStep(globals.currentStep)) {\\n      if (globals.currentStep < stepsData.length) {\\n        showStep(globals.currentStep + 1);\\n      }\\n    }\\n  });\\n\\n  formElement.addEventlistener('submit', (e) => main(e, args));\\n  globals.isFormBuilt = true;\\n  showStep(1);\\n}\",\n    \"helperFunctions\": [\n      \"function createElement(tag, options) {\\n  const element = document.createElement(tag);\\n  if (options.dataset) {\\n    for (const key in options.dataset) {\\n      if (options.dataset.hasOwnProperty(key)) {\\n        element.dataset[key] = options.dataset[key];\\n      }\\n    }\\n    delete options.dataset;\\n  }\\n  Object.assign(element, options);\\n  return element;\\n}\",\n      \"function createFormStep(stepNumber, title, totalSteps) {\\n  const stepContainer = createElement('div', {\\n    id: `multiStepUserProfile-step${stepNumber}`,\\n    classList: [\\n      'multiStepUserProfile-step-container',\\n      stepNumber === 1 ? 'active' : ''\\n    ]\\n  });\\n  const stepTitle = createElement('h2', {\\n    textContent: title,\\n    classList: ['multiStepUserProfile-step-title']\\n  });\\n  stepContainer.appendChild(stepTitle);\\n  return stepContainer;\\n}\",\n      \"function createFormField(field, id, labelText, validate) {\\n  const fieldContainer = createElement('div', {\\n    classList: ['multiStepUserProfile-field']\\n  });\\n\\n  const label = createElement('label', {\\n    htmlFor: id,\\n    textContent: labelText + ':',\\n    classList: ['multiStepUserProfile-label']\\n  });\\n\\n  let input;\\n  if (field.styleHint === 'Checkbox') {\\n    input = createElement('input', {\\n      type: 'checkbox',\\n      id: id,\\n      name: field.id,\\n      classList: ['multiStepUserProfile-input', 'multiStepUserProfile-checkbox']\\n    });\\n  } else if (field.styleHint === 'Dropdown: Daily, Weekly, Monthly') {\\n    input = createElement('select', {\\n      id: id,\\n      name: field.id,\\n      classList: ['multiStepUserProfile-input']\\n    });\\n    ['Daily', 'Weekly', 'Monthly'].forEach(optionText => {\\n      const option = createElement('option', {\\n        value: optionText,\\n        textContent: optionText\\n      });\\n      input.appendChild(option);\\n    });\\n  } else {\\n    input = createElement('input', {\\n      type: 'text',\\n      id: id,\\n      name: field.id,\\n      classList: ['multiStepUserProfile-input']\\n    });\\n  }\\n  fieldContainer.appendChild(label);\\n  fieldContainer.appendChild(input);\\n\\n  return fieldContainer;\\n}\",\n      \"function setStatus(message, type) {\\n  const statusDiv = document.getElementById('multiStepUserProfile-formStatus');\\n  statusDiv.textContent = message;\\n  statusDiv.className = 'multiStepUserProfile-status ' + type;\\n}\",\n      \"function toggleButtonState(disabled, text) {\\n  globals.submitButton.disabled = disabled;\\n  globals.submitButton.textContent = text;\\n}\",\n      \"function showStep(stepNumber) {\\n    globals.currentStep = stepNumber;\\n\\n    // Hide all step containers\\n    const stepContainers = document.querySelectorAll('.multiStepUserProfile-step-container');\\n    stepContainers.forEach(container => {\\n        container.classList.remove('active');\\n    });\\n\\n    // Show current step container\\n    const currentContainer = document.getElementById(`multiStepUserProfile-step${stepNumber}`);\\n    if (currentContainer) {\\n        currentContainer.classList.add('active');\\n    }\\n\\n    // Update progress indicators\\n    const progressSteps = document.querySelectorAll('.multiStepUserProfile-progress-step');\\n    progressSteps.forEach((step, index) => {\\n        const stepId = index + 1;\\n        if (stepId < stepNumber) {\\n            step.classList.add('completed');\\n            step.classList.remove('active');\\n        } else if (stepId === stepNumber) {\\n            step.classList.add('active');\\n            step.classList.remove('completed');\\n        } else {\\n            step.classList.remove('active', 'completed');\\n        }\\n    });\\n\\n    // Update button visibility\\n    const prevButton = document.getElementById('multiStepUserProfile-prevButton');\\n    const nextButton = document.getElementById('multiStepUserProfile-nextButton');\\n    const submitButton = document.getElementById('multiStepUserProfile-submitButton');\\n\\n    prevButton.style.display = stepNumber === 1 ? 'none' : 'inline-block';\\n    nextButton.style.display = stepNumber === 4 ? 'none' : 'inline-block';\\n    submitButton.style.display = stepNumber === 4 ? 'inline-block' : 'none';\\n\\n    // Clear any previous status messages\\n    setStatus('', '');\\n}\",\n      \"function validateCurrentStep(stepNumber) {\\n  const currentStep = document.getElementById(`multiStepUserProfile-step${stepNumber}`);\\n  if (!currentStep) return true;\\n  let isValid = true;\\n  // You can implement more specific validation logic here\\n  return isValid;\\n}\",\n      \"function validateForm(data) {\\n        const errors = [];\\n\\n        // Validate required fields\\n        if (!data.firstName || !data.firstName.trim()) {\\n            errors.push('First name is required');\\n        }\\n        if (!data.lastName || !data.lastName.trim()) {\\n            errors.push('Last name is required');\\n        }\\n        if (!data.email || !data.email.trim()) {\\n            errors.push('Email is required');\\n        } else if (!/^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+$/.test(data.email)) {\\n            errors.push('Email is not valid');\\n        }\\n\\n        return errors;\\n    }\"\n    ],\n    \"globals\": {\n      \"isFormBuilt\": false,\n      \"submitButton\": null,\n      \"currentStep\": 1\n    },\n    \"imports\": [\n      \"import { createClient } from '@supabase/supabase-js'\"\n    ],\n    \"CSS\": {\n      \"styles\": \".multiStepUserProfile {\\n  font-family: 'Arial', sans-serif;\\n  max-width: 800px;\\n  margin: 20px auto;\\n  padding: 30px;\\n  border-radius: 10px;\\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\\n}\\n\\n.multiStepUserProfile-header {\\n  text-align: center;\\n  margin-bottom: 20px;\\n}\\n\\n.multiStepUserProfile-title {\\n  color: #333;\\n}\\n\\n.multiStepUserProfile-progress {\\n  display: flex;\\n  justify-content: space-between;\\n  margin-bottom: 30px;\\n}\\n\\n.multiStepUserProfile-progress-step {\\n  text-align: center;\\n}\\n\\n.multiStepUserProfile-progress-number {\\n  width: 30px;\\n  height: 30px;\\n  border-radius: 50%;\\n  background-color: #ddd;\\n  color: #555;\\n  display: inline-flex;\\n  align-items: center;\\n  justify-content: center;\\n  margin-bottom: 5px;\\n}\\n\\n.multiStepUserProfile-progress-label {\\n  font-size: 0.9em;\\n  color: #777;\\n}\\n\\n.multiStepUserProfile-progress-step.active .multiStepUserProfile-progress-number {\\n  background-color: #3498db;\\n  color: #fff;\\n}\\n\\n.multiStepUserProfile-progress-step.completed .multiStepUserProfile-progress-number {\\n  background-color: #2ecc71;\\n  color: #fff;\\n}\\n\\n.multiStepUserProfile-formStatus {\\n  margin-bottom: 20px;\\n  padding: 10px;\\n  border-radius: 5px;\\n  text-align: center;\\n}\\n\\n.multiStepUserProfile-formStatus.error {\\n  background-color: #f8d7da;\\n  color: #721c24;\\n}\\n\\n.multiStepUserProfile-formStatus.success {\\n  background-color: #d4edda;\\n  color: #155724;\\n}\\n\\n.multiStepUserProfile-buttons {\\n  text-align: right;\\n}\\n\\n.multiStepUserProfile-button {\\n  padding: 10px 20px;\\n  border: none;\\n  border-radius: 5px;\\n  cursor: pointer;\\n  font-size: 1em;\\n  margin-left: 10px;\\n}\\n\\n.multiStepUserProfile-prev-button {\\n  background-color: #f0f0f0;\\n  color: #555;\\n}\\n\\n.multiStepUserProfile-next-button,\\n.multiStepUserProfile-submit-button {\\n  background-color: #3498db;\\n  color: #fff;\\n}\\n\\n/* Multi-column layout */\\n.multiStepUserProfile-step-container-two-column {\\n  display: flex;\\n  flex-wrap: wrap;\\n  justify-content: space-between;\\n}\\n\\n.multiStepUserProfile-step-container-two-column .multiStepUserProfile-field {\\n  width: 48%; /* Adjust as needed */\\n}\\n\\n/* Basic styling for form fields */\\n.multiStepUserProfile-field {\\n    margin-bottom: 15px;\\n}\\n\\n.multiStepUserProfile-label {\\n    display: block;\\n    margin-bottom: 5px;\\n    font-weight: bold;\\n}\\n\\n.multiStepUserProfile-input {\\n    width: 100%;\\n    padding: 8px;\\n    border: 1px solid #ccc;\\n    border-radius: 4px;\\n    box-sizing: border-box;\\n}\"\n    }\n  },\n  \"expect\": \"The user must have Supabase set up with NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY environment variables. The @supabase/supabase-js library is required.  A table named 'users' should exist.The code will append element with `.multiStepUserProfile`. Make sure the provided HTML includes these elements.\"\n}\n```",
          },
        ],
      },
      {
        role: "user",
        parts: [
          {
            text: "Some problems to avoid for this and in the future:\n\n- errors.join('\\\\') not errors.join('\\'), single use of `\\` cause errors.\n- \"Failed to execute 'add' on 'DOMTokenList': The token provided must not be empty.\" Make use of some conditions or \"||\" to avoid the error. remember using \"|| '' \" is still empty string.\n- Only one section should be visible at a time, make use of active, hide, toggle etc classes.\n- The layout is not proper; the section title and input are in one row, making it ugly.\n- if database is in input there must be database operation. if collection or table name is not mention response error json.\n- The CSS; buttons, navigation, inputs are not proper and attractive. it need lots of improvement.",
          },
        ],
      },
      {
        role: "model",
        parts: [
          {
            text: 'OK, I understand. These are the key areas to focus on for future responses, particularly for multi-step forms with database interactions:\n\n*   **Error Handling:** Correctly join error messages using `errors.join(\'\\n\')` and avoid empty tokens in DOMTokenList `add` operations.\n\n*   **Multi-Step Navigation:** Ensure only one section is visible at a time by using "active", "hide", or "toggle" classes to manage the visibility of steps.\n\n*   **Layout and Styling:** Improve the layout, especially for multi-column sections, and ensure attractive and consistent styling across all form elements (inputs, buttons, navigation).\n\n*   **Database Operations:** When a database is specified, *always* include the necessary database operations in the generated code. If collection or table names are missing, return an error.\n\nI will apply these improvements in the next responses.\n',
          },
        ],
      },
      {
        role: "user",
        parts: [
          {
            text: '**Change alert**\n\nThe `fieldDefinations` array in input JSON will know have a require `type` property holding `HTMLInputTypeAttribute` to know the type of the input. The property is require and result in error json if missing.\n\nConfirm this change by responding with "I got what is changed in [the_changed_property]"',
          },
        ],
      },
      {
        role: "model",
        parts: [{ text: "I got what is changed in fieldDefinations.type\n" }],
      },
      {
        role: "user",
        parts: [
          {
            text: '**Few standards to follow to create an effective form**\n\n- When adding classes, Id, name, htmlFor etc., always prefix with "filename-" to avoid collision with other forms.\n- When creating fields for a multistep form define createFormField helperfunction with paramters id (prefix with filename), label and type.\n- Use fieldDefination to extract label from, always split the string by "," and use whatever is at the first index as label.\n- For a multisteps for htmlFor, name of input and id must be prefix with filename.\n- Always save a reference of submit, next, and prev buttons in globals to avoid querying them later.\n- In main function always use formData constructor to get form data.\n- In main correctly use field name (with filename prefix) to avoid undefined. \n- Always change the navigation as the sections change in multistep form\n- Accessing: When using formData.get(), always include the filename/prefix.\n- Processing: When creating an object to insert for storage/output, remove the filename/prefix from each key before using the data.\n- When adding a classes to any element which might me falsy always add "~#$%&&" class using or gate .i.e element.classList.add(variable || "~#$%&&").\n- Never ever use classList always use className to assign classes. like className:"cls1 cls2 ..."\n\n\nIn one short paragrahpt summarize what you have learn.',
          },
        ],
      },
      {
        role: "model",
        parts: [
          {
            text: 'I have learned to create more robust and standardized forms by prefixing all classes and IDs with the filename to prevent collisions, utilizing a dedicated `createFormField` function for consistent field generation in multi-step forms, and extracting labels from field definitions. It\'s crucial to save references to key buttons in globals for efficient access, use `FormData` for data handling, and correctly use field names with prefixes when accessing form data. The navigation should be managed as sections change and before inserting make sure to reomve form prefix. I should also add class conditionally using `"~#$%&&"` placeholder and use `className` over `classList`.\n',
          },
        ],
      },
      {
        role: "user",
        parts: [
          {
            text: '**Change alert**\n\nThe `fieldDefinations` array in input JSON will know have a require `type` property holding `HTMLInputTypeAttribute` to know the type of the input. The property is require and result in error json if missing. Remeber that fieldDefination array is still optional so if its no include in the input JSON then we don\'t need `types` which comes as a part of fieldDefinations.\n\nConfirm this change by responding with "I got what is changed in [the_changed_property]"',
          },
        ],
      },
      {
        role: "model",
        parts: [{ text: "I got what is changed in fieldDefinations.type\n" }],
      },
      {
        role: "user",
        parts: [
          {
            text: `**Few standards to follow to create an effective form**

- When adding classes, Id, name, htmlFor, etc., always prefix with "filename-" to avoid collision with other forms.
- When creating fields for a multistep form define createFormField helperfunction with paramters id (prefix with filename), label and type.
- Use fieldDefination to extract label from, always split the string by "," and use whatever is at the first index as label.
- For a multisteps for htmlFor, name of input and id must be prefix with filename.
- Always save a reference of submit, next, and prev buttons in globals to avoid querying them later.
- In main function always use formData constructor to get form data.
- In main correctly use field name (with filename prefix) to avoid undefined. 
- Always change the navigation as the sections change in multistep form
- Accessing: When using formData.get(), always include the filename/prefix.
- Processing: When creating an object to insert for storage/output, remove the filename/prefix from each key before using the data.
- When adding classes to any element which might me falsy always add "~#$%&&" class using or gate .i.e element.classList.add(variable || "~#$%&&").
- Never ever use classList always use className to assign classes. like className:"cls1 cls2 ..."
- FormBuilder is response is really important. if the prompt asks to create fields explicitly or implicitly, you have to create a proper form whos logic get inside formBuilder.
- If any mutation ID starts with 'set' or the mutationType is either 'callback' or omit, it must be a React useState hook so if you need to update this mutation and the prompt is of a nature where it need prevValues use the prev state provide in the useState hook to combine it with any new data.
- When writing thoughts and expect, make sure to use single quotes when emphasizing a word, not double quotes .i.e "this is an 'expect' "
- When creating event listener for elements (navigation buttons, dependent fields etc) never use addEventListener always pass the event within createElement helperFunction to immedietly create the listener .i.e createElement("button",{ onclick:()=>{} }).
- For controler buttons such as next, prev, submit, etc., always wrap them in a wrapper and display them flex (direction column for smaller screen and row for bigger). Then, on each button, add flex-grow: 1 for the buttons to take all space. (This is only when styleHint does not have specific instructions for these buttons.). for exampe
   - .FILENAME-buttons-wrapper { display: flex; gap: 3px; }
   - .FILENAME-button { flex-grow: 1; }
- onSubmit event is added to the form externally never try to create event on submit button just make sure button type is set to "submit".

In one short paragraph, summarize what you have learned.
`,
          },
        ],
      },
      {
        role: "model",
        parts: [
          {
            text: `I have learned to create standardized, robust, and user-friendly forms with consistent styling, prefixing all classes/IDs with the filename to avoid collisions, and using \`createFormField\` for efficient field generation. It's essential to manage navigation in multi-step forms, save references to key elements in globals, correctly handle form data using prefixes and extraction for database operations, and apply conditional classes using a placeholder. Avoid \`classList\`, always make use of className. Generate FormBuilder only when the prompt requires, ensure 'set' mutations use useState hooks with previous state and use createElement to add onclick listener and for navigation use wrapper and flex. I must make sure to use all this rules into practice so i create a great and attractive form.
`,
          },
        ],
      },
    ],
  },
};

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};

async function run(prompt: Common) {
  const inUseModel =
    (await loadConfig()).geminiConfig.model || geminiModels["GEMINIFLASH2.0"];
  const systemInstruction = await instructionHandler(prompt);
  const m = genAI.getGenerativeModel({
    model: inUseModel,
    systemInstruction,
  });

  const chatSession = m.startChat({
    generationConfig,
    history: models[prompt.element]?.history,
  });
  CLI.print(
    CLI.format(
      `\nModel "${inUseModel.toUpperCase()}" will be used for this request`,
      "bgYellow"
    )
  );
  const result = await chatSession.sendMessage(JSON.stringify(prompt));
  const lastConvo = (await chatSession.getHistory()).pop();
  if (lastConvo) models[prompt.element]?.history?.push(lastConvo);

  const resultText = result.response.text();

  return resultText;
}

export default run;
