// ../intelligent-react-components/vite.config.prod.ts
import { defineConfig } from "file:///D:/intelligent-react-components/node_modules/.pnpm/vite@5.4.15_@types+node@22.13.13/node_modules/vite/dist/node/index.js";
import dts from "file:///D:/intelligent-react-components/node_modules/.pnpm/vite-plugin-dts@4.5.3_@types+node@22.13.13_rollup@4.37.0_typescript@5.8.2_vite@5.4.15_@types+node@22.13.13_/node_modules/vite-plugin-dts/dist/index.mjs";
import { resolve } from "path";
import tsconfigPaths from "file:///D:/intelligent-react-components/node_modules/.pnpm/vite-tsconfig-paths@5.1.4_typescript@5.8.2_vite@5.4.15_@types+node@22.13.13_/node_modules/vite-tsconfig-paths/dist/index.js";
var __vite_injected_original_dirname = "D:\\intelligent-react-components";
var DIRNAME = __vite_injected_original_dirname;
var vite_config_prod_default = defineConfig({
  base: process.cwd(),
  build: {
    lib: {
      entry: resolve(DIRNAME, "./src/index.ts"),
      name: "irc",
      fileName: (format) => `index.${format}.js`,
      formats: ["cjs", "es"]
    },
    outDir: resolve(DIRNAME, "./dist"),
    sourcemap: true,
    emptyOutDir: true,
    rollupOptions: {
      external: ["react"]
    }
  },
  css: {
    postcss: {
      from: "./postcss.config.js"
    }
  },
  plugins: [
    dts({
      tsconfigPath: resolve(DIRNAME, "./tsconfig.json"),
      insertTypesEntry: true,
      entryRoot: resolve(DIRNAME, "./src"),
      rollupTypes: false
      // Add this line
    }),
    tsconfigPaths({
      root: DIRNAME
    })
    // cssInjectedByJsPlugin(),
  ]
});
export {
  vite_config_prod_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vaW50ZWxsaWdlbnQtcmVhY3QtY29tcG9uZW50cy92aXRlLmNvbmZpZy5wcm9kLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiRDpcXFxcaW50ZWxsaWdlbnQtcmVhY3QtY29tcG9uZW50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiRDpcXFxcaW50ZWxsaWdlbnQtcmVhY3QtY29tcG9uZW50c1xcXFx2aXRlLmNvbmZpZy5wcm9kLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9EOi9pbnRlbGxpZ2VudC1yZWFjdC1jb21wb25lbnRzL3ZpdGUuY29uZmlnLnByb2QudHNcIjsvLyBpbXBvcnQgeyBkZWZpbmVDb25maWcgfSBmcm9tIFwidml0ZVwiO1xyXG4vLyBpbXBvcnQgZHRzIGZyb20gXCJ2aXRlLXBsdWdpbi1kdHNcIjtcclxuLy8gaW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gXCJwYXRoXCI7XHJcbi8vIGltcG9ydCB0c2NvbmZpZ1BhdGhzIGZyb20gXCJ2aXRlLXRzY29uZmlnLXBhdGhzXCI7XHJcbi8vIGltcG9ydCBjc3NJbmplY3RlZEJ5SnNQbHVnaW4gZnJvbSBcInZpdGUtcGx1Z2luLWNzcy1pbmplY3RlZC1ieS1qc1wiO1xyXG5cclxuLy8gY29uc3QgRElSTkFNRSA9IGltcG9ydC5tZXRhLmRpcm5hbWU7XHJcbi8vIGNvbnN0IFBBVEhTID0ge1xyXG4vLyAgIGJhc2U6IHJlc29sdmUoRElSTkFNRSwgXCIuLi8uLi8uLi9cIiksXHJcbi8vICAgc3JjOiBcIi4vc3JjL2luZGV4LnRzXCIsXHJcbi8vICAgb3V0cHV0RGlyOiBcIi4vZGlzdFwiLFxyXG4vLyAgIHRzY29uZmlnUGF0aDogcmVzb2x2ZShESVJOQU1FLCBcIi4vdHNjb25maWcuanNvblwiKSxcclxuLy8gfTtcclxuLy8gZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29uZmlnKHtcclxuLy8gICBiYXNlOiBQQVRIUy5iYXNlLFxyXG4vLyAgIGJ1aWxkOiB7XHJcbi8vICAgICBsaWI6IHtcclxuLy8gICAgICAgZW50cnk6IHJlc29sdmUoRElSTkFNRSwgUEFUSFMuc3JjKSxcclxuLy8gICAgICAgbmFtZTogXCJpcmNcIiwgLy8gU2V0cyB0aGUgbmFtZSBvZiB0aGUgZ2VuZXJhdGVkIGxpYnJhcnkuXHJcbi8vICAgICAgIGZpbGVOYW1lOiAoZm9ybWF0KSA9PiBgaW5kZXguJHtmb3JtYXR9LmpzYCwgLy8gR2VuZXJhdGVzIHRoZSBvdXRwdXQgZmlsZSBuYW1lIGJhc2VkIG9uIHRoZSBmb3JtYXQuXHJcbi8vICAgICAgIGZvcm1hdHM6IFtcImNqc1wiLCBcImVzXCJdLCAvLyBTcGVjaWZpZXMgdGhlIG91dHB1dCBmb3JtYXRzIChDb21tb25KUyBhbmQgRVMgbW9kdWxlcykuXHJcbi8vICAgICB9LFxyXG4vLyAgICAgb3V0RGlyOiByZXNvbHZlKERJUk5BTUUsIFBBVEhTLm91dHB1dERpciksXHJcbi8vICAgICBzb3VyY2VtYXA6IHRydWUsXHJcbi8vICAgICBlbXB0eU91dERpcjogdHJ1ZSxcclxuLy8gICAgIHJvbGx1cE9wdGlvbnM6IHtcclxuLy8gICAgICAgZXh0ZXJuYWw6IFtcInJlYWN0XCJdLFxyXG4vLyAgICAgfSxcclxuLy8gICB9LFxyXG4vLyAgIHBsdWdpbnM6IFtcclxuLy8gICAgIGR0cyh7XHJcbi8vICAgICAgIHJvbGx1cFR5cGVzOiB0cnVlLFxyXG4vLyAgICAgICByb290OiBESVJOQU1FLFxyXG4vLyAgICAgICBpbnNlcnRUeXBlc0VudHJ5OiB0cnVlLFxyXG4vLyAgICAgICBjb21waWxlck9wdGlvbnM6IHtcclxuLy8gICAgICAgICBiYXNlVXJsOiBESVJOQU1FLFxyXG4vLyAgICAgICAgIHBhdGhzOiB7XHJcbi8vICAgICAgICAgICBcIkB0eXBlcy8qXCI6IFtyZXNvbHZlKERJUk5BTUUsIFwiLi90eXBlcy8qXCIpXSxcclxuLy8gICAgICAgICB9LFxyXG4vLyAgICAgICB9LFxyXG4vLyAgICAgfSksXHJcbi8vICAgICB0c2NvbmZpZ1BhdGhzKHtcclxuLy8gICAgICAgcm9vdDogRElSTkFNRSxcclxuLy8gICAgIH0pLFxyXG4vLyAgICAgY3NzSW5qZWN0ZWRCeUpzUGx1Z2luKCksXHJcbi8vICAgICAvLyBsaWJJbmplY3RDc3MoKSxcclxuLy8gICBdLCAvLyBVc2VzIHRoZSAndml0ZS1wbHVnaW4tZHRzJyBwbHVnaW4gZm9yIGdlbmVyYXRpbmcgVHlwZVNjcmlwdCBkZWNsYXJhdGlvbiBmaWxlcyAoZC50cykuXHJcbi8vIH0pO1xyXG5cclxuLy8gIS0tLVxyXG5pbXBvcnQgeyBkZWZpbmVDb25maWcgfSBmcm9tIFwidml0ZVwiO1xyXG5pbXBvcnQgZHRzIGZyb20gXCJ2aXRlLXBsdWdpbi1kdHNcIjtcclxuaW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gXCJwYXRoXCI7XHJcbmltcG9ydCB0c2NvbmZpZ1BhdGhzIGZyb20gXCJ2aXRlLXRzY29uZmlnLXBhdGhzXCI7XHJcbi8vIGltcG9ydCBjc3NJbmplY3RlZEJ5SnNQbHVnaW4gZnJvbSBcInZpdGUtcGx1Z2luLWNzcy1pbmplY3RlZC1ieS1qc1wiO1xyXG5cclxuY29uc3QgRElSTkFNRSA9IGltcG9ydC5tZXRhLmRpcm5hbWU7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoe1xyXG4gIGJhc2U6IHByb2Nlc3MuY3dkKCksXHJcbiAgYnVpbGQ6IHtcclxuICAgIGxpYjoge1xyXG4gICAgICBlbnRyeTogcmVzb2x2ZShESVJOQU1FLCBcIi4vc3JjL2luZGV4LnRzXCIpLFxyXG4gICAgICBuYW1lOiBcImlyY1wiLFxyXG4gICAgICBmaWxlTmFtZTogKGZvcm1hdCkgPT4gYGluZGV4LiR7Zm9ybWF0fS5qc2AsXHJcbiAgICAgIGZvcm1hdHM6IFtcImNqc1wiLCBcImVzXCJdLFxyXG4gICAgfSxcclxuICAgIG91dERpcjogcmVzb2x2ZShESVJOQU1FLCBcIi4vZGlzdFwiKSxcclxuICAgIHNvdXJjZW1hcDogdHJ1ZSxcclxuICAgIGVtcHR5T3V0RGlyOiB0cnVlLFxyXG4gICAgcm9sbHVwT3B0aW9uczoge1xyXG4gICAgICBleHRlcm5hbDogW1wicmVhY3RcIl0sXHJcbiAgICB9LFxyXG4gIH0sXHJcbiAgY3NzOiB7XHJcbiAgICBwb3N0Y3NzOiB7XHJcbiAgICAgIGZyb206IFwiLi9wb3N0Y3NzLmNvbmZpZy5qc1wiLFxyXG4gICAgfSxcclxuICB9LFxyXG4gIHBsdWdpbnM6IFtcclxuICAgIGR0cyh7XHJcbiAgICAgIHRzY29uZmlnUGF0aDogcmVzb2x2ZShESVJOQU1FLCBcIi4vdHNjb25maWcuanNvblwiKSxcclxuICAgICAgaW5zZXJ0VHlwZXNFbnRyeTogdHJ1ZSxcclxuICAgICAgZW50cnlSb290OiByZXNvbHZlKERJUk5BTUUsIFwiLi9zcmNcIiksXHJcbiAgICAgIHJvbGx1cFR5cGVzOiBmYWxzZSwgLy8gQWRkIHRoaXMgbGluZVxyXG4gICAgfSksXHJcbiAgICB0c2NvbmZpZ1BhdGhzKHtcclxuICAgICAgcm9vdDogRElSTkFNRSxcclxuICAgIH0pLFxyXG4gICAgLy8gY3NzSW5qZWN0ZWRCeUpzUGx1Z2luKCksXHJcbiAgXSxcclxufSk7XHJcbi8vICEgVmVyc2lvbiAyIC0gRE8gTk9UIERFTEVURVxyXG4vLyBpbXBvcnQgeyBkZWZpbmVDb25maWcgfSBmcm9tIFwidml0ZVwiO1xyXG4vLyBpbXBvcnQgZHRzIGZyb20gXCJ2aXRlLXBsdWdpbi1kdHNcIjtcclxuLy8gaW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gXCJwYXRoXCI7XHJcbi8vIGltcG9ydCB0c2NvbmZpZ1BhdGhzIGZyb20gXCJ2aXRlLXRzY29uZmlnLXBhdGhzXCI7XHJcbi8vIGltcG9ydCB7IGxpYkluamVjdENzcyB9IGZyb20gXCJ2aXRlLXBsdWdpbi1saWItaW5qZWN0LWNzc1wiO1xyXG5cclxuLy8gLy8gY29uc3QgRElSTkFNRSA9IGltcG9ydC5tZXRhLmRpcm5hbWU7XHJcbi8vIGNvbnN0IERJUk5BTUUgPSByZXNvbHZlKFxyXG4vLyAgIHByb2Nlc3MuY3dkKCksXHJcbi8vICAgXCIuL25vZGVfbW9kdWxlcy9pbnRlbGxpZ2VudC1yZWFjdC1jb21wb25lbnRzXCJcclxuLy8gKTtcclxuLy8gY29uc3QgUEFUSFMgPSB7XHJcbi8vICAgYmFzZTogRElSTkFNRSxcclxuLy8gICBzcmM6IHJlc29sdmUoRElSTkFNRSwgXCIuL3NyYy9pbmRleC50c1wiKSxcclxuLy8gICBvdXRwdXREaXI6IHJlc29sdmUoRElSTkFNRSwgXCIuL2Rpc3RcIiksXHJcbi8vICAgdHNjb25maWdQYXRoOiByZXNvbHZlKERJUk5BTUUsIFwiLi90c2NvbmZpZy5qc29uXCIpLFxyXG4vLyB9O1xyXG4vLyBjb25zb2xlLmxvZyhQQVRIUyk7XHJcblxyXG4vLyBleHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoe1xyXG4vLyAgIGJhc2U6IFBBVEhTLmJhc2UsXHJcbi8vICAgcHVibGljRGlyOiBcInB1YmxpY1wiLFxyXG4vLyAgIGJ1aWxkOiB7XHJcbi8vICAgICBsaWI6IHtcclxuLy8gICAgICAgZW50cnk6IFBBVEhTLnNyYyxcclxuLy8gICAgICAgbmFtZTogXCJpcmNcIiwgLy8gU2V0cyB0aGUgbmFtZSBvZiB0aGUgZ2VuZXJhdGVkIGxpYnJhcnkuXHJcbi8vICAgICAgIGZpbGVOYW1lOiAoZm9ybWF0KSA9PiBgaW5kZXguJHtmb3JtYXR9LmpzYCwgLy8gR2VuZXJhdGVzIHRoZSBvdXRwdXQgZmlsZSBuYW1lIGJhc2VkIG9uIHRoZSBmb3JtYXQuXHJcbi8vICAgICAgIGZvcm1hdHM6IFtcImNqc1wiLCBcImVzXCJdLCAvLyBTcGVjaWZpZXMgdGhlIG91dHB1dCBmb3JtYXRzIChDb21tb25KUyBhbmQgRVMgbW9kdWxlcykuXHJcbi8vICAgICB9LFxyXG4vLyAgICAgb3V0RGlyOiBQQVRIUy5vdXRwdXREaXIsXHJcbi8vICAgICBzb3VyY2VtYXA6IHRydWUsXHJcbi8vICAgICBlbXB0eU91dERpcjogdHJ1ZSxcclxuLy8gICAgIHJvbGx1cE9wdGlvbnM6IHtcclxuLy8gICAgICAgZXh0ZXJuYWw6IFtcInJlYWN0XCJdLFxyXG4vLyAgICAgfSxcclxuLy8gICB9LFxyXG4vLyAgIHBsdWdpbnM6IFtcclxuLy8gICAgIGR0cyh7XHJcbi8vICAgICAgIHJvbGx1cFR5cGVzOiB0cnVlLFxyXG4vLyAgICAgICByb290OiBQQVRIUy5iYXNlLFxyXG4vLyAgICAgICBpbnNlcnRUeXBlc0VudHJ5OiB0cnVlLFxyXG4vLyAgICAgICBjb21waWxlck9wdGlvbnM6IHtcclxuLy8gICAgICAgICBiYXNlVXJsOiBQQVRIUy5iYXNlLFxyXG4vLyAgICAgICAgIHBhdGhzOiB7XHJcbi8vICAgICAgICAgICBcIkB0eXBlcy8qXCI6IFtyZXNvbHZlKFBBVEhTLmJhc2UsIFwiLi90eXBlcy8qXCIpXSxcclxuLy8gICAgICAgICB9LFxyXG4vLyAgICAgICB9LFxyXG4vLyAgICAgfSksXHJcbi8vICAgICB0c2NvbmZpZ1BhdGhzKHtcclxuLy8gICAgICAgcm9vdDogUEFUSFMuYmFzZSxcclxuLy8gICAgIH0pLFxyXG4vLyAgICAgbGliSW5qZWN0Q3NzKCksXHJcbi8vICAgXSwgLy8gVXNlcyB0aGUgJ3ZpdGUtcGx1Z2luLWR0cycgcGx1Z2luIGZvciBnZW5lcmF0aW5nIFR5cGVTY3JpcHQgZGVjbGFyYXRpb24gZmlsZXMgKGQudHMpLlxyXG4vLyB9KTtcclxuLy8gISAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFrREEsU0FBUyxvQkFBb0I7QUFDN0IsT0FBTyxTQUFTO0FBQ2hCLFNBQVMsZUFBZTtBQUN4QixPQUFPLG1CQUFtQjtBQXJEMUIsSUFBTSxtQ0FBbUM7QUF3RHpDLElBQU0sVUFBVTtBQUVoQixJQUFPLDJCQUFRLGFBQWE7QUFBQSxFQUMxQixNQUFNLFFBQVEsSUFBSTtBQUFBLEVBQ2xCLE9BQU87QUFBQSxJQUNMLEtBQUs7QUFBQSxNQUNILE9BQU8sUUFBUSxTQUFTLGdCQUFnQjtBQUFBLE1BQ3hDLE1BQU07QUFBQSxNQUNOLFVBQVUsQ0FBQyxXQUFXLFNBQVMsTUFBTTtBQUFBLE1BQ3JDLFNBQVMsQ0FBQyxPQUFPLElBQUk7QUFBQSxJQUN2QjtBQUFBLElBQ0EsUUFBUSxRQUFRLFNBQVMsUUFBUTtBQUFBLElBQ2pDLFdBQVc7QUFBQSxJQUNYLGFBQWE7QUFBQSxJQUNiLGVBQWU7QUFBQSxNQUNiLFVBQVUsQ0FBQyxPQUFPO0FBQUEsSUFDcEI7QUFBQSxFQUNGO0FBQUEsRUFDQSxLQUFLO0FBQUEsSUFDSCxTQUFTO0FBQUEsTUFDUCxNQUFNO0FBQUEsSUFDUjtBQUFBLEVBQ0Y7QUFBQSxFQUNBLFNBQVM7QUFBQSxJQUNQLElBQUk7QUFBQSxNQUNGLGNBQWMsUUFBUSxTQUFTLGlCQUFpQjtBQUFBLE1BQ2hELGtCQUFrQjtBQUFBLE1BQ2xCLFdBQVcsUUFBUSxTQUFTLE9BQU87QUFBQSxNQUNuQyxhQUFhO0FBQUE7QUFBQSxJQUNmLENBQUM7QUFBQSxJQUNELGNBQWM7QUFBQSxNQUNaLE1BQU07QUFBQSxJQUNSLENBQUM7QUFBQTtBQUFBLEVBRUg7QUFDRixDQUFDOyIsCiAgIm5hbWVzIjogW10KfQo=
