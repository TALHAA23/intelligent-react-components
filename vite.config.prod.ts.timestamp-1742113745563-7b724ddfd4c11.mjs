// ../intelligent-react-components/vite.config.prod.ts
import { defineConfig } from "file:///D:/intelligent-react-components/node_modules/.pnpm/vite@5.4.3_@types+node@22.5.4/node_modules/vite/dist/node/index.js";
import dts from "file:///D:/intelligent-react-components/node_modules/.pnpm/vite-plugin-dts@4.1.1_@types+node@22.5.4_rollup@4.21.2_typescript@5.5.4_vite@5.4.3_@types+node@22.5.4_/node_modules/vite-plugin-dts/dist/index.mjs";
import { resolve } from "path";
import tsconfigPaths from "file:///D:/intelligent-react-components/node_modules/.pnpm/vite-tsconfig-paths@5.0.1_typescript@5.5.4_vite@5.4.3_@types+node@22.5.4_/node_modules/vite-tsconfig-paths/dist/index.js";
import cssInjectedByJsPlugin from "file:///D:/intelligent-react-components/node_modules/.pnpm/vite-plugin-css-injected-by-js@3.5.2_vite@5.4.3_@types+node@22.5.4_/node_modules/vite-plugin-css-injected-by-js/dist/esm/index.js";
var __vite_injected_original_dirname = "D:\\intelligent-react-components";
var DIRNAME = __vite_injected_original_dirname;
var PATHS = {
  base: resolve(DIRNAME, "../../../"),
  src: "./src/index.ts",
  outputDir: "./dist",
  tsconfigPath: resolve(DIRNAME, "./tsconfig.json")
};
var vite_config_prod_default = defineConfig({
  base: PATHS.base,
  build: {
    lib: {
      entry: resolve(DIRNAME, PATHS.src),
      name: "irc",
      // Sets the name of the generated library.
      fileName: (format) => `index.${format}.js`,
      // Generates the output file name based on the format.
      formats: ["cjs", "es"]
      // Specifies the output formats (CommonJS and ES modules).
    },
    outDir: resolve(DIRNAME, PATHS.outputDir),
    sourcemap: true,
    emptyOutDir: true,
    rollupOptions: {
      external: ["react"]
    }
  },
  plugins: [
    dts({
      rollupTypes: true,
      root: DIRNAME,
      insertTypesEntry: true,
      compilerOptions: {
        baseUrl: DIRNAME,
        paths: {
          "@types/*": [resolve(DIRNAME, "./types/*")]
        }
      }
    }),
    tsconfigPaths({
      root: DIRNAME
    }),
    cssInjectedByJsPlugin()
    // libInjectCss(),
  ]
  // Uses the 'vite-plugin-dts' plugin for generating TypeScript declaration files (d.ts).
});
export {
  vite_config_prod_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vaW50ZWxsaWdlbnQtcmVhY3QtY29tcG9uZW50cy92aXRlLmNvbmZpZy5wcm9kLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiRDpcXFxcaW50ZWxsaWdlbnQtcmVhY3QtY29tcG9uZW50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiRDpcXFxcaW50ZWxsaWdlbnQtcmVhY3QtY29tcG9uZW50c1xcXFx2aXRlLmNvbmZpZy5wcm9kLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9EOi9pbnRlbGxpZ2VudC1yZWFjdC1jb21wb25lbnRzL3ZpdGUuY29uZmlnLnByb2QudHNcIjtpbXBvcnQgeyBkZWZpbmVDb25maWcgfSBmcm9tIFwidml0ZVwiO1xyXG5pbXBvcnQgZHRzIGZyb20gXCJ2aXRlLXBsdWdpbi1kdHNcIjtcclxuaW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gXCJwYXRoXCI7XHJcbmltcG9ydCB0c2NvbmZpZ1BhdGhzIGZyb20gXCJ2aXRlLXRzY29uZmlnLXBhdGhzXCI7XHJcbmltcG9ydCB7IGxpYkluamVjdENzcyB9IGZyb20gXCJ2aXRlLXBsdWdpbi1saWItaW5qZWN0LWNzc1wiO1xyXG5pbXBvcnQgY3NzSW5qZWN0ZWRCeUpzUGx1Z2luIGZyb20gJ3ZpdGUtcGx1Z2luLWNzcy1pbmplY3RlZC1ieS1qcydcclxuXHJcbmNvbnN0IERJUk5BTUUgPSBpbXBvcnQubWV0YS5kaXJuYW1lO1xyXG5jb25zdCBQQVRIUyA9IHtcclxuICBiYXNlOiByZXNvbHZlKERJUk5BTUUsIFwiLi4vLi4vLi4vXCIpLFxyXG4gIHNyYzogXCIuL3NyYy9pbmRleC50c1wiLFxyXG4gIG91dHB1dERpcjogXCIuL2Rpc3RcIixcclxuICB0c2NvbmZpZ1BhdGg6IHJlc29sdmUoRElSTkFNRSwgXCIuL3RzY29uZmlnLmpzb25cIiksXHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XHJcbiAgYmFzZTogUEFUSFMuYmFzZSxcclxuICBidWlsZDoge1xyXG4gICAgbGliOiB7XHJcbiAgICAgIGVudHJ5OiByZXNvbHZlKERJUk5BTUUsIFBBVEhTLnNyYyksXHJcbiAgICAgIG5hbWU6IFwiaXJjXCIsIC8vIFNldHMgdGhlIG5hbWUgb2YgdGhlIGdlbmVyYXRlZCBsaWJyYXJ5LlxyXG4gICAgICBmaWxlTmFtZTogKGZvcm1hdCkgPT4gYGluZGV4LiR7Zm9ybWF0fS5qc2AsIC8vIEdlbmVyYXRlcyB0aGUgb3V0cHV0IGZpbGUgbmFtZSBiYXNlZCBvbiB0aGUgZm9ybWF0LlxyXG4gICAgICBmb3JtYXRzOiBbXCJjanNcIiwgXCJlc1wiXSwgLy8gU3BlY2lmaWVzIHRoZSBvdXRwdXQgZm9ybWF0cyAoQ29tbW9uSlMgYW5kIEVTIG1vZHVsZXMpLlxyXG4gICAgfSxcclxuICAgIG91dERpcjogcmVzb2x2ZShESVJOQU1FLCBQQVRIUy5vdXRwdXREaXIpLFxyXG4gICAgc291cmNlbWFwOiB0cnVlLFxyXG4gICAgZW1wdHlPdXREaXI6IHRydWUsXHJcbiAgICByb2xsdXBPcHRpb25zOiB7XHJcbiAgICAgIGV4dGVybmFsOiBbXCJyZWFjdFwiXSxcclxuICAgIH0sXHJcbiAgfSxcclxuICBwbHVnaW5zOiBbXHJcbiAgICBkdHMoe1xyXG4gICAgICByb2xsdXBUeXBlczogdHJ1ZSxcclxuICAgICAgcm9vdDogRElSTkFNRSxcclxuICAgICAgaW5zZXJ0VHlwZXNFbnRyeTogdHJ1ZSxcclxuICAgICAgY29tcGlsZXJPcHRpb25zOiB7XHJcbiAgICAgICAgYmFzZVVybDogRElSTkFNRSxcclxuICAgICAgICBwYXRoczoge1xyXG4gICAgICAgICAgXCJAdHlwZXMvKlwiOiBbcmVzb2x2ZShESVJOQU1FLCBcIi4vdHlwZXMvKlwiKV0sXHJcbiAgICAgICAgfSxcclxuICAgICAgfSxcclxuICAgIH0pLFxyXG4gICAgdHNjb25maWdQYXRocyh7XHJcbiAgICAgIHJvb3Q6IERJUk5BTUUsXHJcbiAgICB9KSxcclxuICAgIGNzc0luamVjdGVkQnlKc1BsdWdpbigpXHJcbiAgICAvLyBsaWJJbmplY3RDc3MoKSxcclxuICBdLCAvLyBVc2VzIHRoZSAndml0ZS1wbHVnaW4tZHRzJyBwbHVnaW4gZm9yIGdlbmVyYXRpbmcgVHlwZVNjcmlwdCBkZWNsYXJhdGlvbiBmaWxlcyAoZC50cykuXHJcbn0pO1xyXG5cclxuLy8gISBWZXJzaW9uIDIgLSBETyBOT1QgREVMRVRFXHJcbi8vIGltcG9ydCB7IGRlZmluZUNvbmZpZyB9IGZyb20gXCJ2aXRlXCI7XHJcbi8vIGltcG9ydCBkdHMgZnJvbSBcInZpdGUtcGx1Z2luLWR0c1wiO1xyXG4vLyBpbXBvcnQgeyByZXNvbHZlIH0gZnJvbSBcInBhdGhcIjtcclxuLy8gaW1wb3J0IHRzY29uZmlnUGF0aHMgZnJvbSBcInZpdGUtdHNjb25maWctcGF0aHNcIjtcclxuLy8gaW1wb3J0IHsgbGliSW5qZWN0Q3NzIH0gZnJvbSBcInZpdGUtcGx1Z2luLWxpYi1pbmplY3QtY3NzXCI7XHJcblxyXG4vLyAvLyBjb25zdCBESVJOQU1FID0gaW1wb3J0Lm1ldGEuZGlybmFtZTtcclxuLy8gY29uc3QgRElSTkFNRSA9IHJlc29sdmUoXHJcbi8vICAgcHJvY2Vzcy5jd2QoKSxcclxuLy8gICBcIi4vbm9kZV9tb2R1bGVzL2ludGVsbGlnZW50LXJlYWN0LWNvbXBvbmVudHNcIlxyXG4vLyApO1xyXG4vLyBjb25zdCBQQVRIUyA9IHtcclxuLy8gICBiYXNlOiBESVJOQU1FLFxyXG4vLyAgIHNyYzogcmVzb2x2ZShESVJOQU1FLCBcIi4vc3JjL2luZGV4LnRzXCIpLFxyXG4vLyAgIG91dHB1dERpcjogcmVzb2x2ZShESVJOQU1FLCBcIi4vZGlzdFwiKSxcclxuLy8gICB0c2NvbmZpZ1BhdGg6IHJlc29sdmUoRElSTkFNRSwgXCIuL3RzY29uZmlnLmpzb25cIiksXHJcbi8vIH07XHJcbi8vIGNvbnNvbGUubG9nKFBBVEhTKTtcclxuXHJcbi8vIGV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XHJcbi8vICAgYmFzZTogUEFUSFMuYmFzZSxcclxuLy8gICBwdWJsaWNEaXI6IFwicHVibGljXCIsXHJcbi8vICAgYnVpbGQ6IHtcclxuLy8gICAgIGxpYjoge1xyXG4vLyAgICAgICBlbnRyeTogUEFUSFMuc3JjLFxyXG4vLyAgICAgICBuYW1lOiBcImlyY1wiLCAvLyBTZXRzIHRoZSBuYW1lIG9mIHRoZSBnZW5lcmF0ZWQgbGlicmFyeS5cclxuLy8gICAgICAgZmlsZU5hbWU6IChmb3JtYXQpID0+IGBpbmRleC4ke2Zvcm1hdH0uanNgLCAvLyBHZW5lcmF0ZXMgdGhlIG91dHB1dCBmaWxlIG5hbWUgYmFzZWQgb24gdGhlIGZvcm1hdC5cclxuLy8gICAgICAgZm9ybWF0czogW1wiY2pzXCIsIFwiZXNcIl0sIC8vIFNwZWNpZmllcyB0aGUgb3V0cHV0IGZvcm1hdHMgKENvbW1vbkpTIGFuZCBFUyBtb2R1bGVzKS5cclxuLy8gICAgIH0sXHJcbi8vICAgICBvdXREaXI6IFBBVEhTLm91dHB1dERpcixcclxuLy8gICAgIHNvdXJjZW1hcDogdHJ1ZSxcclxuLy8gICAgIGVtcHR5T3V0RGlyOiB0cnVlLFxyXG4vLyAgICAgcm9sbHVwT3B0aW9uczoge1xyXG4vLyAgICAgICBleHRlcm5hbDogW1wicmVhY3RcIl0sXHJcbi8vICAgICB9LFxyXG4vLyAgIH0sXHJcbi8vICAgcGx1Z2luczogW1xyXG4vLyAgICAgZHRzKHtcclxuLy8gICAgICAgcm9sbHVwVHlwZXM6IHRydWUsXHJcbi8vICAgICAgIHJvb3Q6IFBBVEhTLmJhc2UsXHJcbi8vICAgICAgIGluc2VydFR5cGVzRW50cnk6IHRydWUsXHJcbi8vICAgICAgIGNvbXBpbGVyT3B0aW9uczoge1xyXG4vLyAgICAgICAgIGJhc2VVcmw6IFBBVEhTLmJhc2UsXHJcbi8vICAgICAgICAgcGF0aHM6IHtcclxuLy8gICAgICAgICAgIFwiQHR5cGVzLypcIjogW3Jlc29sdmUoUEFUSFMuYmFzZSwgXCIuL3R5cGVzLypcIildLFxyXG4vLyAgICAgICAgIH0sXHJcbi8vICAgICAgIH0sXHJcbi8vICAgICB9KSxcclxuLy8gICAgIHRzY29uZmlnUGF0aHMoe1xyXG4vLyAgICAgICByb290OiBQQVRIUy5iYXNlLFxyXG4vLyAgICAgfSksXHJcbi8vICAgICBsaWJJbmplY3RDc3MoKSxcclxuLy8gICBdLCAvLyBVc2VzIHRoZSAndml0ZS1wbHVnaW4tZHRzJyBwbHVnaW4gZm9yIGdlbmVyYXRpbmcgVHlwZVNjcmlwdCBkZWNsYXJhdGlvbiBmaWxlcyAoZC50cykuXHJcbi8vIH0pO1xyXG4vLyAhIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUE2UixTQUFTLG9CQUFvQjtBQUMxVCxPQUFPLFNBQVM7QUFDaEIsU0FBUyxlQUFlO0FBQ3hCLE9BQU8sbUJBQW1CO0FBRTFCLE9BQU8sMkJBQTJCO0FBTGxDLElBQU0sbUNBQW1DO0FBT3pDLElBQU0sVUFBVTtBQUNoQixJQUFNLFFBQVE7QUFBQSxFQUNaLE1BQU0sUUFBUSxTQUFTLFdBQVc7QUFBQSxFQUNsQyxLQUFLO0FBQUEsRUFDTCxXQUFXO0FBQUEsRUFDWCxjQUFjLFFBQVEsU0FBUyxpQkFBaUI7QUFDbEQ7QUFDQSxJQUFPLDJCQUFRLGFBQWE7QUFBQSxFQUMxQixNQUFNLE1BQU07QUFBQSxFQUNaLE9BQU87QUFBQSxJQUNMLEtBQUs7QUFBQSxNQUNILE9BQU8sUUFBUSxTQUFTLE1BQU0sR0FBRztBQUFBLE1BQ2pDLE1BQU07QUFBQTtBQUFBLE1BQ04sVUFBVSxDQUFDLFdBQVcsU0FBUyxNQUFNO0FBQUE7QUFBQSxNQUNyQyxTQUFTLENBQUMsT0FBTyxJQUFJO0FBQUE7QUFBQSxJQUN2QjtBQUFBLElBQ0EsUUFBUSxRQUFRLFNBQVMsTUFBTSxTQUFTO0FBQUEsSUFDeEMsV0FBVztBQUFBLElBQ1gsYUFBYTtBQUFBLElBQ2IsZUFBZTtBQUFBLE1BQ2IsVUFBVSxDQUFDLE9BQU87QUFBQSxJQUNwQjtBQUFBLEVBQ0Y7QUFBQSxFQUNBLFNBQVM7QUFBQSxJQUNQLElBQUk7QUFBQSxNQUNGLGFBQWE7QUFBQSxNQUNiLE1BQU07QUFBQSxNQUNOLGtCQUFrQjtBQUFBLE1BQ2xCLGlCQUFpQjtBQUFBLFFBQ2YsU0FBUztBQUFBLFFBQ1QsT0FBTztBQUFBLFVBQ0wsWUFBWSxDQUFDLFFBQVEsU0FBUyxXQUFXLENBQUM7QUFBQSxRQUM1QztBQUFBLE1BQ0Y7QUFBQSxJQUNGLENBQUM7QUFBQSxJQUNELGNBQWM7QUFBQSxNQUNaLE1BQU07QUFBQSxJQUNSLENBQUM7QUFBQSxJQUNELHNCQUFzQjtBQUFBO0FBQUEsRUFFeEI7QUFBQTtBQUNGLENBQUM7IiwKICAibmFtZXMiOiBbXQp9Cg==
